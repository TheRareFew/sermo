{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, setMessages } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n_c4 = MessageWrapper;\nconst transformMessage = msg => {\n  // Ensure timestamps are valid UTC ISO strings\n  const createdAt = msg.created_at ? new Date(msg.created_at).toISOString() : new Date().toISOString();\n  const updatedAt = msg.updated_at ? new Date(msg.updated_at).toISOString() : createdAt;\n  return {\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt,\n    updatedAt,\n    replyCount: msg.reply_count || 0,\n    isExpanded: false,\n    ...(msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  };\n};\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef(null);\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef(null);\n  const {\n    currentUser,\n    users,\n    activeChannelId\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users,\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n\n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => msg.replyCount > 0 && !msg.repliesLoaded && !msg.parentId);\n      if (messagesToLoadReplies.length === 0) return;\n      const updatedMessages = [...messages];\n      let hasChanges = false;\n      for (const message of messagesToLoadReplies) {\n        try {\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n\n          // Find and update the message in our copy\n          const messageIndex = updatedMessages.findIndex(msg => msg.id === message.id);\n          if (messageIndex !== -1) {\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              repliesLoaded: true,\n              replies: transformedReplies,\n              // Maintain expanded state if it was previously expanded\n              isExpanded: updatedMessages[messageIndex].isExpanded || false\n            };\n            hasChanges = true;\n          }\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n        }\n      }\n\n      // Only dispatch if we actually made changes\n      if (hasChanges) {\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: updatedMessages\n        }));\n      }\n    };\n    loadRepliesForMessages();\n  }, [activeChannelId, messages.length]); // Only depend on messages.length instead of messages\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n      if (olderMessages.length > 0) {\n        // Transform and prepend messages using the same transformMessage function\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: olderMessages.map(transformMessage)\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const {\n        position,\n        height\n      } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n\n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n\n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n  const handleDeleteMessage = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: activeChannelId,\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleToggleReplies = async messageId => {\n    if (!activeChannelId) return;\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => msg.id === messageId ? {\n            ...msg,\n            repliesLoaded: true,\n            replies: transformedReplies,\n            isExpanded: true // Auto-expand after loading replies\n          } : msg)\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({\n      channelId: activeChannelId,\n      messageId\n    }));\n  };\n  const handleReply = messageId => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n  const handleSendReply = async content => {\n    if (!replyToMessage || !activeChannelId) return;\n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n\n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => msg.id === replyToMessage.id ? {\n          ...msg,\n          replyCount: (msg.replyCount || 0) + 1,\n          isExpanded: true,\n          repliesLoaded: true,\n          replies: [...(msg.replies || []), transformedReply]\n        } : msg)\n      }));\n\n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      onScroll: handleScroll,\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: sortedMessages.map(message => {\n          var _users$message$userId;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(MessageWrapper, {\n              $isSelected: message.id === selectedMessageId,\n              ref: message.id === selectedMessageId ? selectedMessageRef : undefined,\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                content: message.content,\n                sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n                timestamp: message.createdAt,\n                userId: message.userId,\n                currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n                onDelete: () => handleDeleteMessage(message.id),\n                replyCount: message.replyCount,\n                isExpanded: message.isExpanded || false,\n                onToggleReplies: () => handleToggleReplies(message.id),\n                onReply: () => handleReply(message.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), message.isExpanded && message.replyCount > 0 && /*#__PURE__*/_jsxDEV(MessageReplies, {\n              parentId: message.id,\n              replies: message.replies || [],\n              isExpanded: message.isExpanded,\n              onToggleReplies: handleToggleReplies,\n              onDelete: handleDeleteMessage,\n              currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this)]\n          }, message.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), replyToMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: true,\n      onClose: () => setReplyToMessage(null),\n      onSubmit: handleSendReply,\n      parentMessage: replyToMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"VX+aCU8Q7w9J4WmqC5QGs0Tp4aI=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"VX+aCU8Q7w9J4WmqC5QGs0Tp4aI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","useMemo","styled","useSelector","useDispatch","Message","MessageReplies","ReplyModal","deleteMessage","toggleExpanded","prependMessages","setMessages","deleteMessageApi","getChannelMessages","createReply","getReplies","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","transformMessage","msg","createdAt","created_at","Date","toISOString","updatedAt","updated_at","id","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","replyCount","reply_count","isExpanded","parent_id","parentId","MessageList","_s","_c5","ref","messages","selectedMessageId","dispatch","selectedMessageRef","containerRef","isLoadingMore","setIsLoadingMore","hasMore","setHasMore","page","setPage","replyToMessage","setReplyToMessage","PAGE_SIZE","scrollLockRef","currentUser","users","activeChannelId","state","auth","user","chat","sortedMessages","mainMessages","filter","sort","a","b","timeA","getTime","timeB","current","loadRepliesForMessages","messagesToLoadReplies","repliesLoaded","length","updatedMessages","hasChanges","message","replies","transformedReplies","map","messageIndex","findIndex","error","console","loadMoreMessages","log","container","position","scrollTop","height","scrollHeight","olderMessages","p","newPosition","handleScroll","event","currentTarget","scrollIntoView","behavior","block","handleDeleteMessage","messageId","handleToggleReplies","find","m","handleReply","handleSendReply","reply","transformedReply","success","children","onScroll","fileName","_jsxFileName","lineNumber","columnNumber","_users$message$userId","undefined","sender","username","timestamp","currentUserId","onDelete","onToggleReplies","onReply","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User, Message as ApiMessage } from '../../../types';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { toast } from 'react-toastify';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n\nconst transformMessage = (msg: ApiMessage): StoreMessage => {\n  // Ensure timestamps are valid UTC ISO strings\n  const createdAt = msg.created_at ? new Date(msg.created_at).toISOString() : new Date().toISOString();\n  const updatedAt = msg.updated_at ? new Date(msg.updated_at).toISOString() : createdAt;\n\n  return {\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt,\n    updatedAt,\n    replyCount: msg.reply_count || 0,\n    isExpanded: false,\n    ...(msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  };\n};\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState<StoreMessage | null>(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef<{ position: number; height: number } | null>(null);\n\n  const { currentUser, users, activeChannelId } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User },\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    \n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n      \n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => \n        msg.replyCount > 0 && !msg.repliesLoaded && !msg.parentId\n      );\n\n      if (messagesToLoadReplies.length === 0) return;\n\n      const updatedMessages = [...messages];\n      let hasChanges = false;\n\n      for (const message of messagesToLoadReplies) {\n        try {\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          \n          // Find and update the message in our copy\n          const messageIndex = updatedMessages.findIndex(msg => msg.id === message.id);\n          if (messageIndex !== -1) {\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              repliesLoaded: true,\n              replies: transformedReplies,\n              // Maintain expanded state if it was previously expanded\n              isExpanded: updatedMessages[messageIndex].isExpanded || false\n            };\n            hasChanges = true;\n          }\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n        }\n      }\n\n      // Only dispatch if we actually made changes\n      if (hasChanges) {\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: updatedMessages\n        }));\n      }\n    };\n\n    loadRepliesForMessages();\n  }, [activeChannelId, messages.length]); // Only depend on messages.length instead of messages\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      \n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n\n      if (olderMessages.length > 0) {\n        // Transform and prepend messages using the same transformMessage function\n        dispatch(prependMessages({ \n          channelId: activeChannelId, \n          messages: olderMessages.map(transformMessage)\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const { position, height } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      \n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n      \n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n\n  const handleDeleteMessage = async (messageId: string) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: activeChannelId, messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleToggleReplies = async (messageId: string) => {\n    if (!activeChannelId) return;\n\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        \n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => \n            msg.id === messageId \n              ? {\n                  ...msg,\n                  repliesLoaded: true,\n                  replies: transformedReplies,\n                  isExpanded: true // Auto-expand after loading replies\n                }\n              : msg\n          )\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({ channelId: activeChannelId, messageId }));\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!replyToMessage || !activeChannelId) return;\n    \n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      \n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => \n          msg.id === replyToMessage.id \n            ? {\n                ...msg,\n                replyCount: (msg.replyCount || 0) + 1,\n                isExpanded: true,\n                repliesLoaded: true,\n                replies: [...(msg.replies || []), transformedReply]\n              }\n            : msg\n        )\n      }));\n      \n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef} onScroll={handleScroll}>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        <MessagesWrapper>\n          {sortedMessages.map(message => (\n            <React.Fragment key={message.id}>\n              <MessageWrapper\n                $isSelected={message.id === selectedMessageId}\n                ref={message.id === selectedMessageId ? selectedMessageRef : undefined}\n              >\n                <Message\n                  content={message.content}\n                  sender={users[message.userId]?.username || message.userId}\n                  timestamp={message.createdAt}\n                  userId={message.userId}\n                  currentUserId={currentUser?.id}\n                  onDelete={() => handleDeleteMessage(message.id)}\n                  replyCount={message.replyCount}\n                  isExpanded={message.isExpanded || false}\n                  onToggleReplies={() => handleToggleReplies(message.id)}\n                  onReply={() => handleReply(message.id)}\n                />\n              </MessageWrapper>\n              {message.isExpanded && message.replyCount > 0 && (\n                <MessageReplies \n                  parentId={message.id}\n                  replies={message.replies || []}\n                  isExpanded={message.isExpanded}\n                  onToggleReplies={handleToggleReplies}\n                  onDelete={handleDeleteMessage}\n                  currentUserId={currentUser?.id}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      \n      {replyToMessage && (\n        <ReplyModal\n          isOpen={true}\n          onClose={() => setReplyToMessage(null)}\n          onSubmit={handleSendReply}\n          parentMessage={replyToMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}