{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, addChannel, removeChannel, updateChannelUnreadCount, setError } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies, deleteMessage, updateMessage, toggleExpanded } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => state.messages.messagesByChannel[activeChannelId || ''] || []);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? {\n        parentId: msg.parent_id.toString()\n      } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback(msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n  }, []); // Only run once on mount\n\n  // Handle channel initialization and WebSocket connection\n  useEffect(() => {\n    if (!activeChannelId || isChannelSwitching.current) return;\n    const initializeChannel = async () => {\n      try {\n        setIsConnecting(true);\n        const messages = await getChannelMessages(activeChannelId);\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: transformedMessages\n        }));\n        await wsService.connect(activeChannelId);\n      } catch (error) {\n        console.error('Error initializing channel:', error);\n      } finally {\n        setIsConnecting(false);\n      }\n    };\n    initializeChannel();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [activeChannelId, transformMessagesInChunks]);\n\n  // Handle channel switching\n  const handleChannelSwitch = useCallback(async channelId => {\n    if (isChannelSwitching.current || channelId === activeChannelId) return;\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // 1. Cleanup old connection and state\n      if (activeChannelId) {\n        await wsService.disconnect();\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: []\n        }));\n      }\n\n      // 2. Set new channel\n      dispatch(setActiveChannel(channelId));\n\n      // 3. Fetch new channel data\n      const [messages, users] = await Promise.all([getChannelMessages(channelId), getChannelUsers(channelId)]);\n\n      // 4. Update store with new data\n      dispatch(setMessages({\n        channelId,\n        messages: messages.map(transformMessage)\n      }));\n      dispatch(setUsers(users));\n\n      // 5. Establish new WebSocket connection\n      await wsService.connect(channelId);\n      await wsService.joinChannel(channelId);\n    } catch (error) {\n      console.error('Channel switch failed:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket connection errors\n  const handleConnectionError = useCallback(error => {\n    console.error('WebSocket connection error:', error);\n    dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n  }, [dispatch]);\n\n  // Monitor WebSocket connection status\n  const handleConnectionStatus = useCallback(() => {\n    const status = wsService.getChatSocketState();\n    if (status === WebSocket.OPEN) {\n      dispatch(setError(null));\n    }\n  }, [dispatch]);\n\n  // Set up WebSocket error handling and status monitoring\n  useEffect(() => {\n    wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, [handleConnectionError, handleConnectionStatus]);\n\n  // Handle channel selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        await handleChannelSwitch(channelId);\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to the selected message\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n      dispatch(setError('Failed to navigate to message. Please try again.'));\n    }\n  };\n\n  // WebSocket message handler\n  const handleWebSocketMessage = useCallback(message => {\n    console.log('MainLayout received WebSocket message:', message);\n    if (!activeChannelId) return;\n\n    // Check if message is from another channel\n    if ('message' in message && (message.type === 'message' || message.type === 'message_sent' || message.type === 'new_reply' || message.type === 'message_updated') && message.message.channel_id.toString() !== activeChannelId) {\n      console.log('Ignoring message from different channel:', message.message.channel_id, 'current:', activeChannelId);\n      return; // Ignore messages from other channels\n    }\n    switch (message.type) {\n      case 'message':\n      case 'message_sent':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          console.log('Adding new message:', transformedMessage);\n          dispatch(addMessage({\n            channelId: activeChannelId,\n            message: transformedMessage\n          }));\n\n          // Auto-scroll for new messages\n          if (messageListRef.current) {\n            const container = messageListRef.current;\n            const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n            if (isAtBottom) {\n              requestAnimationFrame(() => {\n                container.scrollTop = container.scrollHeight;\n              });\n            }\n          }\n        }\n        break;\n      case 'new_reply':\n        if ('message' in message && message.parentId) {\n          console.log('Adding new reply:', message);\n          const transformedReply = transformMessage(message.message);\n          dispatch(setReplies({\n            channelId: activeChannelId,\n            messageId: message.parentId.toString(),\n            replies: [transformedReply]\n          }));\n\n          // Auto-expand parent message\n          const parentMessage = channelMessages.find(m => m.id === message.parentId);\n          if (parentMessage && !parentMessage.isExpanded) {\n            dispatch(toggleExpanded({\n              channelId: activeChannelId,\n              messageId: message.parentId.toString()\n            }));\n          }\n        }\n        break;\n      case 'message_deleted':\n        dispatch(deleteMessage({\n          channelId: message.channelId,\n          messageId: message.messageId\n        }));\n        break;\n      case 'message_updated':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          dispatch(updateMessage({\n            channelId: transformedMessage.channelId,\n            id: transformedMessage.id,\n            message: transformedMessage\n          }));\n        }\n        break;\n      case 'user_status':\n        dispatch(updateUserStatus({\n          userId: message.user_id,\n          status: message.status\n        }));\n        break;\n      case 'channel_created':\n        dispatch(addChannel(message.channel));\n        break;\n      case 'channel_deleted':\n        dispatch(removeChannel(message.channelId));\n        break;\n      case 'unread_count_updated':\n        dispatch(updateChannelUnreadCount({\n          channelId: message.channelId,\n          count: message.count\n        }));\n        break;\n    }\n  }, [activeChannelId, channelMessages, dispatch]);\n\n  // Set up WebSocket connection and message handling\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [activeChannelId, handleWebSocketMessage]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 536,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"x2qY6jcj4ig0wn5OdcbXBEu2T/0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addChannel","removeChannel","updateChannelUnreadCount","setError","addMessage","setMessages","setReplies","deleteMessage","updateMessage","toggleExpanded","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","transformMessage","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","channelMessages","messages","messagesByChannel","transformMessagesInChunks","map","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","transformToStoreMessage","fetchInitialData","console","log","fetchedChannels","length","firstChannelId","channelUsers","usersObject","reduce","acc","user","current","initializeChannel","transformedMessages","connect","disconnect","handleChannelSwitch","Promise","all","joinChannel","handleConnectionError","handleConnectionStatus","status","getChatSocketState","WebSocket","OPEN","onError","statusInterval","setInterval","clearInterval","handleSelectMessage","messageId","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","setTimeout","remove","requestAnimationFrame","handleWebSocketMessage","message","type","transformedMessage","container","isAtBottom","scrollHeight","scrollTop","clientHeight","transformedReply","replies","parentMessage","m","user_id","count","unsubscribe","onMessage","handleSearch","query","trim","undefined","results","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","handleChannelSelect","Object","values","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage,\n  toggleExpanded\n} from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, Message, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\nimport { transformMessage } from '../../../utils/messageTransform';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => \n    state.messages.messagesByChannel[activeChannelId || ''] || []\n  );\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback((msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n  }, []); // Only run once on mount\n\n  // Handle channel initialization and WebSocket connection\n  useEffect(() => {\n    if (!activeChannelId || isChannelSwitching.current) return;\n\n    const initializeChannel = async () => {\n      try {\n        setIsConnecting(true);\n        const messages = await getChannelMessages(activeChannelId);\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n        await wsService.connect(activeChannelId);\n      } catch (error) {\n        console.error('Error initializing channel:', error);\n      } finally {\n        setIsConnecting(false);\n      }\n    };\n\n    initializeChannel();\n\n    return () => {\n      wsService.disconnect();\n    };\n  }, [activeChannelId, transformMessagesInChunks]);\n\n  // Handle channel switching\n  const handleChannelSwitch = useCallback(async (channelId: string) => {\n    if (isChannelSwitching.current || channelId === activeChannelId) return;\n\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n      \n      // 1. Cleanup old connection and state\n      if (activeChannelId) {\n        await wsService.disconnect();\n        dispatch(setMessages({ \n          channelId: activeChannelId, \n          messages: [] \n        }));\n      }\n      \n      // 2. Set new channel\n      dispatch(setActiveChannel(channelId));\n      \n      // 3. Fetch new channel data\n      const [messages, users] = await Promise.all([\n        getChannelMessages(channelId),\n        getChannelUsers(channelId)\n      ]);\n      \n      // 4. Update store with new data\n      dispatch(setMessages({ \n        channelId, \n        messages: messages.map(transformMessage)\n      }));\n      dispatch(setUsers(users));\n      \n      // 5. Establish new WebSocket connection\n      await wsService.connect(channelId);\n      await wsService.joinChannel(channelId);\n      \n    } catch (error) {\n      console.error('Channel switch failed:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket connection errors\n  const handleConnectionError = useCallback((error: Error) => {\n    console.error('WebSocket connection error:', error);\n    dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n  }, [dispatch]);\n\n  // Monitor WebSocket connection status\n  const handleConnectionStatus = useCallback(() => {\n    const status = wsService.getChatSocketState();\n    if (status === WebSocket.OPEN) {\n      dispatch(setError(null));\n    }\n  }, [dispatch]);\n\n  // Set up WebSocket error handling and status monitoring\n  useEffect(() => {\n    wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, [handleConnectionError, handleConnectionStatus]);\n\n  // Handle channel selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        await handleChannelSwitch(channelId);\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to the selected message\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n      dispatch(setError('Failed to navigate to message. Please try again.'));\n    }\n  };\n\n  // WebSocket message handler\n  const handleWebSocketMessage = useCallback((message: WebSocketMessage) => {\n    console.log('MainLayout received WebSocket message:', message);\n\n    if (!activeChannelId) return;\n\n    // Check if message is from another channel\n    if ('message' in message && \n        (message.type === 'message' || message.type === 'message_sent' || \n         message.type === 'new_reply' || message.type === 'message_updated') && \n        message.message.channel_id.toString() !== activeChannelId) {\n      console.log('Ignoring message from different channel:', message.message.channel_id, 'current:', activeChannelId);\n      return; // Ignore messages from other channels\n    }\n\n    switch (message.type) {\n      case 'message':\n      case 'message_sent':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          console.log('Adding new message:', transformedMessage);\n          \n          dispatch(addMessage({\n            channelId: activeChannelId,\n            message: transformedMessage\n          }));\n\n          // Auto-scroll for new messages\n          if (messageListRef.current) {\n            const container = messageListRef.current;\n            const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n            if (isAtBottom) {\n              requestAnimationFrame(() => {\n                container.scrollTop = container.scrollHeight;\n              });\n            }\n          }\n        }\n        break;\n\n      case 'new_reply':\n        if ('message' in message && message.parentId) {\n          console.log('Adding new reply:', message);\n          const transformedReply = transformMessage(message.message);\n          \n          dispatch(setReplies({\n            channelId: activeChannelId,\n            messageId: message.parentId.toString(),\n            replies: [transformedReply]\n          }));\n\n          // Auto-expand parent message\n          const parentMessage = channelMessages.find(m => m.id === message.parentId);\n          if (parentMessage && !parentMessage.isExpanded) {\n            dispatch(toggleExpanded({\n              channelId: activeChannelId,\n              messageId: message.parentId.toString()\n            }));\n          }\n        }\n        break;\n\n      case 'message_deleted':\n        dispatch(deleteMessage({\n          channelId: message.channelId,\n          messageId: message.messageId\n        }));\n        break;\n\n      case 'message_updated':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          dispatch(updateMessage({\n            channelId: transformedMessage.channelId,\n            id: transformedMessage.id,\n            message: transformedMessage\n          }));\n        }\n        break;\n\n      case 'user_status':\n        dispatch(updateUserStatus({\n          userId: message.user_id,\n          status: message.status\n        }));\n        break;\n\n      case 'channel_created':\n        dispatch(addChannel(message.channel));\n        break;\n\n      case 'channel_deleted':\n        dispatch(removeChannel(message.channelId));\n        break;\n\n      case 'unread_count_updated':\n        dispatch(updateChannelUnreadCount({\n          channelId: message.channelId,\n          count: message.count\n        }));\n        break;\n    }\n  }, [activeChannelId, channelMessages, dispatch]);\n\n  // Set up WebSocket connection and message handling\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [activeChannelId, handleWebSocketMessage]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}