{"ast":null,"code":"export const transformMessage = message => {\n  var _message$parent_id;\n  console.log('Transforming message:', message);\n  console.log('Raw reactions:', message.reactions);\n  const transformed = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: message.channel_id.toString(),\n    userId: message.sender_id.toString(),\n    reactions: Array.isArray(message.reactions) ? message.reactions : [],\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: (_message$parent_id = message.parent_id) === null || _message$parent_id === void 0 ? void 0 : _message$parent_id.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  };\n  console.log('Transformed message:', transformed);\n  return transformed;\n};","map":{"version":3,"names":["transformMessage","message","_message$parent_id","console","log","reactions","transformed","id","toString","content","channelId","channel_id","userId","sender_id","Array","isArray","attachments","createdAt","created_at","updatedAt","updated_at","parentId","parent_id","replyCount","reply_count","isExpanded","repliesLoaded","replies"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { Message, RawMessage, StoreMessage } from '../types';\n\nexport const transformMessage = (message: RawMessage | Message): StoreMessage => {\n  console.log('Transforming message:', message);\n  console.log('Raw reactions:', message.reactions);\n  \n  const transformed: StoreMessage = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: message.channel_id.toString(),\n    userId: message.sender_id.toString(),\n    reactions: Array.isArray(message.reactions) ? message.reactions : [],\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: message.parent_id?.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  };\n  \n  console.log('Transformed message:', transformed);\n  return transformed;\n}; "],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAIC,OAA6B,IAAmB;EAAA,IAAAC,kBAAA;EAC/EC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,OAAO,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,OAAO,CAACI,SAAS,CAAC;EAEhD,MAAMC,WAAyB,GAAG;IAChCC,EAAE,EAAEN,OAAO,CAACM,EAAE,CAACC,QAAQ,CAAC,CAAC;IACzBC,OAAO,EAAER,OAAO,CAACQ,OAAO;IACxBC,SAAS,EAAET,OAAO,CAACU,UAAU,CAACH,QAAQ,CAAC,CAAC;IACxCI,MAAM,EAAEX,OAAO,CAACY,SAAS,CAACL,QAAQ,CAAC,CAAC;IACpCH,SAAS,EAAES,KAAK,CAACC,OAAO,CAACd,OAAO,CAACI,SAAS,CAAC,GAAGJ,OAAO,CAACI,SAAS,GAAG,EAAE;IACpEW,WAAW,EAAEF,KAAK,CAACC,OAAO,CAACd,OAAO,CAACe,WAAW,CAAC,GAAGf,OAAO,CAACe,WAAW,GAAG,EAAE;IAC1EC,SAAS,EAAEhB,OAAO,CAACiB,UAAU;IAC7BC,SAAS,EAAElB,OAAO,CAACmB,UAAU,IAAInB,OAAO,CAACiB,UAAU;IACnDG,QAAQ,GAAAnB,kBAAA,GAAED,OAAO,CAACqB,SAAS,cAAApB,kBAAA,uBAAjBA,kBAAA,CAAmBM,QAAQ,CAAC,CAAC;IACvCe,UAAU,EAAEtB,OAAO,CAACuB,WAAW,IAAI,CAAC;IACpCC,UAAU,EAAE,KAAK;IACjBC,aAAa,EAAE,KAAK;IACpBC,OAAO,EAAE;EACX,CAAC;EAEDxB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEE,WAAW,CAAC;EAChD,OAAOA,WAAW;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}