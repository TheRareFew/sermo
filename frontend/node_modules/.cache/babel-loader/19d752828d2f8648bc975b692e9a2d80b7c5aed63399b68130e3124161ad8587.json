{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, addChannel, removeChannel, updateChannelUnreadCount, setError } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies, deleteMessage, updateMessage } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? {\n        parentId: msg.parent_id.toString()\n      } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback(msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  }), []);\n  const transformMessage = useCallback(message => ({\n    id: message.id,\n    content: message.content,\n    channelId: message.channel_id,\n    userId: message.sender_id,\n    reactions: [],\n    attachments: [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: message.parent_id,\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n  }, []); // Only run once on mount\n\n  // Handle channel initialization and WebSocket connection\n  useEffect(() => {\n    if (!activeChannelId || isChannelSwitching.current) return;\n    const initializeChannel = async () => {\n      try {\n        setIsConnecting(true);\n        const messages = await getChannelMessages(activeChannelId);\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: transformedMessages\n        }));\n        await wsService.connect(activeChannelId);\n      } catch (error) {\n        console.error('Error initializing channel:', error);\n      } finally {\n        setIsConnecting(false);\n      }\n    };\n    initializeChannel();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [activeChannelId, transformMessagesInChunks]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async channelId => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // First disconnect from current channel\n      wsService.disconnect();\n\n      // Set the active channel and clear messages\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n\n      // Fetch channel users and messages in parallel\n      const [channelUsers, messages] = await Promise.all([getChannelUsers(channelId), getChannelMessages(channelId)]);\n\n      // Update users in store\n      const usersObject = channelUsers.reduce((acc, user) => ({\n        ...acc,\n        [user.id]: user\n      }), {});\n      dispatch(setUsers(usersObject));\n\n      // Transform and update messages\n      const transformedMessages = transformMessagesInChunks(messages);\n      dispatch(setMessages({\n        channelId,\n        messages: transformedMessages\n      }));\n\n      // Connect to WebSocket for the new channel with retries\n      let retryCount = 0;\n      const maxRetries = 3;\n      while (retryCount < maxRetries) {\n        try {\n          await wsService.connect(channelId);\n          console.log('Successfully connected to WebSocket for channel:', channelId);\n          break;\n        } catch (wsError) {\n          console.error(`WebSocket connection attempt ${retryCount + 1} failed:`, wsError);\n          retryCount++;\n          if (retryCount === maxRetries) {\n            console.error('Max WebSocket connection retries reached');\n            // Even if WebSocket fails, we can still show messages\n            // We'll retry connection in the background\n            setTimeout(() => wsService.connect(channelId), 2000);\n          } else {\n            // Wait before retrying\n            await new Promise(resolve => setTimeout(resolve, 1000));\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, transformMessagesInChunks]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const handleWebSocketMessage = message => {\n      switch (message.type) {\n        case 'channel_created':\n          dispatch(addChannel(message.channel));\n          break;\n        case 'channel_deleted':\n          dispatch(removeChannel(message.channelId.toString()));\n          if (message.channelId.toString() === activeChannelId && channels.length > 0) {\n            const firstChannel = channels.find(ch => ch.id !== message.channelId);\n            if (firstChannel) {\n              handleChannelSelect(firstChannel.id);\n            }\n          }\n          break;\n        case 'channel_updated':\n          dispatch(setChannels(channels.map(ch => ch.id === message.channel.id ? message.channel : ch)));\n          break;\n        case 'unread_count_updated':\n          dispatch(updateChannelUnreadCount({\n            channelId: message.channelId.toString(),\n            count: message.count\n          }));\n          break;\n        case 'user_status':\n          dispatch(updateUserStatus({\n            userId: message.user_id.toString(),\n            status: message.status\n          }));\n          break;\n        case 'message':\n        case 'message_sent':\n          if ('message' in message) {\n            const transformedMessage = transformMessage(message.message);\n            console.log('Adding new message:', transformedMessage);\n\n            // Optimistically add message to state\n            dispatch(addMessage({\n              channelId: activeChannelId,\n              message: transformedMessage\n            }));\n\n            // Check if we should scroll\n            if (messageListRef.current) {\n              const container = messageListRef.current;\n              const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n\n              // If we're near the bottom, scroll immediately\n              if (isAtBottom) {\n                requestAnimationFrame(() => {\n                  container.scrollTop = container.scrollHeight;\n                });\n              }\n            }\n          }\n          break;\n        case 'new_reply':\n          if ('message' in message && 'parentId' in message) {\n            const transformedReply = transformMessage(message.message);\n            dispatch(setReplies({\n              channelId: message.message.channel_id,\n              messageId: message.parentId,\n              replies: [transformedReply]\n            }));\n          }\n          break;\n        case 'message_deleted':\n          dispatch(deleteMessage({\n            channelId: message.channelId,\n            messageId: message.messageId\n          }));\n          break;\n        case 'message_updated':\n          if ('message' in message) {\n            dispatch(updateMessage({\n              channelId: message.message.channel_id,\n              id: message.message.id,\n              message: transformMessage(message.message)\n            }));\n          }\n          break;\n      }\n    };\n\n    // Add connection status handling\n    const handleConnectionError = error => {\n      console.error('WebSocket connection error:', error);\n      dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n    };\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n      }\n    };\n    wsService.onMessage(handleWebSocketMessage);\n    wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, [activeChannelId, channels, dispatch]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 557,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"cauftA4zer33SiwJ4Fv4f+Kq8vg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addChannel","removeChannel","updateChannelUnreadCount","setError","addMessage","setMessages","setReplies","deleteMessage","updateMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","channelMessages","messages","messagesByChannel","transformMessagesInChunks","map","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","transformToStoreMessage","transformMessage","message","updated_at","repliesLoaded","replies","fetchInitialData","console","log","fetchedChannels","length","firstChannelId","channelUsers","usersObject","reduce","acc","user","current","initializeChannel","transformedMessages","connect","disconnect","handleChannelSelect","Promise","all","retryCount","maxRetries","wsError","setTimeout","resolve","handleWebSocketMessage","type","firstChannel","ch","count","user_id","status","transformedMessage","container","isAtBottom","scrollHeight","scrollTop","clientHeight","requestAnimationFrame","transformedReply","messageId","handleConnectionError","handleConnectionStatus","getChatSocketState","WebSocket","OPEN","onMessage","onError","statusInterval","setInterval","clearInterval","handleSearch","query","trim","undefined","results","handleSelectMessage","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage\n} from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, Message, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback((msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  }), []);\n\n  const transformMessage = useCallback((message: Message): StoreMessage => ({\n    id: message.id,\n    content: message.content,\n    channelId: message.channel_id,\n    userId: message.sender_id,\n    reactions: [],\n    attachments: [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: message.parent_id,\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n  }, []); // Only run once on mount\n\n  // Handle channel initialization and WebSocket connection\n  useEffect(() => {\n    if (!activeChannelId || isChannelSwitching.current) return;\n\n    const initializeChannel = async () => {\n      try {\n        setIsConnecting(true);\n        const messages = await getChannelMessages(activeChannelId);\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n        await wsService.connect(activeChannelId);\n      } catch (error) {\n        console.error('Error initializing channel:', error);\n      } finally {\n        setIsConnecting(false);\n      }\n    };\n\n    initializeChannel();\n\n    return () => {\n      wsService.disconnect();\n    };\n  }, [activeChannelId, transformMessagesInChunks]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async (channelId: string) => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // First disconnect from current channel\n      wsService.disconnect();\n\n      // Set the active channel and clear messages\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({ channelId, messages: [] }));\n\n      // Fetch channel users and messages in parallel\n      const [channelUsers, messages] = await Promise.all([\n        getChannelUsers(channelId),\n        getChannelMessages(channelId)\n      ]);\n\n      // Update users in store\n      const usersObject = channelUsers.reduce((acc, user) => ({\n        ...acc,\n        [user.id]: user\n      }), {});\n      dispatch(setUsers(usersObject));\n\n      // Transform and update messages\n      const transformedMessages = transformMessagesInChunks(messages);\n      dispatch(setMessages({ channelId, messages: transformedMessages }));\n\n      // Connect to WebSocket for the new channel with retries\n      let retryCount = 0;\n      const maxRetries = 3;\n      \n      while (retryCount < maxRetries) {\n        try {\n          await wsService.connect(channelId);\n          console.log('Successfully connected to WebSocket for channel:', channelId);\n          break;\n        } catch (wsError) {\n          console.error(`WebSocket connection attempt ${retryCount + 1} failed:`, wsError);\n          retryCount++;\n          \n          if (retryCount === maxRetries) {\n            console.error('Max WebSocket connection retries reached');\n            // Even if WebSocket fails, we can still show messages\n            // We'll retry connection in the background\n            setTimeout(() => wsService.connect(channelId), 2000);\n          } else {\n            // Wait before retrying\n            await new Promise(resolve => setTimeout(resolve, 1000));\n          }\n        }\n      }\n\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, transformMessagesInChunks]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      switch (message.type) {\n        case 'channel_created':\n          dispatch(addChannel(message.channel));\n          break;\n\n        case 'channel_deleted':\n          dispatch(removeChannel(message.channelId.toString()));\n          if (message.channelId.toString() === activeChannelId && channels.length > 0) {\n            const firstChannel = channels.find(ch => ch.id !== message.channelId);\n            if (firstChannel) {\n              handleChannelSelect(firstChannel.id);\n            }\n          }\n          break;\n\n        case 'channel_updated':\n          dispatch(setChannels(\n            channels.map(ch => ch.id === message.channel.id ? message.channel : ch)\n          ));\n          break;\n\n        case 'unread_count_updated':\n          dispatch(updateChannelUnreadCount({\n            channelId: message.channelId.toString(),\n            count: message.count\n          }));\n          break;\n\n        case 'user_status':\n          dispatch(updateUserStatus({\n            userId: message.user_id.toString(),\n            status: message.status\n          }));\n          break;\n\n        case 'message':\n        case 'message_sent':\n          if ('message' in message) {\n            const transformedMessage = transformMessage(message.message);\n            console.log('Adding new message:', transformedMessage);\n            \n            // Optimistically add message to state\n            dispatch(addMessage({\n              channelId: activeChannelId,\n              message: transformedMessage\n            }));\n            \n            // Check if we should scroll\n            if (messageListRef.current) {\n              const container = messageListRef.current;\n              const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n              \n              // If we're near the bottom, scroll immediately\n              if (isAtBottom) {\n                requestAnimationFrame(() => {\n                  container.scrollTop = container.scrollHeight;\n                });\n              }\n            }\n          }\n          break;\n\n        case 'new_reply':\n          if ('message' in message && 'parentId' in message) {\n            const transformedReply = transformMessage(message.message);\n            dispatch(setReplies({\n              channelId: message.message.channel_id,\n              messageId: message.parentId,\n              replies: [transformedReply]\n            }));\n          }\n          break;\n\n        case 'message_deleted':\n          dispatch(deleteMessage({\n            channelId: message.channelId,\n            messageId: message.messageId\n          }));\n          break;\n\n        case 'message_updated':\n          if ('message' in message) {\n            dispatch(updateMessage({\n              channelId: message.message.channel_id,\n              id: message.message.id,\n              message: transformMessage(message.message)\n            }));\n          }\n          break;\n      }\n    };\n\n    // Add connection status handling\n    const handleConnectionError = (error: Error) => {\n      console.error('WebSocket connection error:', error);\n      dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n    };\n\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n      }\n    };\n\n    wsService.onMessage(handleWebSocketMessage);\n    wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, [activeChannelId, channels, dispatch]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}