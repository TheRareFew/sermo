{"ast":null,"code":"export const transformMessage = message => {\n  console.log('Transforming message:', message);\n\n  // Ensure reactions is an array and filter out invalid reactions\n  const reactions = Array.isArray(message.reactions) ? message.reactions.filter(reaction => {\n    if (!reaction || typeof reaction !== 'object') {\n      console.warn('Invalid reaction object:', reaction);\n      return false;\n    }\n    if (!reaction.userId || !reaction.emoji) {\n      console.warn('Reaction missing required fields:', reaction);\n      return false;\n    }\n    return true;\n  }) : [];\n  console.log('Transformed reactions:', reactions);\n  return {\n    id: message.id,\n    content: message.content,\n    userId: message.user_id,\n    channelId: message.channel_id,\n    createdAt: message.created_at,\n    updatedAt: message.updated_at,\n    parentId: message.parent_id,\n    reactions,\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    attachments: Array.isArray(message.attachments) ? message.attachments : []\n  };\n};","map":{"version":3,"names":["transformMessage","message","console","log","reactions","Array","isArray","filter","reaction","warn","userId","emoji","id","content","user_id","channelId","channel_id","createdAt","created_at","updatedAt","updated_at","parentId","parent_id","replyCount","reply_count","isExpanded","repliesLoaded","attachments"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { RawMessage, StoreMessage, Reaction } from '../types';\n\nexport const transformMessage = (message: RawMessage): StoreMessage => {\n  console.log('Transforming message:', message);\n  \n  // Ensure reactions is an array and filter out invalid reactions\n  const reactions = Array.isArray(message.reactions) \n    ? message.reactions.filter((reaction): reaction is Reaction => {\n        if (!reaction || typeof reaction !== 'object') {\n          console.warn('Invalid reaction object:', reaction);\n          return false;\n        }\n        if (!reaction.userId || !reaction.emoji) {\n          console.warn('Reaction missing required fields:', reaction);\n          return false;\n        }\n        return true;\n      })\n    : [];\n\n  console.log('Transformed reactions:', reactions);\n\n  return {\n    id: message.id,\n    content: message.content,\n    userId: message.user_id,\n    channelId: message.channel_id,\n    createdAt: message.created_at,\n    updatedAt: message.updated_at,\n    parentId: message.parent_id,\n    reactions,\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    attachments: Array.isArray(message.attachments) ? message.attachments : []\n  };\n}; "],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAIC,OAAmB,IAAmB;EACrEC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,OAAO,CAAC;;EAE7C;EACA,MAAMG,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACL,OAAO,CAACG,SAAS,CAAC,GAC9CH,OAAO,CAACG,SAAS,CAACG,MAAM,CAAEC,QAAQ,IAA2B;IAC3D,IAAI,CAACA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC7CN,OAAO,CAACO,IAAI,CAAC,0BAA0B,EAAED,QAAQ,CAAC;MAClD,OAAO,KAAK;IACd;IACA,IAAI,CAACA,QAAQ,CAACE,MAAM,IAAI,CAACF,QAAQ,CAACG,KAAK,EAAE;MACvCT,OAAO,CAACO,IAAI,CAAC,mCAAmC,EAAED,QAAQ,CAAC;MAC3D,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,CAAC,GACF,EAAE;EAENN,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,SAAS,CAAC;EAEhD,OAAO;IACLQ,EAAE,EAAEX,OAAO,CAACW,EAAE;IACdC,OAAO,EAAEZ,OAAO,CAACY,OAAO;IACxBH,MAAM,EAAET,OAAO,CAACa,OAAO;IACvBC,SAAS,EAAEd,OAAO,CAACe,UAAU;IAC7BC,SAAS,EAAEhB,OAAO,CAACiB,UAAU;IAC7BC,SAAS,EAAElB,OAAO,CAACmB,UAAU;IAC7BC,QAAQ,EAAEpB,OAAO,CAACqB,SAAS;IAC3BlB,SAAS;IACTmB,UAAU,EAAEtB,OAAO,CAACuB,WAAW,IAAI,CAAC;IACpCC,UAAU,EAAE,KAAK;IACjBC,aAAa,EAAE,KAAK;IACpBC,WAAW,EAAEtB,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC0B,WAAW,CAAC,GAAG1B,OAAO,CAAC0B,WAAW,GAAG;EAC1E,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}