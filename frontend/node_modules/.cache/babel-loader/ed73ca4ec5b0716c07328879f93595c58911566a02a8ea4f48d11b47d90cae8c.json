{"ast":null,"code":"var _WebSocketService;\nimport { store } from '../../store';\nimport { addMessage, updateMessage, addReaction, removeReaction } from '../../store/messages/messagesSlice';\nimport { updateUserStatus } from '../../store/chat/chatSlice';\n\n// Get WebSocket URL from environment variable or fallback to localhost\nconst WS_BASE_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n\n// Helper function to get the correct WebSocket URL based on the current protocol\nconst getWebSocketUrl = () => {\n  // If we're on HTTPS, use WSS\n  if (window.location.protocol === 'https:' && WS_BASE_URL.startsWith('ws:')) {\n    return WS_BASE_URL.replace('ws:', 'wss:');\n  }\n  return WS_BASE_URL;\n};\nexport class WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.pingInterval = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.channels = new Set();\n    if (WebSocketService.instance) {\n      return WebSocketService.instance;\n    }\n    WebSocketService.instance = this;\n  }\n  getAuthToken() {\n    var _state$auth;\n    const state = store.getState();\n    return ((_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : _state$auth.token) || null;\n  }\n  connect() {\n    var _this$ws;\n    if (((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN) return;\n    const token = this.getAuthToken();\n    if (!token) {\n      console.warn('No auth token available, skipping WebSocket connection');\n      return;\n    }\n    const wsUrl = `${getWebSocketUrl()}?token=${token}`;\n    console.log('Connecting to WebSocket:', wsUrl);\n    try {\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket connected successfully');\n        this.reconnectAttempts = 0;\n        this.startPingInterval();\n\n        // Rejoin all channels\n        this.channels.forEach(channelId => {\n          this.joinChannel(channelId);\n        });\n      };\n      this.ws.onmessage = this.handleMessage.bind(this);\n      this.ws.onclose = event => {\n        console.log('WebSocket disconnected with code:', event.code);\n        this.stopPingInterval();\n        this.handleReconnect();\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n      }, 5000);\n    }\n  }\n  startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      var _this$ws2;\n      if (((_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.readyState) === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'PING'\n        }));\n      }\n    }, 30000);\n  }\n  stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    this.stopPingInterval();\n  }\n  handleMessage(event) {\n    var _data$data, _data$data2, _data$data3, _data$data4, _data$data5, _data$data6, _data$data7;\n    try {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket message received:', data);\n      switch (data.type) {\n        case 'new_message':\n          if (data.channelId && data.message) {\n            if (data.isReply && data.parentId) {\n              store.dispatch(addMessage({\n                channelId: data.channelId,\n                message: {\n                  ...data.message,\n                  parentId: data.parentId\n                }\n              }));\n            } else {\n              store.dispatch(addMessage({\n                channelId: data.channelId,\n                message: data.message\n              }));\n            }\n          }\n          break;\n        case 'update_message':\n          if (data.channelId && data.id && data.updates) {\n            store.dispatch(updateMessage({\n              channelId: data.channelId,\n              messageId: data.id,\n              message: data.updates\n            }));\n          }\n          break;\n        case 'user_status':\n          if (data.userId && data.status) {\n            store.dispatch(updateUserStatus({\n              userId: data.userId,\n              status: data.status\n            }));\n          }\n          break;\n        case 'reaction_added':\n          if ((_data$data = data.data) !== null && _data$data !== void 0 && _data$data.channel_id && (_data$data2 = data.data) !== null && _data$data2 !== void 0 && _data$data2.message_id && (_data$data3 = data.data) !== null && _data$data3 !== void 0 && _data$data3.reaction) {\n            var _state$messages$messa, _updatedState$message;\n            const channelId = data.data.channel_id.toString();\n            const messageId = data.data.message_id;\n            const reaction = data.data.reaction;\n            console.log('Handling reaction_added:', {\n              channelId,\n              messageId,\n              reaction\n            });\n\n            // Get current state\n            const state = store.getState();\n            const message = (_state$messages$messa = state.messages.messagesByChannel[channelId]) === null || _state$messages$messa === void 0 ? void 0 : _state$messages$messa.find(m => m.id === messageId);\n            console.log('Current message state:', message);\n            store.dispatch(addReaction({\n              channelId,\n              messageId,\n              reaction\n            }));\n\n            // Get updated state\n            const updatedState = store.getState();\n            const updatedMessage = (_updatedState$message = updatedState.messages.messagesByChannel[channelId]) === null || _updatedState$message === void 0 ? void 0 : _updatedState$message.find(m => m.id === messageId);\n            console.log('Updated message state:', updatedMessage);\n          } else {\n            console.warn('Invalid reaction_added data:', data);\n          }\n          break;\n        case 'reaction_removed':\n          if ((_data$data4 = data.data) !== null && _data$data4 !== void 0 && _data$data4.channel_id && (_data$data5 = data.data) !== null && _data$data5 !== void 0 && _data$data5.message_id && (_data$data6 = data.data) !== null && _data$data6 !== void 0 && _data$data6.user_id && (_data$data7 = data.data) !== null && _data$data7 !== void 0 && _data$data7.emoji) {\n            var _state$messages$messa2, _updatedState$message2;\n            const channelId = data.data.channel_id.toString();\n            const messageId = data.data.message_id;\n            const userId = data.data.user_id;\n            const emoji = data.data.emoji;\n            console.log('Handling reaction_removed:', {\n              channelId,\n              messageId,\n              userId,\n              emoji\n            });\n\n            // Get current state\n            const state = store.getState();\n            const message = (_state$messages$messa2 = state.messages.messagesByChannel[channelId]) === null || _state$messages$messa2 === void 0 ? void 0 : _state$messages$messa2.find(m => m.id === messageId);\n            console.log('Current message state:', message);\n            store.dispatch(removeReaction({\n              channelId,\n              messageId,\n              userId,\n              emoji\n            }));\n\n            // Get updated state\n            const updatedState = store.getState();\n            const updatedMessage = (_updatedState$message2 = updatedState.messages.messagesByChannel[channelId]) === null || _updatedState$message2 === void 0 ? void 0 : _updatedState$message2.find(m => m.id === messageId);\n            console.log('Updated message state:', updatedMessage);\n          } else {\n            console.warn('Invalid reaction_removed data:', data);\n          }\n          break;\n        case 'pong':\n          // Handle pong response\n          break;\n        default:\n          console.warn('Unknown message type:', data.type);\n      }\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n    }\n  }\n  joinChannel(channelId) {\n    var _this$ws3;\n    if (((_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.readyState) === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'JOIN_CHANNEL',\n        channelId\n      }));\n      this.channels.add(channelId);\n    }\n  }\n  leaveChannel(channelId) {\n    var _this$ws4;\n    if (((_this$ws4 = this.ws) === null || _this$ws4 === void 0 ? void 0 : _this$ws4.readyState) === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'LEAVE_CHANNEL',\n        channelId\n      }));\n      this.channels.delete(channelId);\n    }\n  }\n}\n_WebSocketService = WebSocketService;\nWebSocketService.instance = null;\nexport default new WebSocketService();","map":{"version":3,"names":["store","addMessage","updateMessage","addReaction","removeReaction","updateUserStatus","WS_BASE_URL","process","env","REACT_APP_WS_URL","getWebSocketUrl","window","location","protocol","startsWith","replace","WebSocketService","constructor","ws","pingInterval","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","channels","Set","instance","getAuthToken","_state$auth","state","getState","auth","token","connect","_this$ws","readyState","WebSocket","OPEN","console","warn","wsUrl","log","onopen","startPingInterval","forEach","channelId","joinChannel","onmessage","handleMessage","bind","onclose","event","code","stopPingInterval","handleReconnect","onerror","error","setTimeout","setInterval","_this$ws2","send","JSON","stringify","type","clearInterval","disconnect","close","clearTimeout","_data$data","_data$data2","_data$data3","_data$data4","_data$data5","_data$data6","_data$data7","data","parse","message","isReply","parentId","dispatch","id","updates","messageId","userId","status","channel_id","message_id","reaction","_state$messages$messa","_updatedState$message","toString","messages","messagesByChannel","find","m","updatedState","updatedMessage","user_id","emoji","_state$messages$messa2","_updatedState$message2","_this$ws3","add","leaveChannel","_this$ws4","delete","_WebSocketService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { Reaction } from '../../types';\r\nimport { store } from '../../store';\r\nimport { addMessage, updateMessage, addReaction, removeReaction } from '../../store/messages/messagesSlice';\r\nimport { updateUserStatus } from '../../store/chat/chatSlice';\r\n\r\n// Get WebSocket URL from environment variable or fallback to localhost\r\nconst WS_BASE_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\r\n\r\n// Helper function to get the correct WebSocket URL based on the current protocol\r\nconst getWebSocketUrl = () => {\r\n  // If we're on HTTPS, use WSS\r\n  if (window.location.protocol === 'https:' && WS_BASE_URL.startsWith('ws:')) {\r\n    return WS_BASE_URL.replace('ws:', 'wss:');\r\n  }\r\n  return WS_BASE_URL;\r\n};\r\n\r\ninterface WebSocketMessage {\r\n  type: 'new_message' | 'update_message' | 'user_status' | 'ping' | 'pong' | 'join_channel' | 'leave_channel' | 'reaction_added' | 'reaction_removed';\r\n  channelId?: string;\r\n  message?: any;\r\n  id?: string;\r\n  updates?: any;\r\n  userId?: string;\r\n  status?: 'online' | 'offline' | 'away' | 'busy';\r\n  isReply?: boolean;\r\n  parentId?: string;\r\n  messageId?: string;\r\n  reaction?: Reaction;\r\n  emoji?: string;\r\n  data?: {\r\n    channel_id: number | string;\r\n    message_id: string;\r\n    user_id: string;\r\n    emoji: string;\r\n    reaction: Reaction;\r\n  };\r\n}\r\n\r\nexport class WebSocketService {\r\n  private static instance: WebSocketService | null = null;\r\n  private ws: WebSocket | null = null;\r\n  private pingInterval: NodeJS.Timeout | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private channels: Set<string> = new Set();\r\n\r\n  constructor() {\r\n    if (WebSocketService.instance) {\r\n      return WebSocketService.instance;\r\n    }\r\n    WebSocketService.instance = this;\r\n  }\r\n\r\n  private getAuthToken(): string | null {\r\n    const state = store.getState();\r\n    return state.auth?.token || null;\r\n  }\r\n\r\n  public connect() {\r\n    if (this.ws?.readyState === WebSocket.OPEN) return;\r\n\r\n    const token = this.getAuthToken();\r\n    if (!token) {\r\n      console.warn('No auth token available, skipping WebSocket connection');\r\n      return;\r\n    }\r\n\r\n    const wsUrl = `${getWebSocketUrl()}?token=${token}`;\r\n    console.log('Connecting to WebSocket:', wsUrl);\r\n    \r\n    try {\r\n      this.ws = new WebSocket(wsUrl);\r\n      \r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket connected successfully');\r\n        this.reconnectAttempts = 0;\r\n        this.startPingInterval();\r\n        \r\n        // Rejoin all channels\r\n        this.channels.forEach(channelId => {\r\n          this.joinChannel(channelId);\r\n        });\r\n      };\r\n\r\n      this.ws.onmessage = this.handleMessage.bind(this);\r\n      this.ws.onclose = (event) => {\r\n        console.log('WebSocket disconnected with code:', event.code);\r\n        this.stopPingInterval();\r\n        this.handleReconnect();\r\n      };\r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating WebSocket connection:', error);\r\n    }\r\n  }\r\n\r\n  private handleReconnect() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      this.reconnectTimeout = setTimeout(() => {\r\n        this.connect();\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  private startPingInterval() {\r\n    this.pingInterval = setInterval(() => {\r\n      if (this.ws?.readyState === WebSocket.OPEN) {\r\n        this.ws.send(JSON.stringify({ type: 'PING' }));\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  private stopPingInterval() {\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n      this.pingInterval = null;\r\n    }\r\n  }\r\n\r\n  public disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n    this.stopPingInterval();\r\n  }\r\n\r\n  private handleMessage(event: MessageEvent) {\r\n    try {\r\n      const data = JSON.parse(event.data) as WebSocketMessage;\r\n      console.log('WebSocket message received:', data);\r\n\r\n      switch (data.type) {\r\n        case 'new_message':\r\n          if (data.channelId && data.message) {\r\n            if (data.isReply && data.parentId) {\r\n              store.dispatch(addMessage({\r\n                channelId: data.channelId,\r\n                message: {\r\n                  ...data.message,\r\n                  parentId: data.parentId\r\n                }\r\n              }));\r\n            } else {\r\n              store.dispatch(addMessage({\r\n                channelId: data.channelId,\r\n                message: data.message\r\n              }));\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 'update_message':\r\n          if (data.channelId && data.id && data.updates) {\r\n            store.dispatch(updateMessage({\r\n              channelId: data.channelId,\r\n              messageId: data.id,\r\n              message: data.updates\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'user_status':\r\n          if (data.userId && data.status) {\r\n            store.dispatch(updateUserStatus({\r\n              userId: data.userId,\r\n              status: data.status\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'reaction_added':\r\n          if (data.data?.channel_id && data.data?.message_id && data.data?.reaction) {\r\n            const channelId = data.data.channel_id.toString();\r\n            const messageId = data.data.message_id;\r\n            const reaction = data.data.reaction;\r\n\r\n            console.log('Handling reaction_added:', {\r\n              channelId,\r\n              messageId,\r\n              reaction\r\n            });\r\n            \r\n            // Get current state\r\n            const state = store.getState();\r\n            const message = state.messages.messagesByChannel[channelId]?.find(\r\n              m => m.id === messageId\r\n            );\r\n            console.log('Current message state:', message);\r\n            \r\n            store.dispatch(addReaction({\r\n              channelId,\r\n              messageId,\r\n              reaction\r\n            }));\r\n            \r\n            // Get updated state\r\n            const updatedState = store.getState();\r\n            const updatedMessage = updatedState.messages.messagesByChannel[channelId]?.find(\r\n              m => m.id === messageId\r\n            );\r\n            console.log('Updated message state:', updatedMessage);\r\n          } else {\r\n            console.warn('Invalid reaction_added data:', data);\r\n          }\r\n          break;\r\n\r\n        case 'reaction_removed':\r\n          if (data.data?.channel_id && data.data?.message_id && data.data?.user_id && data.data?.emoji) {\r\n            const channelId = data.data.channel_id.toString();\r\n            const messageId = data.data.message_id;\r\n            const userId = data.data.user_id;\r\n            const emoji = data.data.emoji;\r\n\r\n            console.log('Handling reaction_removed:', {\r\n              channelId,\r\n              messageId,\r\n              userId,\r\n              emoji\r\n            });\r\n            \r\n            // Get current state\r\n            const state = store.getState();\r\n            const message = state.messages.messagesByChannel[channelId]?.find(\r\n              m => m.id === messageId\r\n            );\r\n            console.log('Current message state:', message);\r\n            \r\n            store.dispatch(removeReaction({\r\n              channelId,\r\n              messageId,\r\n              userId,\r\n              emoji\r\n            }));\r\n            \r\n            // Get updated state\r\n            const updatedState = store.getState();\r\n            const updatedMessage = updatedState.messages.messagesByChannel[channelId]?.find(\r\n              m => m.id === messageId\r\n            );\r\n            console.log('Updated message state:', updatedMessage);\r\n          } else {\r\n            console.warn('Invalid reaction_removed data:', data);\r\n          }\r\n          break;\r\n\r\n        case 'pong':\r\n          // Handle pong response\r\n          break;\r\n\r\n        default:\r\n          console.warn('Unknown message type:', data.type);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling WebSocket message:', error);\r\n    }\r\n  }\r\n\r\n  public joinChannel(channelId: string) {\r\n    if (this.ws?.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify({\r\n        type: 'JOIN_CHANNEL',\r\n        channelId\r\n      }));\r\n      this.channels.add(channelId);\r\n    }\r\n  }\r\n\r\n  public leaveChannel(channelId: string) {\r\n    if (this.ws?.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify({\r\n        type: 'LEAVE_CHANNEL',\r\n        channelId\r\n      }));\r\n      this.channels.delete(channelId);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new WebSocketService(); "],"mappings":";AACA,SAASA,KAAK,QAAQ,aAAa;AACnC,SAASC,UAAU,EAAEC,aAAa,EAAEC,WAAW,EAAEC,cAAc,QAAQ,oCAAoC;AAC3G,SAASC,gBAAgB,QAAQ,4BAA4B;;AAE7D;AACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,wBAAwB;;AAE5E;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B;EACA,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,IAAIP,WAAW,CAACQ,UAAU,CAAC,KAAK,CAAC,EAAE;IAC1E,OAAOR,WAAW,CAACS,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;EAC3C;EACA,OAAOT,WAAW;AACpB,CAAC;AAwBD,OAAO,MAAMU,gBAAgB,CAAC;EAS5BC,WAAWA,CAAA,EAAG;IAAA,KAPNC,EAAE,GAAqB,IAAI;IAAA,KAC3BC,YAAY,GAA0B,IAAI;IAAA,KAC1CC,iBAAiB,GAAG,CAAC;IAAA,KACrBC,oBAAoB,GAAG,CAAC;IAAA,KACxBC,gBAAgB,GAA0B,IAAI;IAAA,KAC9CC,QAAQ,GAAgB,IAAIC,GAAG,CAAC,CAAC;IAGvC,IAAIR,gBAAgB,CAACS,QAAQ,EAAE;MAC7B,OAAOT,gBAAgB,CAACS,QAAQ;IAClC;IACAT,gBAAgB,CAACS,QAAQ,GAAG,IAAI;EAClC;EAEQC,YAAYA,CAAA,EAAkB;IAAA,IAAAC,WAAA;IACpC,MAAMC,KAAK,GAAG5B,KAAK,CAAC6B,QAAQ,CAAC,CAAC;IAC9B,OAAO,EAAAF,WAAA,GAAAC,KAAK,CAACE,IAAI,cAAAH,WAAA,uBAAVA,WAAA,CAAYI,KAAK,KAAI,IAAI;EAClC;EAEOC,OAAOA,CAAA,EAAG;IAAA,IAAAC,QAAA;IACf,IAAI,EAAAA,QAAA,OAAI,CAACf,EAAE,cAAAe,QAAA,uBAAPA,QAAA,CAASC,UAAU,MAAKC,SAAS,CAACC,IAAI,EAAE;IAE5C,MAAML,KAAK,GAAG,IAAI,CAACL,YAAY,CAAC,CAAC;IACjC,IAAI,CAACK,KAAK,EAAE;MACVM,OAAO,CAACC,IAAI,CAAC,wDAAwD,CAAC;MACtE;IACF;IAEA,MAAMC,KAAK,GAAG,GAAG7B,eAAe,CAAC,CAAC,UAAUqB,KAAK,EAAE;IACnDM,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAED,KAAK,CAAC;IAE9C,IAAI;MACF,IAAI,CAACrB,EAAE,GAAG,IAAIiB,SAAS,CAACI,KAAK,CAAC;MAE9B,IAAI,CAACrB,EAAE,CAACuB,MAAM,GAAG,MAAM;QACrBJ,OAAO,CAACG,GAAG,CAAC,kCAAkC,CAAC;QAC/C,IAAI,CAACpB,iBAAiB,GAAG,CAAC;QAC1B,IAAI,CAACsB,iBAAiB,CAAC,CAAC;;QAExB;QACA,IAAI,CAACnB,QAAQ,CAACoB,OAAO,CAACC,SAAS,IAAI;UACjC,IAAI,CAACC,WAAW,CAACD,SAAS,CAAC;QAC7B,CAAC,CAAC;MACJ,CAAC;MAED,IAAI,CAAC1B,EAAE,CAAC4B,SAAS,GAAG,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;MACjD,IAAI,CAAC9B,EAAE,CAAC+B,OAAO,GAAIC,KAAK,IAAK;QAC3Bb,OAAO,CAACG,GAAG,CAAC,mCAAmC,EAAEU,KAAK,CAACC,IAAI,CAAC;QAC5D,IAAI,CAACC,gBAAgB,CAAC,CAAC;QACvB,IAAI,CAACC,eAAe,CAAC,CAAC;MACxB,CAAC;MACD,IAAI,CAACnC,EAAE,CAACoC,OAAO,GAAIC,KAAK,IAAK;QAC3BlB,OAAO,CAACkB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdlB,OAAO,CAACkB,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF;EAEQF,eAAeA,CAAA,EAAG;IACxB,IAAI,IAAI,CAACjC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;MACtD,IAAI,CAACD,iBAAiB,EAAE;MACxBiB,OAAO,CAACG,GAAG,CAAC,4BAA4B,IAAI,CAACpB,iBAAiB,IAAI,IAAI,CAACC,oBAAoB,GAAG,CAAC;MAC/F,IAAI,CAACC,gBAAgB,GAAGkC,UAAU,CAAC,MAAM;QACvC,IAAI,CAACxB,OAAO,CAAC,CAAC;MAChB,CAAC,EAAE,IAAI,CAAC;IACV;EACF;EAEQU,iBAAiBA,CAAA,EAAG;IAC1B,IAAI,CAACvB,YAAY,GAAGsC,WAAW,CAAC,MAAM;MAAA,IAAAC,SAAA;MACpC,IAAI,EAAAA,SAAA,OAAI,CAACxC,EAAE,cAAAwC,SAAA,uBAAPA,SAAA,CAASxB,UAAU,MAAKC,SAAS,CAACC,IAAI,EAAE;QAC1C,IAAI,CAAClB,EAAE,CAACyC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC,CAAC,CAAC;MAChD;IACF,CAAC,EAAE,KAAK,CAAC;EACX;EAEQV,gBAAgBA,CAAA,EAAG;IACzB,IAAI,IAAI,CAACjC,YAAY,EAAE;MACrB4C,aAAa,CAAC,IAAI,CAAC5C,YAAY,CAAC;MAChC,IAAI,CAACA,YAAY,GAAG,IAAI;IAC1B;EACF;EAEO6C,UAAUA,CAAA,EAAG;IAClB,IAAI,IAAI,CAAC9C,EAAE,EAAE;MACX,IAAI,CAACA,EAAE,CAAC+C,KAAK,CAAC,CAAC;MACf,IAAI,CAAC/C,EAAE,GAAG,IAAI;IAChB;IACA,IAAI,IAAI,CAACI,gBAAgB,EAAE;MACzB4C,YAAY,CAAC,IAAI,CAAC5C,gBAAgB,CAAC;MACnC,IAAI,CAACA,gBAAgB,GAAG,IAAI;IAC9B;IACA,IAAI,CAAC8B,gBAAgB,CAAC,CAAC;EACzB;EAEQL,aAAaA,CAACG,KAAmB,EAAE;IAAA,IAAAiB,UAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA;IACzC,IAAI;MACF,MAAMC,IAAI,GAAGd,IAAI,CAACe,KAAK,CAACzB,KAAK,CAACwB,IAAI,CAAqB;MACvDrC,OAAO,CAACG,GAAG,CAAC,6BAA6B,EAAEkC,IAAI,CAAC;MAEhD,QAAQA,IAAI,CAACZ,IAAI;QACf,KAAK,aAAa;UAChB,IAAIY,IAAI,CAAC9B,SAAS,IAAI8B,IAAI,CAACE,OAAO,EAAE;YAClC,IAAIF,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACI,QAAQ,EAAE;cACjC9E,KAAK,CAAC+E,QAAQ,CAAC9E,UAAU,CAAC;gBACxB2C,SAAS,EAAE8B,IAAI,CAAC9B,SAAS;gBACzBgC,OAAO,EAAE;kBACP,GAAGF,IAAI,CAACE,OAAO;kBACfE,QAAQ,EAAEJ,IAAI,CAACI;gBACjB;cACF,CAAC,CAAC,CAAC;YACL,CAAC,MAAM;cACL9E,KAAK,CAAC+E,QAAQ,CAAC9E,UAAU,CAAC;gBACxB2C,SAAS,EAAE8B,IAAI,CAAC9B,SAAS;gBACzBgC,OAAO,EAAEF,IAAI,CAACE;cAChB,CAAC,CAAC,CAAC;YACL;UACF;UACA;QAEF,KAAK,gBAAgB;UACnB,IAAIF,IAAI,CAAC9B,SAAS,IAAI8B,IAAI,CAACM,EAAE,IAAIN,IAAI,CAACO,OAAO,EAAE;YAC7CjF,KAAK,CAAC+E,QAAQ,CAAC7E,aAAa,CAAC;cAC3B0C,SAAS,EAAE8B,IAAI,CAAC9B,SAAS;cACzBsC,SAAS,EAAER,IAAI,CAACM,EAAE;cAClBJ,OAAO,EAAEF,IAAI,CAACO;YAChB,CAAC,CAAC,CAAC;UACL;UACA;QAEF,KAAK,aAAa;UAChB,IAAIP,IAAI,CAACS,MAAM,IAAIT,IAAI,CAACU,MAAM,EAAE;YAC9BpF,KAAK,CAAC+E,QAAQ,CAAC1E,gBAAgB,CAAC;cAC9B8E,MAAM,EAAET,IAAI,CAACS,MAAM;cACnBC,MAAM,EAAEV,IAAI,CAACU;YACf,CAAC,CAAC,CAAC;UACL;UACA;QAEF,KAAK,gBAAgB;UACnB,IAAI,CAAAjB,UAAA,GAAAO,IAAI,CAACA,IAAI,cAAAP,UAAA,eAATA,UAAA,CAAWkB,UAAU,KAAAjB,WAAA,GAAIM,IAAI,CAACA,IAAI,cAAAN,WAAA,eAATA,WAAA,CAAWkB,UAAU,KAAAjB,WAAA,GAAIK,IAAI,CAACA,IAAI,cAAAL,WAAA,eAATA,WAAA,CAAWkB,QAAQ,EAAE;YAAA,IAAAC,qBAAA,EAAAC,qBAAA;YACzE,MAAM7C,SAAS,GAAG8B,IAAI,CAACA,IAAI,CAACW,UAAU,CAACK,QAAQ,CAAC,CAAC;YACjD,MAAMR,SAAS,GAAGR,IAAI,CAACA,IAAI,CAACY,UAAU;YACtC,MAAMC,QAAQ,GAAGb,IAAI,CAACA,IAAI,CAACa,QAAQ;YAEnClD,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAE;cACtCI,SAAS;cACTsC,SAAS;cACTK;YACF,CAAC,CAAC;;YAEF;YACA,MAAM3D,KAAK,GAAG5B,KAAK,CAAC6B,QAAQ,CAAC,CAAC;YAC9B,MAAM+C,OAAO,IAAAY,qBAAA,GAAG5D,KAAK,CAAC+D,QAAQ,CAACC,iBAAiB,CAAChD,SAAS,CAAC,cAAA4C,qBAAA,uBAA3CA,qBAAA,CAA6CK,IAAI,CAC/DC,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKE,SAChB,CAAC;YACD7C,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAEoC,OAAO,CAAC;YAE9C5E,KAAK,CAAC+E,QAAQ,CAAC5E,WAAW,CAAC;cACzByC,SAAS;cACTsC,SAAS;cACTK;YACF,CAAC,CAAC,CAAC;;YAEH;YACA,MAAMQ,YAAY,GAAG/F,KAAK,CAAC6B,QAAQ,CAAC,CAAC;YACrC,MAAMmE,cAAc,IAAAP,qBAAA,GAAGM,YAAY,CAACJ,QAAQ,CAACC,iBAAiB,CAAChD,SAAS,CAAC,cAAA6C,qBAAA,uBAAlDA,qBAAA,CAAoDI,IAAI,CAC7EC,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKE,SAChB,CAAC;YACD7C,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAEwD,cAAc,CAAC;UACvD,CAAC,MAAM;YACL3D,OAAO,CAACC,IAAI,CAAC,8BAA8B,EAAEoC,IAAI,CAAC;UACpD;UACA;QAEF,KAAK,kBAAkB;UACrB,IAAI,CAAAJ,WAAA,GAAAI,IAAI,CAACA,IAAI,cAAAJ,WAAA,eAATA,WAAA,CAAWe,UAAU,KAAAd,WAAA,GAAIG,IAAI,CAACA,IAAI,cAAAH,WAAA,eAATA,WAAA,CAAWe,UAAU,KAAAd,WAAA,GAAIE,IAAI,CAACA,IAAI,cAAAF,WAAA,eAATA,WAAA,CAAWyB,OAAO,KAAAxB,WAAA,GAAIC,IAAI,CAACA,IAAI,cAAAD,WAAA,eAATA,WAAA,CAAWyB,KAAK,EAAE;YAAA,IAAAC,sBAAA,EAAAC,sBAAA;YAC5F,MAAMxD,SAAS,GAAG8B,IAAI,CAACA,IAAI,CAACW,UAAU,CAACK,QAAQ,CAAC,CAAC;YACjD,MAAMR,SAAS,GAAGR,IAAI,CAACA,IAAI,CAACY,UAAU;YACtC,MAAMH,MAAM,GAAGT,IAAI,CAACA,IAAI,CAACuB,OAAO;YAChC,MAAMC,KAAK,GAAGxB,IAAI,CAACA,IAAI,CAACwB,KAAK;YAE7B7D,OAAO,CAACG,GAAG,CAAC,4BAA4B,EAAE;cACxCI,SAAS;cACTsC,SAAS;cACTC,MAAM;cACNe;YACF,CAAC,CAAC;;YAEF;YACA,MAAMtE,KAAK,GAAG5B,KAAK,CAAC6B,QAAQ,CAAC,CAAC;YAC9B,MAAM+C,OAAO,IAAAuB,sBAAA,GAAGvE,KAAK,CAAC+D,QAAQ,CAACC,iBAAiB,CAAChD,SAAS,CAAC,cAAAuD,sBAAA,uBAA3CA,sBAAA,CAA6CN,IAAI,CAC/DC,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKE,SAChB,CAAC;YACD7C,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAEoC,OAAO,CAAC;YAE9C5E,KAAK,CAAC+E,QAAQ,CAAC3E,cAAc,CAAC;cAC5BwC,SAAS;cACTsC,SAAS;cACTC,MAAM;cACNe;YACF,CAAC,CAAC,CAAC;;YAEH;YACA,MAAMH,YAAY,GAAG/F,KAAK,CAAC6B,QAAQ,CAAC,CAAC;YACrC,MAAMmE,cAAc,IAAAI,sBAAA,GAAGL,YAAY,CAACJ,QAAQ,CAACC,iBAAiB,CAAChD,SAAS,CAAC,cAAAwD,sBAAA,uBAAlDA,sBAAA,CAAoDP,IAAI,CAC7EC,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKE,SAChB,CAAC;YACD7C,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAEwD,cAAc,CAAC;UACvD,CAAC,MAAM;YACL3D,OAAO,CAACC,IAAI,CAAC,gCAAgC,EAAEoC,IAAI,CAAC;UACtD;UACA;QAEF,KAAK,MAAM;UACT;UACA;QAEF;UACErC,OAAO,CAACC,IAAI,CAAC,uBAAuB,EAAEoC,IAAI,CAACZ,IAAI,CAAC;MACpD;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdlB,OAAO,CAACkB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF;EAEOV,WAAWA,CAACD,SAAiB,EAAE;IAAA,IAAAyD,SAAA;IACpC,IAAI,EAAAA,SAAA,OAAI,CAACnF,EAAE,cAAAmF,SAAA,uBAAPA,SAAA,CAASnE,UAAU,MAAKC,SAAS,CAACC,IAAI,EAAE;MAC1C,IAAI,CAAClB,EAAE,CAACyC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QAC1BC,IAAI,EAAE,cAAc;QACpBlB;MACF,CAAC,CAAC,CAAC;MACH,IAAI,CAACrB,QAAQ,CAAC+E,GAAG,CAAC1D,SAAS,CAAC;IAC9B;EACF;EAEO2D,YAAYA,CAAC3D,SAAiB,EAAE;IAAA,IAAA4D,SAAA;IACrC,IAAI,EAAAA,SAAA,OAAI,CAACtF,EAAE,cAAAsF,SAAA,uBAAPA,SAAA,CAAStE,UAAU,MAAKC,SAAS,CAACC,IAAI,EAAE;MAC1C,IAAI,CAAClB,EAAE,CAACyC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QAC1BC,IAAI,EAAE,eAAe;QACrBlB;MACF,CAAC,CAAC,CAAC;MACH,IAAI,CAACrB,QAAQ,CAACkF,MAAM,CAAC7D,SAAS,CAAC;IACjC;EACF;AACF;AAAC8D,iBAAA,GAxPY1F,gBAAgB;AAAhBA,gBAAgB,CACZS,QAAQ,GAA4B,IAAI;AAyPzD,eAAe,IAAIT,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}