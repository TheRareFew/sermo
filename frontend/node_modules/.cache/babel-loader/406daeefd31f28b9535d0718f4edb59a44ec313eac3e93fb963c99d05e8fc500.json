{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, addMessage, setMessages, setUsers, updateUserStatus } from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  font-family: 'Courier New', monospace;\n`;\n_c7 = ChatMessages;\nconst ChatInput = styled.div`\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c8 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c9 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c10 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c11 = CreateChannelButton;\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = NoChannelMessage;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const channels = useSelector(state => state.chat.channels);\n  const messages = useSelector(state => state.chat.messages[activeChannelId] || []);\n  const users = useSelector(state => state.chat.users);\n  useEffect(() => {\n    // Initial data fetch\n    const fetchInitialData = async () => {\n      try {\n        const channelsData = await getChannels();\n        dispatch(setChannels(channelsData));\n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          dispatch(setActiveChannel(firstChannelId));\n          const [messagesData, usersData] = await Promise.all([getChannelMessages(firstChannelId), getChannelUsers(firstChannelId)]);\n          dispatch(setMessages({\n            channelId: firstChannelId,\n            messages: messagesData\n          }));\n          dispatch(setUsers(usersData));\n          wsService.joinChannel(firstChannelId);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    wsService.connect();\n    fetchInitialData();\n\n    // WebSocket event handlers\n    const messageHandler = data => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id && data.created_at) {\n        const message = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at,\n          is_system: data.is_system\n        };\n        dispatch(addMessage(message));\n      }\n    };\n    const presenceHandler = data => {\n      if (data.type === 'presence_update' && data.user_id && data.status) {\n        dispatch(updateUserStatus({\n          userId: data.user_id,\n          status: data.status\n        }));\n      }\n    };\n    wsService.onMessage(messageHandler);\n    wsService.onPresence(presenceHandler);\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    // Scroll to bottom when messages change\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleChannelClick = async channelId => {\n    if (channelId === activeChannelId) return;\n    dispatch(setActiveChannel(channelId));\n    try {\n      const [messagesData, usersData] = await Promise.all([getChannelMessages(channelId), getChannelUsers(channelId)]);\n      dispatch(setMessages({\n        channelId,\n        messages: messagesData\n      }));\n      dispatch(setUsers(usersData));\n      wsService.joinChannel(channelId);\n    } catch (error) {\n      console.error('Failed to fetch channel data:', error);\n    }\n  };\n  const handleLogout = () => {\n    wsService.disconnect();\n    dispatch(logout());\n  };\n  const activeChannel = channels.find(c => c.id === activeChannelId);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n          name: channel.name,\n          isActive: channel.id === activeChannelId,\n          hasUnread: false // TODO: Implement unread tracking\n          ,\n          isDirect: channel.is_direct_message,\n          onClick: () => handleChannelClick(channel.id)\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        children: !activeChannel ? /*#__PURE__*/_jsxDEV(NoChannelMessage, {\n          children: channels.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Welcome to SERMO! Click the \\\"+New\\\" button above to create your first channel.\"\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Select a channel from the sidebar to start chatting.\"\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [messages.map(msg => {\n            var _users$msg$sender_id;\n            return /*#__PURE__*/_jsxDEV(ChatMessage, {\n              content: msg.content,\n              sender: ((_users$msg$sender_id = users[msg.sender_id]) === null || _users$msg$sender_id === void 0 ? void 0 : _users$msg$sender_id.username) || 'Unknown',\n              timestamp: msg.created_at,\n              isSystem: msg.is_system\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: activeChannel && /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannel.id,\n          wsService: wsService\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"/hFAT+P0Yqhom0rFH5cKfQqLHuA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c13 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatMessages\");\n$RefreshReg$(_c8, \"ChatInput\");\n$RefreshReg$(_c9, \"LogoutButton\");\n$RefreshReg$(_c10, \"ChannelHeader\");\n$RefreshReg$(_c11, \"CreateChannelButton\");\n$RefreshReg$(_c12, \"NoChannelMessage\");\n$RefreshReg$(_c13, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","addMessage","setMessages","setUsers","updateUserStatus","Button","ChatMessage","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","wsService","getChannels","getChannelMessages","getChannelUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatMessages","_c7","ChatInput","_c8","LogoutButton","button","error","_c9","ChannelHeader","_c10","CreateChannelButton","_c11","NoChannelMessage","secondary","_c12","MainLayout","_s","dispatch","messagesEndRef","isCreateModalOpen","setIsCreateModalOpen","activeChannelId","state","chat","channels","messages","users","fetchInitialData","channelsData","length","firstChannelId","id","messagesData","usersData","Promise","all","channelId","joinChannel","console","connect","messageHandler","data","type","content","sender_id","channel_id","created_at","message","is_system","presenceHandler","user_id","status","userId","onMessage","onPresence","disconnect","_messagesEndRef$curre","current","scrollIntoView","behavior","handleChannelClick","handleLogout","activeChannel","find","c","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","map","channel","name","isActive","hasUnread","isDirect","is_direct_message","Object","values","user","username","msg","_users$msg$sender_id","sender","timestamp","isSystem","ref","isOpen","onClose","_c13","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  addMessage,\n  setMessages,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { Message, WebSocketMessage } from '../../../types';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChatInput = styled.div`\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  \n  const activeChannelId = useSelector((state: any) => state.chat.activeChannelId);\n  const channels = useSelector((state: any) => state.chat.channels);\n  const messages = useSelector((state: any) => state.chat.messages[activeChannelId] || []);\n  const users = useSelector((state: any) => state.chat.users);\n\n  useEffect(() => {\n    // Initial data fetch\n    const fetchInitialData = async () => {\n      try {\n        const channelsData = await getChannels();\n        dispatch(setChannels(channelsData));\n        \n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          dispatch(setActiveChannel(firstChannelId));\n          \n          const [messagesData, usersData] = await Promise.all([\n            getChannelMessages(firstChannelId),\n            getChannelUsers(firstChannelId)\n          ]);\n          \n          dispatch(setMessages({ channelId: firstChannelId, messages: messagesData }));\n          dispatch(setUsers(usersData));\n          wsService.joinChannel(firstChannelId);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    wsService.connect();\n    fetchInitialData();\n\n    // WebSocket event handlers\n    const messageHandler = (data: WebSocketMessage) => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && \n          data.channel_id && data.created_at) {\n        const message: Message = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at,\n          is_system: data.is_system\n        };\n        dispatch(addMessage(message));\n      }\n    };\n\n    const presenceHandler = (data: WebSocketMessage) => {\n      if (data.type === 'presence_update' && data.user_id && data.status) {\n        dispatch(updateUserStatus({\n          userId: data.user_id,\n          status: data.status\n        }));\n      }\n    };\n\n    wsService.onMessage(messageHandler);\n    wsService.onPresence(presenceHandler);\n\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    // Scroll to bottom when messages change\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleChannelClick = async (channelId: number) => {\n    if (channelId === activeChannelId) return;\n    \n    dispatch(setActiveChannel(channelId));\n    try {\n      const [messagesData, usersData] = await Promise.all([\n        getChannelMessages(channelId),\n        getChannelUsers(channelId)\n      ]);\n      dispatch(setMessages({ channelId, messages: messagesData }));\n      dispatch(setUsers(usersData));\n      wsService.joinChannel(channelId);\n    } catch (error) {\n      console.error('Failed to fetch channel data:', error);\n    }\n  };\n\n  const handleLogout = () => {\n    wsService.disconnect();\n    dispatch(logout());\n  };\n\n  const activeChannel = channels.find((c: any) => c.id === activeChannelId);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n          {channels.map((channel: any) => (\n            <ChannelListItem\n              key={channel.id}\n              name={channel.name}\n              isActive={channel.id === activeChannelId}\n              hasUnread={false} // TODO: Implement unread tracking\n              isDirect={channel.is_direct_message}\n              onClick={() => handleChannelClick(channel.id)}\n            />\n          ))}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: any) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'}</h1>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </ChatHeader>\n        <ChatMessages>\n          {!activeChannel ? (\n            <NoChannelMessage>\n              {channels.length === 0 ? (\n                <>\n                  Welcome to SERMO! Click the \"+New\" button above to create your first channel.\n                </>\n              ) : (\n                <>\n                  Select a channel from the sidebar to start chatting.\n                </>\n              )}\n            </NoChannelMessage>\n          ) : (\n            <>\n              {messages.map((msg: any) => (\n                <ChatMessage\n                  key={msg.id}\n                  content={msg.content}\n                  sender={users[msg.sender_id]?.username || 'Unknown'}\n                  timestamp={msg.created_at}\n                  isSystem={msg.is_system}\n                />\n              ))}\n              <div ref={messagesEndRef} />\n            </>\n          )}\n        </ChatMessages>\n        <ChatInput>\n          {activeChannel && (\n            <MessageInput\n              channelId={activeChannel.id}\n              wsService={wsService}\n            />\n          )}\n        </ChatInput>\n      </ChatArea>\n      <CreateChannelModal\n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n      />\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}