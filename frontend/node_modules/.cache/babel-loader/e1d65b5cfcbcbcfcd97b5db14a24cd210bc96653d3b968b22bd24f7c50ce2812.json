{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies, updateMessage } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { toast } from 'react-toastify';\nimport wsService from '../../../services/websocket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef(null);\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef(null);\n  const loadedRepliesRef = useRef(new Set());\n  const {\n    currentUser,\n    users,\n    activeChannelId\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users,\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n\n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => msg.replyCount > 0 && !msg.repliesLoaded && !msg.parentId && !loadedRepliesRef.current.has(msg.id));\n      if (messagesToLoadReplies.length === 0) return;\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => msg.id === message.id ? {\n              ...msg,\n              repliesLoaded: true,\n              replies: transformedReplies,\n              isExpanded: msg.isExpanded || false\n            } : msg)\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = messages => {\n    const mainMessages = [];\n    const repliesByParentId = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n    return mainMessages;\n  };\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const {\n        position,\n        height\n      } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n\n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n\n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n  const handleDeleteMessage = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: activeChannelId,\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleToggleReplies = async messageId => {\n    if (!activeChannelId) return;\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => msg.id === messageId ? {\n            ...msg,\n            repliesLoaded: true,\n            replies: transformedReplies,\n            isExpanded: true // Auto-expand after loading replies\n          } : msg)\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({\n      channelId: activeChannelId,\n      messageId\n    }));\n  };\n  const handleReply = messageId => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n  const handleSendReply = async content => {\n    if (!replyToMessage || !activeChannelId) return;\n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n\n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => msg.id === replyToMessage.id ? {\n          ...msg,\n          replyCount: (msg.replyCount || 0) + 1,\n          isExpanded: true,\n          repliesLoaded: true,\n          replies: [...(msg.replies || []), transformedReply]\n        } : msg)\n      }));\n\n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n\n  // Add WebSocket message handler\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const handleWebSocketMessage = message => {\n      console.log('[DEBUG] MessageList received WebSocket message:', message);\n      console.log('[DEBUG] Active channel ID:', activeChannelId);\n\n      // Check if message is from another channel\n      if ('message' in message && message.message && typeof message.message === 'object') {\n        var _message$message$chan;\n        const messageChannelId = (_message$message$chan = message.message.channel_id) === null || _message$message$chan === void 0 ? void 0 : _message$message$chan.toString();\n        console.log('[DEBUG] Message channel ID:', messageChannelId);\n        if (messageChannelId && (message.type === 'message' || message.type === 'message_sent' || message.type === 'new_message' || message.type === 'message_updated') && messageChannelId !== activeChannelId) {\n          console.log('[DEBUG] Ignoring message from different channel');\n          return; // Ignore messages from other channels\n        }\n      }\n      console.log('[DEBUG] Processing message for current channel:', message.type);\n      switch (message.type) {\n        case 'message':\n        case 'message_sent':\n        case 'new_message':\n          if ('message' in message && message.message && typeof message.message === 'object') {\n            console.log('[DEBUG] Message data before transform:', message.message);\n            const transformedMessage = transformMessage(message.message);\n            console.log('[DEBUG] Transformed message:', transformedMessage);\n\n            // Optimistically add message to state\n            dispatch(addMessage({\n              channelId: activeChannelId,\n              message: transformedMessage\n            }));\n            console.log('[DEBUG] Dispatched addMessage action');\n\n            // Check if we should scroll\n            if (containerRef.current) {\n              const container = containerRef.current;\n              const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n\n              // If we're near the bottom, scroll immediately\n              if (isAtBottom) {\n                requestAnimationFrame(() => {\n                  container.scrollTop = container.scrollHeight;\n                });\n              }\n            }\n          } else {\n            console.log('[DEBUG] Message or message.message is undefined:', message);\n          }\n          break;\n        case 'new_reply':\n          if (message.parentId) {\n            console.log('Adding new reply:', message);\n            const transformedReply = transformMessage(message.message);\n\n            // Optimistically add reply\n            dispatch(setReplies({\n              channelId: activeChannelId,\n              messageId: message.parentId.toString(),\n              replies: [transformedReply]\n            }));\n\n            // Expand the parent message if it exists\n            const parentMessage = messages.find(m => m.id === message.parentId);\n            if (parentMessage && !parentMessage.isExpanded) {\n              dispatch(toggleExpanded({\n                channelId: activeChannelId,\n                messageId: message.parentId.toString()\n              }));\n            }\n          }\n          break;\n        case 'message_deleted':\n          dispatch(deleteMessage({\n            channelId: message.channelId,\n            messageId: message.messageId\n          }));\n          break;\n        case 'message_updated':\n          if ('message' in message && message.message) {\n            // Add type check and null check\n            const transformedUpdatedMessage = transformMessage(message.message);\n            dispatch(updateMessage({\n              channelId: transformedUpdatedMessage.channelId,\n              id: transformedUpdatedMessage.id,\n              message: transformedUpdatedMessage\n            }));\n          }\n          break;\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [activeChannelId, messages, dispatch, transformMessage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      onScroll: handleScroll,\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: sortedMessages.map(message => {\n          var _users$message$userId;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(MessageWrapper, {\n              $isSelected: message.id === selectedMessageId,\n              ref: message.id === selectedMessageId ? selectedMessageRef : undefined,\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                content: message.content,\n                sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n                timestamp: message.createdAt,\n                userId: message.userId,\n                currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n                onDelete: () => handleDeleteMessage(message.id),\n                replyCount: message.replyCount,\n                isExpanded: message.isExpanded || false,\n                onToggleReplies: () => handleToggleReplies(message.id),\n                onReply: () => handleReply(message.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this), message.isExpanded && message.replyCount > 0 && /*#__PURE__*/_jsxDEV(MessageReplies, {\n              parentId: message.id,\n              replies: message.replies || [],\n              isExpanded: message.isExpanded,\n              onToggleReplies: handleToggleReplies,\n              onDelete: handleDeleteMessage,\n              currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 17\n            }, this)]\n          }, message.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this), replyToMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: true,\n      onClose: () => setReplyToMessage(null),\n      onSubmit: handleSendReply,\n      parentMessage: replyToMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"TOUKqk+X1y8hao2VbqOBQfndXcA=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"TOUKqk+X1y8hao2VbqOBQfndXcA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","useMemo","styled","useSelector","useDispatch","transformMessage","Message","MessageReplies","ReplyModal","deleteMessage","toggleExpanded","prependMessages","addMessage","setMessages","setReplies","updateMessage","deleteMessageApi","getChannelMessages","createReply","getReplies","toast","wsService","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","messages","selectedMessageId","dispatch","selectedMessageRef","containerRef","isLoadingMore","setIsLoadingMore","hasMore","setHasMore","page","setPage","replyToMessage","setReplyToMessage","PAGE_SIZE","scrollLockRef","loadedRepliesRef","Set","currentUser","users","activeChannelId","state","auth","user","chat","sortedMessages","mainMessages","filter","msg","parentId","sort","a","b","timeA","Date","createdAt","getTime","timeB","current","loadRepliesForMessages","messagesToLoadReplies","replyCount","repliesLoaded","has","id","length","message","add","replies","transformedReplies","map","channelId","isExpanded","error","console","delete","clear","organizeMessagesAndReplies","repliesByParentId","forEach","push","loadMoreMessages","log","container","position","scrollTop","height","scrollHeight","olderMessages","transformedMessages","organizedMessages","p","newPosition","handleScroll","event","currentTarget","scrollIntoView","behavior","block","handleDeleteMessage","messageId","handleToggleReplies","find","m","handleReply","handleSendReply","content","reply","transformedReply","success","handleWebSocketMessage","_message$message$chan","messageChannelId","channel_id","toString","type","transformedMessage","isAtBottom","clientHeight","requestAnimationFrame","parentMessage","transformedUpdatedMessage","unsubscribe","onMessage","children","onScroll","fileName","_jsxFileName","lineNumber","columnNumber","_users$message$userId","undefined","sender","userId","username","timestamp","currentUserId","onDelete","onToggleReplies","onReply","isOpen","onClose","onSubmit","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User, Message as ApiMessage, WebSocketMessage, WebSocketChannelMessage } from '../../../types';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies, updateMessage } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { toast } from 'react-toastify';\nimport wsService from '../../../services/websocket';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState<StoreMessage | null>(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef<{ position: number; height: number } | null>(null);\n  const loadedRepliesRef = useRef<Set<string>>(new Set());\n\n  const { currentUser, users, activeChannelId } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User },\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    \n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n      \n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => \n        msg.replyCount > 0 && \n        !msg.repliesLoaded && \n        !msg.parentId && \n        !loadedRepliesRef.current.has(msg.id)\n      );\n\n      if (messagesToLoadReplies.length === 0) return;\n\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          \n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => \n              msg.id === message.id \n                ? { \n                    ...msg, \n                    repliesLoaded: true,\n                    replies: transformedReplies,\n                    isExpanded: msg.isExpanded || false\n                  } \n                : msg\n            )\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = (messages: StoreMessage[]) => {\n    const mainMessages: StoreMessage[] = [];\n    const repliesByParentId: { [key: string]: StoreMessage[] } = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n\n    return mainMessages;\n  };\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      \n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({ \n          channelId: activeChannelId, \n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const { position, height } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      \n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n      \n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n\n  const handleDeleteMessage = async (messageId: string) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: activeChannelId, messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleToggleReplies = async (messageId: string) => {\n    if (!activeChannelId) return;\n\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        \n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => \n            msg.id === messageId \n              ? {\n                  ...msg,\n                  repliesLoaded: true,\n                  replies: transformedReplies,\n                  isExpanded: true // Auto-expand after loading replies\n                }\n              : msg\n          )\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({ channelId: activeChannelId, messageId }));\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!replyToMessage || !activeChannelId) return;\n    \n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      \n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => \n          msg.id === replyToMessage.id \n            ? {\n                ...msg,\n                replyCount: (msg.replyCount || 0) + 1,\n                isExpanded: true,\n                repliesLoaded: true,\n                replies: [...(msg.replies || []), transformedReply]\n              }\n            : msg\n        )\n      }));\n      \n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n\n  // Add WebSocket message handler\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('[DEBUG] MessageList received WebSocket message:', message);\n      console.log('[DEBUG] Active channel ID:', activeChannelId);\n      \n      // Check if message is from another channel\n      if ('message' in message && message.message && typeof message.message === 'object') {\n        const messageChannelId = message.message.channel_id?.toString();\n        console.log('[DEBUG] Message channel ID:', messageChannelId);\n        \n        if (messageChannelId && (message.type === 'message' || message.type === 'message_sent' || \n             message.type === 'new_message' || message.type === 'message_updated') && \n            messageChannelId !== activeChannelId) {\n          console.log('[DEBUG] Ignoring message from different channel');\n          return; // Ignore messages from other channels\n        }\n      }\n\n      console.log('[DEBUG] Processing message for current channel:', message.type);\n\n      switch (message.type) {\n        case 'message':\n        case 'message_sent':\n        case 'new_message':\n          if ('message' in message && message.message && typeof message.message === 'object') {\n            console.log('[DEBUG] Message data before transform:', message.message);\n            const transformedMessage = transformMessage(message.message);\n            console.log('[DEBUG] Transformed message:', transformedMessage);\n            \n            // Optimistically add message to state\n            dispatch(addMessage({\n              channelId: activeChannelId,\n              message: transformedMessage\n            }));\n            console.log('[DEBUG] Dispatched addMessage action');\n            \n            // Check if we should scroll\n            if (containerRef.current) {\n              const container = containerRef.current;\n              const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n              \n              // If we're near the bottom, scroll immediately\n              if (isAtBottom) {\n                requestAnimationFrame(() => {\n                  container.scrollTop = container.scrollHeight;\n                });\n              }\n            }\n          } else {\n            console.log('[DEBUG] Message or message.message is undefined:', message);\n          }\n          break;\n\n        case 'new_reply':\n          if (message.parentId) {\n            console.log('Adding new reply:', message);\n            const transformedReply = transformMessage(message.message);\n            \n            // Optimistically add reply\n            dispatch(setReplies({\n              channelId: activeChannelId,\n              messageId: message.parentId.toString(),\n              replies: [transformedReply]\n            }));\n\n            // Expand the parent message if it exists\n            const parentMessage = messages.find(m => m.id === message.parentId);\n            if (parentMessage && !parentMessage.isExpanded) {\n              dispatch(toggleExpanded({\n                channelId: activeChannelId,\n                messageId: message.parentId.toString()\n              }));\n            }\n          }\n          break;\n\n        case 'message_deleted':\n          dispatch(deleteMessage({\n            channelId: message.channelId,\n            messageId: message.messageId\n          }));\n          break;\n\n        case 'message_updated':\n          if ('message' in message && message.message) {  // Add type check and null check\n            const transformedUpdatedMessage = transformMessage(message.message);\n            dispatch(updateMessage({\n              channelId: transformedUpdatedMessage.channelId,\n              id: transformedUpdatedMessage.id,\n              message: transformedUpdatedMessage\n            }));\n          }\n          break;\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [activeChannelId, messages, dispatch, transformMessage]);\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef} onScroll={handleScroll}>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        <MessagesWrapper>\n          {sortedMessages.map(message => (\n            <React.Fragment key={message.id}>\n              <MessageWrapper\n                $isSelected={message.id === selectedMessageId}\n                ref={message.id === selectedMessageId ? selectedMessageRef : undefined}\n              >\n                <Message\n                  content={message.content}\n                  sender={users[message.userId]?.username || message.userId}\n                  timestamp={message.createdAt}\n                  userId={message.userId}\n                  currentUserId={currentUser?.id}\n                  onDelete={() => handleDeleteMessage(message.id)}\n                  replyCount={message.replyCount}\n                  isExpanded={message.isExpanded || false}\n                  onToggleReplies={() => handleToggleReplies(message.id)}\n                  onReply={() => handleReply(message.id)}\n                />\n              </MessageWrapper>\n              {message.isExpanded && message.replyCount > 0 && (\n                <MessageReplies \n                  parentId={message.id}\n                  replies={message.replies || []}\n                  isExpanded={message.isExpanded}\n                  onToggleReplies={handleToggleReplies}\n                  onDelete={handleDeleteMessage}\n                  currentUserId={currentUser?.id}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      \n      {replyToMessage && (\n        <ReplyModal\n          isOpen={true}\n          onClose={() => setReplyToMessage(null)}\n          onSubmit={handleSendReply}\n          parentMessage={replyToMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}