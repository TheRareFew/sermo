{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { prependMessages, addMessage, toggleReplies } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { addReaction, removeReaction } from '../../../services/api/reactions';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  var _messages, _messages$, _messages$3;\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete,\n    channelId\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const lastMessageRef = useRef(((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.id) || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef(((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  const [selectedMessage, setSelectedMessage] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Add logging to debug user state\n  useEffect(() => {\n    console.log('Current user state:', currentUser);\n    console.log('Users state:', users);\n  }, [currentUser, users]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    var _messages$2;\n    if (!containerRef.current) return;\n    const newChannelId = (_messages$2 = messages[0]) === null || _messages$2 === void 0 ? void 0 : _messages$2.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      var _messages2;\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = (_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n    isInitialRender.current = false;\n  }, [(_messages$3 = messages[0]) === null || _messages$3 === void 0 ? void 0 : _messages$3.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage === null || oldFirstMessage === void 0 ? void 0 : oldFirstMessage.getBoundingClientRect().top;\n      const olderMessages = await getChannelMessages(channelId, 50,\n      // limit\n      messages.length // skip\n      );\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n\n        // Load replies for messages that have replyCount > 0\n        const messagesWithReplies = await Promise.all(transformedMessages.map(async message => {\n          if (message.replyCount && message.replyCount > 0) {\n            console.log('Loading replies for older message:', message.id);\n            try {\n              const replies = await getReplies(message.id);\n              return {\n                ...message,\n                replies: replies.map(transformMessage),\n                repliesLoaded: true\n              };\n            } catch (error) {\n              console.error('Failed to load replies for older message:', message.id, error);\n              return message;\n            }\n          }\n          return message;\n        }));\n        dispatch(prependMessages({\n          channelId,\n          messages: messagesWithReplies\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n\n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n\n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    var _messages3, _messages4, _messages5;\n    if (!containerRef.current || isInitialRender.current) return;\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = ((_messages3 = messages[messages.length - 1]) === null || _messages3 === void 0 ? void 0 : _messages3.id) !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && ((_messages4 = messages[messages.length - 1]) === null || _messages4 === void 0 ? void 0 : _messages4.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    }\n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || isNewMessage && isAtBottom) {\n      container.scrollTop = container.scrollHeight;\n    }\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = (_messages5 = messages[messages.length - 1]) === null || _messages5 === void 0 ? void 0 : _messages5.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n\n  // Load initial messages only when channelId changes\n  useEffect(() => {\n    const loadMessages = async () => {\n      if (!channelId) return;\n      try {\n        console.log('Loading messages for channel:', channelId);\n        const fetchedMessages = await getChannelMessages(channelId);\n        const transformedMessages = fetchedMessages.map(transformMessage);\n\n        // Load replies for messages that have replyCount > 0\n        const messagesWithReplies = await Promise.all(transformedMessages.map(async message => {\n          if (message.replyCount && message.replyCount > 0) {\n            console.log('Loading replies for message:', message.id);\n            try {\n              const replies = await getReplies(message.id);\n              return {\n                ...message,\n                replies: replies.map(transformMessage),\n                repliesLoaded: true\n              };\n            } catch (error) {\n              console.error('Failed to load replies for message:', message.id, error);\n              return message;\n            }\n          }\n          return message;\n        }));\n        dispatch(prependMessages({\n          channelId,\n          messages: messagesWithReplies\n        }));\n      } catch (error) {\n        console.error('Failed to load messages:', error);\n      }\n    };\n    loadMessages();\n  }, [channelId, dispatch]);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = messageId => {\n    if (!channelId) return;\n    console.log('Toggling replies for message:', messageId);\n    console.log('Current message state:', messages.find(msg => msg.id === messageId));\n    dispatch(toggleReplies({\n      channelId,\n      messageId\n    }));\n\n    // Log state after dispatch\n    setTimeout(() => {\n      console.log('Message state after toggle:', messages.find(msg => msg.id === messageId));\n    }, 0);\n  };\n  const handleReply = messageId => {\n    const message = messages.find(msg => msg.id === messageId);\n    if (message) {\n      setSelectedMessage(message);\n      setReplyModalOpen(true);\n    }\n  };\n  const handleReplySubmit = async content => {\n    if (selectedMessage && channelId) {\n      try {\n        const reply = await createReply(selectedMessage.id, content);\n        const transformedReply = transformMessage(reply);\n        dispatch(addMessage({\n          channelId,\n          message: {\n            ...transformedReply,\n            parentId: selectedMessage.id,\n            attachments: []\n          }\n        }));\n\n        // Close the modal\n        setReplyModalOpen(false);\n        setSelectedMessage(null);\n      } catch (error) {\n        console.error('Error creating reply:', error);\n      }\n    }\n  };\n  const handleReactionAdd = async (messageId, emoji) => {\n    try {\n      console.log('Adding reaction to message:', messageId, emoji);\n      await addReaction(messageId, emoji);\n      console.log('Reaction added successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to add reaction:', error);\n      dispatch(setError('Failed to add reaction'));\n    }\n  };\n  const handleReactionRemove = async (messageId, emoji) => {\n    try {\n      console.log('Removing reaction from message:', messageId, emoji);\n      await removeReaction(messageId, emoji);\n      console.log('Reaction removed successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to remove reaction:', error);\n      dispatch(setError('Failed to remove reaction'));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }, this), [...messages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n      // Only render main messages (non-replies) in the main list\n      .filter(message => !message.parentId).map(message => {\n        var _users$message$userId, _currentUser$id, _currentUser$id2;\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          $isSelected: message.id === selectedMessageId,\n          \"data-message-id\": message.id,\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            id: message.id,\n            content: message.content,\n            sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n            timestamp: message.createdAt,\n            userId: message.userId,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$id = currentUser.id) === null || _currentUser$id === void 0 ? void 0 : _currentUser$id.toString(),\n            onDelete: () => handleDeleteMessage(message.id),\n            replyCount: message.replyCount || 0,\n            isExpanded: message.isExpanded || false,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onReply: () => handleReply(message.id),\n            isReply: false,\n            reactions: message.reactions || [],\n            onReactionAdd: emoji => handleReactionAdd(message.id, emoji),\n            onReactionRemove: emoji => handleReactionRemove(message.id, emoji)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), message.isExpanded && /*#__PURE__*/_jsxDEV(MessageReplies, {\n            parentId: message.id,\n            replies: message.replies || [],\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$id2 = currentUser.id) === null || _currentUser$id2 === void 0 ? void 0 : _currentUser$id2.toString(),\n            isExpanded: message.isExpanded,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onDelete: handleDeleteMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), selectedMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: replyModalOpen,\n      onClose: () => setReplyModalOpen(false),\n      onSubmit: handleReplySubmit,\n      parentMessage: selectedMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n}, \"UwaD+sXdPU3bs9HM5za9RuNUhIo=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"UwaD+sXdPU3bs9HM5za9RuNUhIo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","styled","useSelector","useDispatch","Message","MessageReplies","ReplyModal","getChannelMessages","createReply","getReplies","prependMessages","addMessage","toggleReplies","transformMessage","addReaction","removeReaction","setError","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","_messages","_messages$","_messages$3","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","channelId","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","lastMessageRef","length","id","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","isUserScrolling","currentChannelRef","isInitialRender","isLoadingMore","setIsLoadingMore","replyModalOpen","setReplyModalOpen","selectedMessage","setSelectedMessage","dispatch","currentUser","users","state","auth","user","chat","console","log","current","clearTimeout","_messages$2","newChannelId","channelChanged","_messages2","requestAnimationFrame","scrollTop","scrollHeight","setTimeout","loadOlderMessages","container","oldScrollHeight","oldFirstMessage","querySelector","oldFirstMessageTop","getBoundingClientRect","top","olderMessages","transformedMessages","map","messagesWithReplies","Promise","all","message","replyCount","replies","repliesLoaded","error","newScrollHeight","heightDifference","newFirstMessageTop","topDifference","scrollTimeout","handleScroll","addEventListener","removeEventListener","_messages3","_messages4","_messages5","isAtBottom","clientHeight","hasNewMessages","isNewMessage","isOwnMessage","userId","messageElement","scrollIntoView","behavior","block","classList","add","remove","loadMessages","fetchedMessages","handleDeleteMessage","messageId","handleToggleReplies","find","msg","handleReply","handleReplySubmit","content","reply","transformedReply","parentId","attachments","handleReactionAdd","emoji","handleReactionRemove","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","Date","createdAt","getTime","filter","_users$message$userId","_currentUser$id","_currentUser$id2","sender","username","timestamp","currentUserId","toString","onDelete","isExpanded","onToggleReplies","onReply","isReply","reactions","onReactionAdd","onReactionRemove","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message, { ChatMessageProps } from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { prependMessages, addMessage, toggleReplies } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { addReaction, removeReaction } from '../../../services/api/reactions';\nimport { setError } from '../../../store/chat/chatSlice';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n  channelId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete, channelId } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const lastMessageRef = useRef<string | null>(messages[messages.length - 1]?.id || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef<string | null>(messages[0]?.channelId || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  const [selectedMessage, setSelectedMessage] = useState<StoreMessage | null>(null);\n  const dispatch = useDispatch();\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Add logging to debug user state\n  useEffect(() => {\n    console.log('Current user state:', currentUser);\n    console.log('Users state:', users);\n  }, [currentUser, users]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const newChannelId = messages[0]?.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    \n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = messages[messages.length - 1]?.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n\n    isInitialRender.current = false;\n  }, [messages[0]?.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage?.getBoundingClientRect().top;\n\n      const olderMessages = await getChannelMessages(\n        channelId,\n        50, // limit\n        messages.length // skip\n      );\n\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        \n        // Load replies for messages that have replyCount > 0\n        const messagesWithReplies = await Promise.all(\n          transformedMessages.map(async (message) => {\n            if (message.replyCount && message.replyCount > 0) {\n              console.log('Loading replies for older message:', message.id);\n              try {\n                const replies = await getReplies(message.id);\n                return {\n                  ...message,\n                  replies: replies.map(transformMessage),\n                  repliesLoaded: true\n                };\n              } catch (error) {\n                console.error('Failed to load replies for older message:', message.id, error);\n                return message;\n              }\n            }\n            return message;\n          })\n        );\n\n        dispatch(prependMessages({\n          channelId,\n          messages: messagesWithReplies\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n          \n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n          \n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current || isInitialRender.current) return;\n\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = messages[messages.length - 1]?.id !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && messages[messages.length - 1]?.userId === currentUser?.id;\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(\n        `[data-message-id=\"${selectedMessageId}\"]`\n      ) as HTMLElement;\n      \n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        \n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        \n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    } \n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || (isNewMessage && isAtBottom)) {\n      container.scrollTop = container.scrollHeight;\n    }\n\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = messages[messages.length - 1]?.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser?.id]);\n\n  // Load initial messages only when channelId changes\n  useEffect(() => {\n    const loadMessages = async () => {\n      if (!channelId) return;\n      \n      try {\n        console.log('Loading messages for channel:', channelId);\n        const fetchedMessages = await getChannelMessages(channelId);\n        const transformedMessages = fetchedMessages.map(transformMessage);\n        \n        // Load replies for messages that have replyCount > 0\n        const messagesWithReplies = await Promise.all(\n          transformedMessages.map(async (message) => {\n            if (message.replyCount && message.replyCount > 0) {\n              console.log('Loading replies for message:', message.id);\n              try {\n                const replies = await getReplies(message.id);\n                return {\n                  ...message,\n                  replies: replies.map(transformMessage),\n                  repliesLoaded: true\n                };\n              } catch (error) {\n                console.error('Failed to load replies for message:', message.id, error);\n                return message;\n              }\n            }\n            return message;\n          })\n        );\n        \n        dispatch(prependMessages({ channelId, messages: messagesWithReplies }));\n      } catch (error) {\n        console.error('Failed to load messages:', error);\n      }\n    };\n\n    loadMessages();\n  }, [channelId, dispatch]);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    if (!channelId) return;\n    \n    console.log('Toggling replies for message:', messageId);\n    console.log('Current message state:', messages.find(msg => msg.id === messageId));\n    \n    dispatch(toggleReplies({\n      channelId,\n      messageId\n    }));\n\n    // Log state after dispatch\n    setTimeout(() => {\n      console.log('Message state after toggle:', messages.find(msg => msg.id === messageId));\n    }, 0);\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(msg => msg.id === messageId);\n    if (message) {\n      setSelectedMessage(message);\n      setReplyModalOpen(true);\n    }\n  };\n\n  const handleReplySubmit = async (content: string) => {\n    if (selectedMessage && channelId) {\n      try {\n        const reply = await createReply(selectedMessage.id, content);\n        const transformedReply = transformMessage(reply);\n        \n        dispatch(addMessage({ \n          channelId, \n          message: {\n            ...transformedReply,\n            parentId: selectedMessage.id,\n            attachments: []\n          }\n        }));\n\n        // Close the modal\n        setReplyModalOpen(false);\n        setSelectedMessage(null);\n      } catch (error) {\n        console.error('Error creating reply:', error);\n      }\n    }\n  };\n\n  const handleReactionAdd = async (messageId: string, emoji: string) => {\n    try {\n      console.log('Adding reaction to message:', messageId, emoji);\n      await addReaction(messageId, emoji);\n      console.log('Reaction added successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to add reaction:', error);\n      dispatch(setError('Failed to add reaction'));\n    }\n  };\n\n  const handleReactionRemove = async (messageId: string, emoji: string) => {\n    try {\n      console.log('Removing reaction from message:', messageId, emoji);\n      await removeReaction(messageId, emoji);\n      console.log('Reaction removed successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to remove reaction:', error);\n      dispatch(setError('Failed to remove reaction'));\n    }\n  };\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      <MessagesWrapper>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        {[...messages]\n          .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n          // Only render main messages (non-replies) in the main list\n          .filter(message => !message.parentId)\n          .map(message => (\n          <MessageWrapper\n            key={message.id}\n            $isSelected={message.id === selectedMessageId}\n            data-message-id={message.id}\n          >\n            <Message\n              id={message.id}\n              content={message.content}\n              sender={users[message.userId]?.username || message.userId}\n              timestamp={message.createdAt}\n              userId={message.userId}\n              currentUserId={currentUser?.id?.toString()}\n              onDelete={() => handleDeleteMessage(message.id)}\n              replyCount={message.replyCount || 0}\n              isExpanded={message.isExpanded || false}\n              onToggleReplies={() => handleToggleReplies(message.id)}\n              onReply={() => handleReply(message.id)}\n              isReply={false}\n              reactions={message.reactions || []}\n              onReactionAdd={(emoji) => handleReactionAdd(message.id, emoji)}\n              onReactionRemove={(emoji) => handleReactionRemove(message.id, emoji)}\n            />\n            {message.isExpanded && (\n              <MessageReplies\n                parentId={message.id}\n                replies={message.replies || []}\n                currentUserId={currentUser?.id?.toString()}\n                isExpanded={message.isExpanded}\n                onToggleReplies={() => handleToggleReplies(message.id)}\n                onDelete={handleDeleteMessage}\n              />\n            )}\n          </MessageWrapper>\n        ))}\n      </MessagesWrapper>\n      {selectedMessage && (\n        <ReplyModal\n          isOpen={replyModalOpen}\n          onClose={() => setReplyModalOpen(false)}\n          onSubmit={handleReplySubmit}\n          parentMessage={selectedMessage}\n        />\n      )}\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}