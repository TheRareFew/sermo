{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, addMessage, setMessages, setUsers, updateUserStatus } from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n_c7 = ChatMessages;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c8 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c9 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c10 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c11 = CreateChannelButton;\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = NoChannelMessage;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n_c13 = LoadingMessage;\nconst transformMessage = (msg, users) => {\n  return {\n    id: msg.id,\n    content: msg.content,\n    sender: users[msg.sender_id.toString()] || {\n      id: msg.sender_id,\n      username: 'Unknown User',\n      email: '',\n      full_name: 'Unknown User',\n      status: 'offline',\n      last_seen: msg.created_at\n    },\n    channel_id: msg.channel_id,\n    created_at: msg.created_at,\n    updated_at: msg.created_at // Fallback to created_at if updated_at is not available\n  };\n};\nconst validateMessage = msg => {\n  const isValid = typeof msg === 'object' && msg !== null && typeof msg.id === 'number' && typeof msg.content === 'string' && typeof msg.channel_id === 'number' && typeof msg.created_at === 'string' && msg.sender && typeof msg.sender === 'object';\n  if (!isValid) {\n    console.error('Invalid message format:', msg);\n  }\n  return isValid;\n};\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef(null);\n  const messagesContainerRef = useRef(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const channels = useSelector(state => state.chat.channels);\n  const messages = useSelector(state => {\n    console.log('Current active channel ID:', activeChannelId);\n    console.log('Full chat state:', state.chat);\n    const channelMessages = state.chat.messages[activeChannelId] || [];\n\n    // Transform messages if they have sender_id instead of sender\n    const transformedMessages = channelMessages.map(msg => {\n      if ('sender_id' in msg) {\n        return transformMessage(msg, state.chat.users);\n      }\n      return msg;\n    });\n\n    // Validate message format\n    const validMessages = transformedMessages.filter(msg => {\n      const isValid = validateMessage(msg);\n      if (!isValid) {\n        console.error('Invalid message:', msg);\n      }\n      return isValid;\n    });\n    return validMessages;\n  });\n  const users = useSelector(state => state.chat.users);\n  const MESSAGES_PER_PAGE = 30;\n\n  // Function to scroll to bottom of messages\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // Handle scroll to load more messages\n  const handleScroll = async e => {\n    const div = e.currentTarget;\n    if (div.scrollTop === 0 && !isLoadingMore && hasMoreMessages && activeChannelId) {\n      setIsLoadingMore(true);\n      try {\n        var _messages$;\n        const oldestMessageId = (_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.id;\n        const olderMessages = await getChannelMessages(activeChannelId, MESSAGES_PER_PAGE);\n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        if (olderMessages.length > 0) {\n          // Filter out messages we already have\n          const newMessages = olderMessages.filter(msg => !messages.some(existing => existing.id === msg.id));\n          if (newMessages.length > 0) {\n            dispatch(setMessages({\n              channelId: activeChannelId,\n              messages: [...newMessages, ...messages].sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n            }));\n\n            // Maintain scroll position\n            const currentMessage = document.getElementById(`message-${oldestMessageId}`);\n            if (currentMessage) {\n              currentMessage.scrollIntoView();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n  useEffect(() => {\n    // Initial data fetch\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const channelsData = await getChannels();\n        console.log('Channels data:', channelsData);\n        dispatch(setChannels(channelsData));\n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          console.log('Setting active channel:', firstChannelId);\n          dispatch(setActiveChannel(firstChannelId));\n          const [messagesData, usersData] = await Promise.all([getChannelMessages(firstChannelId, MESSAGES_PER_PAGE), getChannelUsers(firstChannelId)]);\n          console.log('Raw messages data:', JSON.stringify(messagesData, null, 2));\n\n          // Validate messages before dispatching\n          const validMessages = messagesData.filter(validateMessage);\n          if (validMessages.length !== messagesData.length) {\n            console.error('Some messages have invalid format:', messagesData.filter(msg => !validateMessage(msg)));\n          }\n          dispatch(setMessages({\n            channelId: firstChannelId,\n            messages: validMessages.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n          }));\n          dispatch(setUsers(usersData));\n          wsService.joinChannel(firstChannelId);\n          setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    wsService.connect();\n    fetchInitialData();\n\n    // WebSocket event handlers\n    const messageHandler = data => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id) {\n        const rawMessage = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at || new Date().toISOString(),\n          is_system: data.is_system\n        };\n        const transformedMessage = transformMessage(rawMessage, users);\n        dispatch(addMessage({\n          channelId: data.channel_id,\n          message: transformedMessage\n        }));\n        scrollToBottom();\n      }\n    };\n    const presenceHandler = data => {\n      if (data.type === 'presence_update' && data.user_id && data.status) {\n        dispatch(updateUserStatus({\n          userId: data.user_id,\n          status: data.status\n        }));\n      }\n    };\n    wsService.onMessage(messageHandler);\n    wsService.onPresence(presenceHandler);\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n  const handleChannelClick = async channelId => {\n    if (channelId === activeChannelId) return;\n    console.log('Switching to channel:', channelId);\n    dispatch(setActiveChannel(channelId));\n    setHasMoreMessages(true);\n    try {\n      const [messagesData, usersData] = await Promise.all([getChannelMessages(channelId, MESSAGES_PER_PAGE), getChannelUsers(channelId)]);\n      console.log('Channel messages:', messagesData);\n      console.log('Channel users:', usersData);\n      dispatch(setMessages({\n        channelId,\n        messages: messagesData.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n      }));\n      dispatch(setUsers(usersData));\n      wsService.joinChannel(channelId);\n      setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n      scrollToBottom();\n    } catch (error) {\n      console.error('Failed to fetch channel data:', error);\n    }\n  };\n\n  // Scroll to bottom on initial load and channel change\n  useEffect(() => {\n    scrollToBottom();\n  }, [activeChannelId]);\n  const handleLogout = () => {\n    wsService.disconnect();\n    dispatch(logout());\n  };\n  const activeChannel = channels.find(c => c.id === activeChannelId);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n          name: channel.name,\n          isActive: channel.id === activeChannelId,\n          hasUnread: false // TODO: Implement unread tracking\n          ,\n          isDirect: channel.is_direct_message,\n          onClick: () => handleChannelClick(channel.id)\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: messagesContainerRef,\n        onScroll: handleScroll,\n        children: !activeChannel ? /*#__PURE__*/_jsxDEV(NoChannelMessage, {\n          children: channels.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Welcome to SERMO! Click the \\\"+New\\\" button above to create your first channel.\"\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Select a channel from the sidebar to start chatting.\"\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n            children: \"Loading older messages...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 17\n          }, this), console.log('Rendering messages:', messages), messages.map(msg => {\n            console.log('Rendering message:', msg);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              id: `message-${msg.id}`,\n              children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n                content: msg.content,\n                sender: msg.sender.username,\n                timestamp: msg.created_at,\n                isSystem: msg.is_system\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 21\n              }, this)\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef,\n            style: {\n              height: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: activeChannel && /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannel.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"5KLg5hYxltn5WOQoMkgaVSYoPpA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c14 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatMessages\");\n$RefreshReg$(_c8, \"ChatInput\");\n$RefreshReg$(_c9, \"LogoutButton\");\n$RefreshReg$(_c10, \"ChannelHeader\");\n$RefreshReg$(_c11, \"CreateChannelButton\");\n$RefreshReg$(_c12, \"NoChannelMessage\");\n$RefreshReg$(_c13, \"LoadingMessage\");\n$RefreshReg$(_c14, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","addMessage","setMessages","setUsers","updateUserStatus","Button","ChatMessage","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","wsService","getChannels","getChannelMessages","getChannelUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatMessages","_c7","ChatInput","_c8","LogoutButton","button","error","_c9","ChannelHeader","_c10","CreateChannelButton","_c11","NoChannelMessage","secondary","_c12","LoadingMessage","textSecondary","_c13","transformMessage","msg","users","id","content","sender","sender_id","toString","username","email","full_name","status","last_seen","created_at","channel_id","updated_at","validateMessage","isValid","console","MainLayout","_s","dispatch","messagesEndRef","messagesContainerRef","isCreateModalOpen","setIsCreateModalOpen","isLoadingMore","setIsLoadingMore","hasMoreMessages","setHasMoreMessages","activeChannelId","state","chat","channels","messages","log","channelMessages","transformedMessages","map","validMessages","filter","MESSAGES_PER_PAGE","scrollToBottom","current","scrollIntoView","behavior","handleScroll","e","currentTarget","scrollTop","_messages$","oldestMessageId","olderMessages","length","newMessages","some","existing","channelId","sort","a","b","Date","getTime","currentMessage","document","getElementById","fetchInitialData","channelsData","firstChannelId","messagesData","usersData","Promise","all","JSON","stringify","joinChannel","connect","messageHandler","data","type","rawMessage","toISOString","is_system","transformedMessage","message","presenceHandler","user_id","userId","onMessage","onPresence","disconnect","handleChannelClick","handleLogout","activeChannel","find","c","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","channel","name","isActive","hasUnread","isDirect","is_direct_message","Object","values","user","ref","onScroll","timestamp","isSystem","style","height","isOpen","onClose","_c14","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  addMessage,\n  setMessages,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { Message, WebSocketMessage, User } from '../../../types';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n\ninterface RawMessage {\n  id: number;\n  content: string;\n  sender_id: number;\n  channel_id: number;\n  created_at: string;\n  is_system?: boolean;\n}\n\nconst transformMessage = (msg: RawMessage, users: { [key: string]: User }): Message => {\n  return {\n    id: msg.id,\n    content: msg.content,\n    sender: users[msg.sender_id.toString()] || {\n      id: msg.sender_id,\n      username: 'Unknown User',\n      email: '',\n      full_name: 'Unknown User',\n      status: 'offline',\n      last_seen: msg.created_at\n    },\n    channel_id: msg.channel_id,\n    created_at: msg.created_at,\n    updated_at: msg.created_at, // Fallback to created_at if updated_at is not available\n  };\n};\n\nconst validateMessage = (msg: any): msg is Message => {\n  const isValid = (\n    typeof msg === 'object' &&\n    msg !== null &&\n    typeof msg.id === 'number' &&\n    typeof msg.content === 'string' &&\n    typeof msg.channel_id === 'number' &&\n    typeof msg.created_at === 'string' &&\n    msg.sender && typeof msg.sender === 'object'\n  );\n\n  if (!isValid) {\n    console.error('Invalid message format:', msg);\n  }\n\n  return isValid;\n};\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  \n  const activeChannelId = useSelector((state: any) => state.chat.activeChannelId);\n  const channels = useSelector((state: any) => state.chat.channels);\n  const messages = useSelector((state: any) => {\n    console.log('Current active channel ID:', activeChannelId);\n    console.log('Full chat state:', state.chat);\n    \n    const channelMessages = state.chat.messages[activeChannelId] || [];\n    \n    // Transform messages if they have sender_id instead of sender\n    const transformedMessages = channelMessages.map((msg: any) => {\n      if ('sender_id' in msg) {\n        return transformMessage(msg as RawMessage, state.chat.users);\n      }\n      return msg;\n    });\n    \n    // Validate message format\n    const validMessages = transformedMessages.filter((msg: unknown) => {\n      const isValid = validateMessage(msg);\n      if (!isValid) {\n        console.error('Invalid message:', msg);\n      }\n      return isValid;\n    });\n    \n    return validMessages;\n  });\n  const users = useSelector((state: any) => state.chat.users);\n\n  const MESSAGES_PER_PAGE = 30;\n\n  // Function to scroll to bottom of messages\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  // Handle scroll to load more messages\n  const handleScroll = async (e: React.UIEvent<HTMLDivElement>) => {\n    const div = e.currentTarget;\n    if (div.scrollTop === 0 && !isLoadingMore && hasMoreMessages && activeChannelId) {\n      setIsLoadingMore(true);\n      try {\n        const oldestMessageId = messages[0]?.id;\n        const olderMessages = await getChannelMessages(activeChannelId, MESSAGES_PER_PAGE);\n        \n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n\n        if (olderMessages.length > 0) {\n          // Filter out messages we already have\n          const newMessages = olderMessages.filter(msg => \n            !messages.some((existing: Message) => existing.id === msg.id)\n          );\n          if (newMessages.length > 0) {\n            dispatch(setMessages({ \n              channelId: activeChannelId, \n              messages: [...newMessages, ...messages].sort((a, b) => \n                new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n              )\n            }));\n            \n            // Maintain scroll position\n            const currentMessage = document.getElementById(`message-${oldestMessageId}`);\n            if (currentMessage) {\n              currentMessage.scrollIntoView();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Initial data fetch\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const channelsData = await getChannels();\n        console.log('Channels data:', channelsData);\n        dispatch(setChannels(channelsData));\n        \n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          console.log('Setting active channel:', firstChannelId);\n          dispatch(setActiveChannel(firstChannelId));\n          \n          const [messagesData, usersData] = await Promise.all([\n            getChannelMessages(firstChannelId, MESSAGES_PER_PAGE),\n            getChannelUsers(firstChannelId)\n          ]);\n          \n          console.log('Raw messages data:', JSON.stringify(messagesData, null, 2));\n          \n          // Validate messages before dispatching\n          const validMessages = messagesData.filter(validateMessage);\n          if (validMessages.length !== messagesData.length) {\n            console.error('Some messages have invalid format:', \n              messagesData.filter(msg => !validateMessage(msg))\n            );\n          }\n          \n          dispatch(setMessages({ \n            channelId: firstChannelId, \n            messages: validMessages.sort((a, b) => \n              new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n            )\n          }));\n          dispatch(setUsers(usersData));\n          wsService.joinChannel(firstChannelId);\n          setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    wsService.connect();\n    fetchInitialData();\n\n    // WebSocket event handlers\n    const messageHandler = (data: WebSocketMessage) => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id) {\n        const rawMessage: RawMessage = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at || new Date().toISOString(),\n          is_system: data.is_system\n        };\n        \n        const transformedMessage = transformMessage(rawMessage, users);\n        dispatch(addMessage({ channelId: data.channel_id, message: transformedMessage }));\n        scrollToBottom();\n      }\n    };\n\n    const presenceHandler = (data: WebSocketMessage) => {\n      if (data.type === 'presence_update' && data.user_id && data.status) {\n        dispatch(updateUserStatus({\n          userId: data.user_id,\n          status: data.status\n        }));\n      }\n    };\n\n    wsService.onMessage(messageHandler);\n    wsService.onPresence(presenceHandler);\n\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  const handleChannelClick = async (channelId: number) => {\n    if (channelId === activeChannelId) return;\n    \n    console.log('Switching to channel:', channelId);\n    dispatch(setActiveChannel(channelId));\n    setHasMoreMessages(true);\n    try {\n      const [messagesData, usersData] = await Promise.all([\n        getChannelMessages(channelId, MESSAGES_PER_PAGE),\n        getChannelUsers(channelId)\n      ]);\n      \n      console.log('Channel messages:', messagesData);\n      console.log('Channel users:', usersData);\n      \n      dispatch(setMessages({ \n        channelId, \n        messages: messagesData.sort((a, b) => \n          new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n        )\n      }));\n      dispatch(setUsers(usersData));\n      wsService.joinChannel(channelId);\n      setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n      scrollToBottom();\n    } catch (error) {\n      console.error('Failed to fetch channel data:', error);\n    }\n  };\n\n  // Scroll to bottom on initial load and channel change\n  useEffect(() => {\n    scrollToBottom();\n  }, [activeChannelId]);\n\n  const handleLogout = () => {\n    wsService.disconnect();\n    dispatch(logout());\n  };\n\n  const activeChannel = channels.find((c: any) => c.id === activeChannelId);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n          {channels.map((channel: any) => (\n            <ChannelListItem\n              key={channel.id}\n              name={channel.name}\n              isActive={channel.id === activeChannelId}\n              hasUnread={false} // TODO: Implement unread tracking\n              isDirect={channel.is_direct_message}\n              onClick={() => handleChannelClick(channel.id)}\n            />\n          ))}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: any) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'}</h1>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </ChatHeader>\n        <ChatMessages \n          ref={messagesContainerRef} \n          onScroll={handleScroll}\n        >\n          {!activeChannel ? (\n            <NoChannelMessage>\n              {channels.length === 0 ? (\n                <>\n                  Welcome to SERMO! Click the \"+New\" button above to create your first channel.\n                </>\n              ) : (\n                <>\n                  Select a channel from the sidebar to start chatting.\n                </>\n              )}\n            </NoChannelMessage>\n          ) : (\n            <>\n              {isLoadingMore && (\n                <LoadingMessage>Loading older messages...</LoadingMessage>\n              )}\n              {console.log('Rendering messages:', messages)}\n              {messages.map((msg: Message) => {\n                console.log('Rendering message:', msg);\n                return (\n                  <div key={msg.id} id={`message-${msg.id}`}>\n                    <ChatMessage\n                      content={msg.content}\n                      sender={msg.sender.username}\n                      timestamp={msg.created_at}\n                      isSystem={msg.is_system}\n                    />\n                  </div>\n                );\n              })}\n              <div ref={messagesEndRef} style={{ height: 1 }} />\n            </>\n          )}\n        </ChatMessages>\n        <ChatInput>\n          {activeChannel && (\n            <MessageInput\n              channelId={activeChannel.id}\n            />\n          )}\n        </ChatInput>\n      </ChatArea>\n      <CreateChannelModal\n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n      />\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}