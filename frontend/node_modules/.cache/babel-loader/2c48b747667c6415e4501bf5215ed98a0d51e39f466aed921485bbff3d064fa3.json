{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const containerRef = useRef(null);\n  const selectedMessageRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef(null);\n  const loadedRepliesRef = useRef(new Set());\n  const lastMessageTimestamp = useRef(null);\n  const pollingInterval = useRef(null);\n  const {\n    currentUser,\n    users,\n    activeChannelId\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users,\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Load initial messages when channel changes\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const loadInitialMessages = async () => {\n      try {\n        const messages = await getChannelMessages(activeChannelId, undefined, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = messages.map(transformMessage);\n          const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: organizedMessages\n          }));\n\n          // Update last message timestamp\n          if (messages.length > 0) {\n            lastMessageTimestamp.current = new Date(messages[messages.length - 1].created_at).getTime();\n          }\n        }\n      } catch (error) {\n        console.error('Error loading initial messages:', error);\n        dispatch(setError('Failed to load messages'));\n      }\n    };\n    loadInitialMessages();\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId, dispatch]);\n\n  // Poll for new messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const pollForNewMessages = async () => {\n      try {\n        const newMessages = await getChannelMessages(activeChannelId, lastMessageTimestamp.current);\n        if (newMessages.length > 0) {\n          const transformedMessages = newMessages.map(transformMessage);\n          transformedMessages.forEach(msg => {\n            dispatch(addMessage({\n              channelId: activeChannelId,\n              message: msg\n            }));\n          });\n\n          // Update last message timestamp\n          lastMessageTimestamp.current = new Date(newMessages[newMessages.length - 1].created_at).getTime();\n\n          // Auto-scroll to bottom if we're already near bottom\n          if (containerRef.current) {\n            const {\n              scrollTop,\n              scrollHeight,\n              clientHeight\n            } = containerRef.current;\n            const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;\n            if (isNearBottom) {\n              requestAnimationFrame(() => {\n                if (containerRef.current) {\n                  containerRef.current.scrollTop = containerRef.current.scrollHeight;\n                }\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error polling for new messages:', error);\n      }\n    };\n\n    // Set up polling interval\n    pollingInterval.current = setInterval(pollForNewMessages, 5000);\n\n    // Cleanup function\n    return () => {\n      if (pollingInterval.current) {\n        clearInterval(pollingInterval.current);\n      }\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n\n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => msg.replyCount > 0 && !msg.repliesLoaded && !msg.parentId && !loadedRepliesRef.current.has(msg.id));\n      if (messagesToLoadReplies.length === 0) return;\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => msg.id === message.id ? {\n              ...msg,\n              repliesLoaded: true,\n              replies: transformedReplies,\n              isExpanded: msg.isExpanded || false\n            } : msg)\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = messages => {\n    const mainMessages = [];\n    const repliesByParentId = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n    return mainMessages;\n  };\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const {\n        position,\n        height\n      } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n\n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n\n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n  const handleDeleteMessage = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: activeChannelId,\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleToggleReplies = async messageId => {\n    if (!activeChannelId) return;\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => msg.id === messageId ? {\n            ...msg,\n            repliesLoaded: true,\n            replies: transformedReplies,\n            isExpanded: true // Auto-expand after loading replies\n          } : msg)\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({\n      channelId: activeChannelId,\n      messageId\n    }));\n  };\n  const handleReply = messageId => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n  const handleSendReply = async content => {\n    if (!replyToMessage || !activeChannelId) return;\n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n\n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => msg.id === replyToMessage.id ? {\n          ...msg,\n          replyCount: (msg.replyCount || 0) + 1,\n          isExpanded: true,\n          repliesLoaded: true,\n          replies: [...(msg.replies || []), transformedReply]\n        } : msg)\n      }));\n\n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      onScroll: handleScroll,\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: sortedMessages.map(message => {\n          var _users$message$userId;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(MessageWrapper, {\n              $isSelected: message.id === selectedMessageId,\n              ref: message.id === selectedMessageId ? selectedMessageRef : undefined,\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                content: message.content,\n                sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n                timestamp: message.createdAt,\n                userId: message.userId,\n                currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n                onDelete: () => handleDeleteMessage(message.id),\n                replyCount: message.replyCount,\n                isExpanded: message.isExpanded || false,\n                onToggleReplies: () => handleToggleReplies(message.id),\n                onReply: () => handleReply(message.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 15\n            }, this), message.isExpanded && message.replyCount > 0 && /*#__PURE__*/_jsxDEV(MessageReplies, {\n              parentId: message.id,\n              replies: message.replies || [],\n              isExpanded: message.isExpanded,\n              onToggleReplies: handleToggleReplies,\n              onDelete: handleDeleteMessage,\n              currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this)]\n          }, message.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), replyToMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: true,\n      onClose: () => setReplyToMessage(null),\n      onSubmit: handleSendReply,\n      parentMessage: replyToMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"+9e++xd025YcdWeIljLrxFHYV4I=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"+9e++xd025YcdWeIljLrxFHYV4I=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","useMemo","styled","useSelector","useDispatch","transformMessage","Message","MessageReplies","ReplyModal","deleteMessage","toggleExpanded","prependMessages","addMessage","setMessages","deleteMessageApi","getChannelMessages","createReply","getReplies","setError","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","messages","selectedMessageId","dispatch","containerRef","selectedMessageRef","isLoadingMore","setIsLoadingMore","hasMore","setHasMore","page","setPage","replyToMessage","setReplyToMessage","PAGE_SIZE","scrollLockRef","loadedRepliesRef","Set","lastMessageTimestamp","pollingInterval","currentUser","users","activeChannelId","state","auth","user","chat","loadInitialMessages","undefined","length","transformedMessages","map","organizedMessages","organizeMessagesAndReplies","channelId","current","Date","created_at","getTime","error","console","pollForNewMessages","newMessages","forEach","msg","message","scrollTop","scrollHeight","clientHeight","isNearBottom","requestAnimationFrame","setInterval","clearInterval","sortedMessages","mainMessages","filter","parentId","sort","a","b","timeA","createdAt","timeB","loadRepliesForMessages","messagesToLoadReplies","replyCount","repliesLoaded","has","id","add","replies","transformedReplies","isExpanded","delete","clear","repliesByParentId","push","loadMoreMessages","log","container","position","height","olderMessages","p","newPosition","handleScroll","event","currentTarget","scrollIntoView","behavior","block","handleDeleteMessage","messageId","handleToggleReplies","find","m","handleReply","handleSendReply","content","reply","transformedReply","success","children","onScroll","fileName","_jsxFileName","lineNumber","columnNumber","_users$message$userId","sender","userId","username","timestamp","currentUserId","onDelete","onToggleReplies","onReply","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User, Message as ApiMessage } from '../../../types';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies, updateMessage } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { toast } from 'react-toastify';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const dispatch = useDispatch();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState<StoreMessage | null>(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef<{ position: number; height: number } | null>(null);\n  const loadedRepliesRef = useRef<Set<string>>(new Set());\n  const lastMessageTimestamp = useRef<number | null>(null);\n  const pollingInterval = useRef<NodeJS.Timeout | null>(null);\n\n  const { currentUser, users, activeChannelId } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User },\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Load initial messages when channel changes\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const loadInitialMessages = async () => {\n      try {\n        const messages = await getChannelMessages(activeChannelId, undefined, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = messages.map(transformMessage);\n          const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: organizedMessages\n          }));\n          \n          // Update last message timestamp\n          if (messages.length > 0) {\n            lastMessageTimestamp.current = new Date(messages[messages.length - 1].created_at).getTime();\n          }\n        }\n      } catch (error) {\n        console.error('Error loading initial messages:', error);\n        dispatch(setError('Failed to load messages'));\n      }\n    };\n\n    loadInitialMessages();\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId, dispatch]);\n\n  // Poll for new messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const pollForNewMessages = async () => {\n      try {\n        const newMessages = await getChannelMessages(activeChannelId, lastMessageTimestamp.current);\n        if (newMessages.length > 0) {\n          const transformedMessages = newMessages.map(transformMessage);\n          transformedMessages.forEach(msg => {\n            dispatch(addMessage({\n              channelId: activeChannelId,\n              message: msg\n            }));\n          });\n\n          // Update last message timestamp\n          lastMessageTimestamp.current = new Date(newMessages[newMessages.length - 1].created_at).getTime();\n\n          // Auto-scroll to bottom if we're already near bottom\n          if (containerRef.current) {\n            const { scrollTop, scrollHeight, clientHeight } = containerRef.current;\n            const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;\n            \n            if (isNearBottom) {\n              requestAnimationFrame(() => {\n                if (containerRef.current) {\n                  containerRef.current.scrollTop = containerRef.current.scrollHeight;\n                }\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error polling for new messages:', error);\n      }\n    };\n\n    // Set up polling interval\n    pollingInterval.current = setInterval(pollForNewMessages, 5000);\n\n    // Cleanup function\n    return () => {\n      if (pollingInterval.current) {\n        clearInterval(pollingInterval.current);\n      }\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    \n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n      \n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => \n        msg.replyCount > 0 && \n        !msg.repliesLoaded && \n        !msg.parentId && \n        !loadedRepliesRef.current.has(msg.id)\n      );\n\n      if (messagesToLoadReplies.length === 0) return;\n\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          \n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => \n              msg.id === message.id \n                ? { \n                    ...msg, \n                    repliesLoaded: true,\n                    replies: transformedReplies,\n                    isExpanded: msg.isExpanded || false\n                  } \n                : msg\n            )\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = (messages: StoreMessage[]) => {\n    const mainMessages: StoreMessage[] = [];\n    const repliesByParentId: { [key: string]: StoreMessage[] } = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n\n    return mainMessages;\n  };\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      \n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({ \n          channelId: activeChannelId, \n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const { position, height } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      \n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n      \n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n\n  const handleDeleteMessage = async (messageId: string) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: activeChannelId, messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleToggleReplies = async (messageId: string) => {\n    if (!activeChannelId) return;\n\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        \n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => \n            msg.id === messageId \n              ? {\n                  ...msg,\n                  repliesLoaded: true,\n                  replies: transformedReplies,\n                  isExpanded: true // Auto-expand after loading replies\n                }\n              : msg\n          )\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({ channelId: activeChannelId, messageId }));\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!replyToMessage || !activeChannelId) return;\n    \n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      \n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => \n          msg.id === replyToMessage.id \n            ? {\n                ...msg,\n                replyCount: (msg.replyCount || 0) + 1,\n                isExpanded: true,\n                repliesLoaded: true,\n                replies: [...(msg.replies || []), transformedReply]\n              }\n            : msg\n        )\n      }));\n      \n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef} onScroll={handleScroll}>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        <MessagesWrapper>\n          {sortedMessages.map(message => (\n            <React.Fragment key={message.id}>\n              <MessageWrapper\n                $isSelected={message.id === selectedMessageId}\n                ref={message.id === selectedMessageId ? selectedMessageRef : undefined}\n              >\n                <Message\n                  content={message.content}\n                  sender={users[message.userId]?.username || message.userId}\n                  timestamp={message.createdAt}\n                  userId={message.userId}\n                  currentUserId={currentUser?.id}\n                  onDelete={() => handleDeleteMessage(message.id)}\n                  replyCount={message.replyCount}\n                  isExpanded={message.isExpanded || false}\n                  onToggleReplies={() => handleToggleReplies(message.id)}\n                  onReply={() => handleReply(message.id)}\n                />\n              </MessageWrapper>\n              {message.isExpanded && message.replyCount > 0 && (\n                <MessageReplies \n                  parentId={message.id}\n                  replies={message.replies || []}\n                  isExpanded={message.isExpanded}\n                  onToggleReplies={handleToggleReplies}\n                  onDelete={handleDeleteMessage}\n                  currentUserId={currentUser?.id}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      \n      {replyToMessage && (\n        <ReplyModal\n          isOpen={true}\n          onClose={() => setReplyToMessage(null)}\n          onSubmit={handleSendReply}\n          parentMessage={replyToMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}