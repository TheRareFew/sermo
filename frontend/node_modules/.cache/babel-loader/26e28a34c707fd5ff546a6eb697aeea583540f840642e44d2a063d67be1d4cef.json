{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, sendMessage } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef(null);\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef(null);\n  const {\n    currentUser,\n    users,\n    activeChannelId\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users,\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n      if (olderMessages.length > 0) {\n        // Transform and prepend messages\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: olderMessages.map(msg => ({\n            id: msg.id.toString(),\n            content: msg.content,\n            channelId: msg.channel_id.toString(),\n            userId: msg.sender_id.toString(),\n            reactions: [],\n            attachments: [],\n            createdAt: msg.created_at,\n            updatedAt: msg.created_at,\n            replyCount: msg.reply_count || 0,\n            isExpanded: false,\n            ...(msg.parent_id ? {\n              parentId: msg.parent_id.toString()\n            } : {})\n          }))\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const {\n        position,\n        height\n      } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n\n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n\n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n  const handleDeleteMessage = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: activeChannelId,\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleToggleReplies = messageId => {\n    if (activeChannelId) {\n      dispatch(toggleExpanded({\n        channelId: activeChannelId,\n        messageId\n      }));\n    }\n  };\n  const handleReply = messageId => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n  const handleSendReply = async content => {\n    if (!replyToMessage || !activeChannelId) return;\n    try {\n      await sendMessage({\n        content,\n        channelId: activeChannelId,\n        parentId: replyToMessage.id\n      });\n\n      // The new message will be fetched through the websocket connection\n      // or next poll, so we don't need to manually add it to the state\n    } catch (error) {\n      console.error('Error sending reply:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      onScroll: handleScroll,\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: messages.map(message => {\n          var _users$message$userId;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(MessageWrapper, {\n              $isSelected: message.id === selectedMessageId,\n              ref: message.id === selectedMessageId ? selectedMessageRef : undefined,\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                content: message.content,\n                sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n                timestamp: message.createdAt,\n                userId: message.userId,\n                currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n                onDelete: () => handleDeleteMessage(message.id),\n                replyCount: message.replyCount,\n                isExpanded: message.isExpanded || false,\n                onToggleReplies: () => handleToggleReplies(message.id),\n                onReply: () => handleReply(message.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this), message.isExpanded && message.replyCount > 0 && /*#__PURE__*/_jsxDEV(MessageReplies, {\n              parentId: message.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this)]\n          }, message.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), replyToMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: true,\n      onClose: () => setReplyToMessage(null),\n      onSubmit: handleSendReply,\n      parentMessage: replyToMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"I53Xr7l06EVJfLMKTZH93kYCN8c=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"I53Xr7l06EVJfLMKTZH93kYCN8c=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","styled","useSelector","useDispatch","Message","MessageReplies","ReplyModal","deleteMessage","toggleExpanded","prependMessages","deleteMessageApi","getChannelMessages","sendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","messages","selectedMessageId","dispatch","selectedMessageRef","containerRef","isLoadingMore","setIsLoadingMore","hasMore","setHasMore","page","setPage","replyToMessage","setReplyToMessage","PAGE_SIZE","scrollLockRef","currentUser","users","activeChannelId","state","auth","user","chat","current","loadMoreMessages","console","log","container","position","scrollTop","height","scrollHeight","olderMessages","length","channelId","map","msg","id","toString","content","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","p","error","newPosition","handleScroll","event","currentTarget","scrollIntoView","behavior","block","handleDeleteMessage","messageId","handleToggleReplies","handleReply","message","find","m","handleSendReply","children","onScroll","fileName","_jsxFileName","lineNumber","columnNumber","_users$message$userId","undefined","sender","username","timestamp","currentUserId","onDelete","onToggleReplies","onReply","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, sendMessage } from '../../../services/api/chat';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState<StoreMessage | null>(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef<{ position: number; height: number } | null>(null);\n\n  const { currentUser, users, activeChannelId } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User },\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      \n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n\n      if (olderMessages.length > 0) {\n        // Transform and prepend messages\n        dispatch(prependMessages({ \n          channelId: activeChannelId, \n          messages: olderMessages.map(msg => ({\n            id: msg.id.toString(),\n            content: msg.content,\n            channelId: msg.channel_id.toString(),\n            userId: msg.sender_id.toString(),\n            reactions: [],\n            attachments: [],\n            createdAt: msg.created_at,\n            updatedAt: msg.created_at,\n            replyCount: msg.reply_count || 0,\n            isExpanded: false,\n            ...(msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n          }))\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const { position, height } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      \n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n      \n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n\n  const handleDeleteMessage = async (messageId: string) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: activeChannelId, messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    if (activeChannelId) {\n      dispatch(toggleExpanded({ channelId: activeChannelId, messageId }));\n    }\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!replyToMessage || !activeChannelId) return;\n    \n    try {\n      await sendMessage({\n        content,\n        channelId: activeChannelId,\n        parentId: replyToMessage.id\n      });\n      \n      // The new message will be fetched through the websocket connection\n      // or next poll, so we don't need to manually add it to the state\n    } catch (error) {\n      console.error('Error sending reply:', error);\n    }\n  };\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef} onScroll={handleScroll}>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        <MessagesWrapper>\n          {messages.map(message => (\n            <React.Fragment key={message.id}>\n              <MessageWrapper\n                $isSelected={message.id === selectedMessageId}\n                ref={message.id === selectedMessageId ? selectedMessageRef : undefined}\n              >\n                <Message\n                  content={message.content}\n                  sender={users[message.userId]?.username || message.userId}\n                  timestamp={message.createdAt}\n                  userId={message.userId}\n                  currentUserId={currentUser?.id}\n                  onDelete={() => handleDeleteMessage(message.id)}\n                  replyCount={message.replyCount}\n                  isExpanded={message.isExpanded || false}\n                  onToggleReplies={() => handleToggleReplies(message.id)}\n                  onReply={() => handleReply(message.id)}\n                />\n              </MessageWrapper>\n              {message.isExpanded && message.replyCount > 0 && (\n                <MessageReplies parentId={message.id} />\n              )}\n            </React.Fragment>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      \n      {replyToMessage && (\n        <ReplyModal\n          isOpen={true}\n          onClose={() => setReplyToMessage(null)}\n          onSubmit={handleSendReply}\n          parentMessage={replyToMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}