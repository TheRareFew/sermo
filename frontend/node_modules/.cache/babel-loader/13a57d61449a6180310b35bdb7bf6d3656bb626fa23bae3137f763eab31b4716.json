{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, setMessages } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { toast } from 'react-toastify';\nimport WebSocketService from '../../../services/websocket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const containerRef = useRef(null);\n  const selectedMessageRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef(null);\n  const loadedRepliesRef = useRef(new Set());\n  const lastMessageTimestamp = useRef(null);\n  const [isAutoScrollEnabled, setIsAutoScrollEnabled] = useState(true);\n  const highlightTimeoutRef = useRef();\n  const {\n    currentUser,\n    users,\n    activeChannelId\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users,\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Load initial messages when channel changes\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const loadInitialMessages = async () => {\n      try {\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = messages.map(transformMessage);\n          const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: organizedMessages\n          }));\n\n          // Update last message timestamp\n          if (messages.length > 0) {\n            lastMessageTimestamp.current = new Date(messages[messages.length - 1].created_at).getTime();\n          }\n\n          // Connect to WebSocket for this channel\n          WebSocketService.joinChannel(activeChannelId);\n        }\n      } catch (error) {\n        console.error('Error loading initial messages:', error);\n        dispatch(setError('Failed to load messages'));\n      }\n    };\n    loadInitialMessages();\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n\n    // Cleanup: leave the WebSocket channel when component unmounts or channel changes\n    return () => {\n      if (activeChannelId) {\n        WebSocketService.leaveChannel(activeChannelId);\n      }\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n\n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => msg.replyCount > 0 && !msg.repliesLoaded && !msg.parentId && !loadedRepliesRef.current.has(msg.id));\n      if (messagesToLoadReplies.length === 0) return;\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => msg.id === message.id ? {\n              ...msg,\n              repliesLoaded: true,\n              replies: transformedReplies,\n              isExpanded: msg.isExpanded || false\n            } : msg)\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = messages => {\n    const mainMessages = [];\n    const repliesByParentId = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n    return mainMessages;\n  };\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const {\n        position,\n        height\n      } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n\n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n\n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll and auto-scroll behavior\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = container;\n\n    // Check if we're near the top for loading more messages\n    if (scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n\n    // Enable auto-scroll only when we're near the bottom and no message is selected\n    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;\n    setIsAutoScrollEnabled(isNearBottom && !selectedMessageId);\n  }, [loadMoreMessages, isLoadingMore, selectedMessageId]);\n\n  // Auto-scroll to bottom for new messages\n  useEffect(() => {\n    if (isAutoScrollEnabled && containerRef.current && !selectedMessageId) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, isAutoScrollEnabled, selectedMessageId]);\n\n  // Enhanced scroll to selected message with highlight effect\n  useEffect(() => {\n    if (selectedMessageId && containerRef.current) {\n      const messageElement = containerRef.current.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        // Scroll the message into view\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n\n        // Clear any existing timeout\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n\n        // Remove highlight class after animation\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    }\n\n    // Cleanup\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n    };\n  }, [selectedMessageId]);\n\n  // Enhanced fetch selected message\n  useEffect(() => {\n    const fetchSelectedMessage = async () => {\n      if (selectedMessageId && activeChannelId && !messages.find(msg => msg.id === selectedMessageId)) {\n        try {\n          setIsLoadingMore(true);\n          const response = await getChannelMessages(activeChannelId, PAGE_SIZE);\n          const transformedMessages = response.map(transformMessage);\n\n          // Check if the selected message is in the response\n          const messageFound = transformedMessages.some(msg => msg.id === selectedMessageId);\n          if (messageFound) {\n            dispatch(prependMessages({\n              channelId: activeChannelId,\n              messages: transformedMessages\n            }));\n          } else {\n            // If message not found in first page, try to fetch more\n            const moreMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, PAGE_SIZE);\n            const moreTransformedMessages = moreMessages.map(transformMessage);\n            dispatch(prependMessages({\n              channelId: activeChannelId,\n              messages: moreTransformedMessages\n            }));\n          }\n        } catch (error) {\n          console.error('Error fetching selected message:', error);\n          dispatch(setError('Failed to load message'));\n        } finally {\n          setIsLoadingMore(false);\n        }\n      }\n    };\n    fetchSelectedMessage();\n  }, [selectedMessageId, activeChannelId, messages, dispatch]);\n  const handleDeleteMessage = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: activeChannelId,\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleToggleReplies = async messageId => {\n    if (!activeChannelId) return;\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => msg.id === messageId ? {\n            ...msg,\n            repliesLoaded: true,\n            replies: transformedReplies,\n            isExpanded: true // Auto-expand after loading replies\n          } : msg)\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({\n      channelId: activeChannelId,\n      messageId\n    }));\n  };\n  const handleReply = messageId => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n  const handleSendReply = async content => {\n    if (!replyToMessage || !activeChannelId) return;\n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n\n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => msg.id === replyToMessage.id ? {\n          ...msg,\n          replyCount: (msg.replyCount || 0) + 1,\n          isExpanded: true,\n          repliesLoaded: true,\n          replies: [...(msg.replies || []), transformedReply]\n        } : msg)\n      }));\n\n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      onScroll: handleScroll,\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          $isSelected: message.id === selectedMessageId,\n          \"data-message-id\": message.id,\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            message: message,\n            currentUser: currentUser,\n            users: users,\n            onDelete: handleDeleteMessage,\n            onToggleReplies: handleToggleReplies,\n            onReply: handleReply\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this), message.expanded && /*#__PURE__*/_jsxDEV(MessageReplies, {\n            replies: message.replies || [],\n            users: users,\n            currentUser: currentUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this), replyToMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: true,\n      onClose: () => setReplyToMessage(null),\n      onSubmit: handleSendReply,\n      parentMessage: replyToMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"hU3nD3RdQmaZnm3suiLrgk1x4Jk=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"hU3nD3RdQmaZnm3suiLrgk1x4Jk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","useMemo","styled","useSelector","useDispatch","transformMessage","Message","MessageReplies","ReplyModal","deleteMessage","toggleExpanded","prependMessages","setMessages","deleteMessageApi","getChannelMessages","createReply","getReplies","setError","toast","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","messages","selectedMessageId","dispatch","containerRef","selectedMessageRef","isLoadingMore","setIsLoadingMore","hasMore","setHasMore","page","setPage","replyToMessage","setReplyToMessage","PAGE_SIZE","scrollLockRef","loadedRepliesRef","Set","lastMessageTimestamp","isAutoScrollEnabled","setIsAutoScrollEnabled","highlightTimeoutRef","currentUser","users","activeChannelId","state","auth","user","chat","loadInitialMessages","length","transformedMessages","map","organizedMessages","organizeMessagesAndReplies","channelId","current","Date","created_at","getTime","joinChannel","error","console","leaveChannel","sortedMessages","mainMessages","filter","msg","parentId","sort","a","b","timeA","createdAt","timeB","loadRepliesForMessages","messagesToLoadReplies","replyCount","repliesLoaded","has","id","message","add","replies","transformedReplies","isExpanded","delete","clear","repliesByParentId","forEach","push","loadMoreMessages","log","container","position","scrollTop","height","scrollHeight","olderMessages","p","newPosition","handleScroll","event","currentTarget","clientHeight","isNearBottom","messageElement","querySelector","scrollIntoView","behavior","block","classList","clearTimeout","setTimeout","remove","fetchSelectedMessage","find","response","messageFound","some","moreMessages","moreTransformedMessages","handleDeleteMessage","messageId","handleToggleReplies","m","handleReply","handleSendReply","content","reply","transformedReply","success","children","onScroll","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","onToggleReplies","onReply","expanded","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User, Message as ApiMessage } from '../../../types';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies, updateMessage } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { toast } from 'react-toastify';\nimport WebSocketService from '../../../services/websocket';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const dispatch = useDispatch();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState<StoreMessage | null>(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef<{ position: number; height: number } | null>(null);\n  const loadedRepliesRef = useRef<Set<string>>(new Set());\n  const lastMessageTimestamp = useRef<number | null>(null);\n  const [isAutoScrollEnabled, setIsAutoScrollEnabled] = useState(true);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const { currentUser, users, activeChannelId } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User },\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Load initial messages when channel changes\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const loadInitialMessages = async () => {\n      try {\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = messages.map(transformMessage);\n          const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: organizedMessages\n          }));\n          \n          // Update last message timestamp\n          if (messages.length > 0) {\n            lastMessageTimestamp.current = new Date(messages[messages.length - 1].created_at).getTime();\n          }\n\n          // Connect to WebSocket for this channel\n          WebSocketService.joinChannel(activeChannelId);\n        }\n      } catch (error) {\n        console.error('Error loading initial messages:', error);\n        dispatch(setError('Failed to load messages'));\n      }\n    };\n\n    loadInitialMessages();\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n\n    // Cleanup: leave the WebSocket channel when component unmounts or channel changes\n    return () => {\n      if (activeChannelId) {\n        WebSocketService.leaveChannel(activeChannelId);\n      }\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    \n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n      \n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => \n        msg.replyCount > 0 && \n        !msg.repliesLoaded && \n        !msg.parentId && \n        !loadedRepliesRef.current.has(msg.id)\n      );\n\n      if (messagesToLoadReplies.length === 0) return;\n\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          \n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => \n              msg.id === message.id \n                ? { \n                    ...msg, \n                    repliesLoaded: true,\n                    replies: transformedReplies,\n                    isExpanded: msg.isExpanded || false\n                  } \n                : msg\n            )\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = (messages: StoreMessage[]) => {\n    const mainMessages: StoreMessage[] = [];\n    const repliesByParentId: { [key: string]: StoreMessage[] } = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n\n    return mainMessages;\n  };\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      \n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({ \n          channelId: activeChannelId, \n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const { position, height } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      \n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n      \n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll and auto-scroll behavior\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    const { scrollTop, scrollHeight, clientHeight } = container;\n    \n    // Check if we're near the top for loading more messages\n    if (scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n\n    // Enable auto-scroll only when we're near the bottom and no message is selected\n    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;\n    setIsAutoScrollEnabled(isNearBottom && !selectedMessageId);\n  }, [loadMoreMessages, isLoadingMore, selectedMessageId]);\n\n  // Auto-scroll to bottom for new messages\n  useEffect(() => {\n    if (isAutoScrollEnabled && containerRef.current && !selectedMessageId) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, isAutoScrollEnabled, selectedMessageId]);\n\n  // Enhanced scroll to selected message with highlight effect\n  useEffect(() => {\n    if (selectedMessageId && containerRef.current) {\n      const messageElement = containerRef.current.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        // Scroll the message into view\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        \n        // Clear any existing timeout\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        \n        // Remove highlight class after animation\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    }\n\n    // Cleanup\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n    };\n  }, [selectedMessageId]);\n\n  // Enhanced fetch selected message\n  useEffect(() => {\n    const fetchSelectedMessage = async () => {\n      if (selectedMessageId && activeChannelId && !messages.find(msg => msg.id === selectedMessageId)) {\n        try {\n          setIsLoadingMore(true);\n          const response = await getChannelMessages(activeChannelId, PAGE_SIZE);\n          const transformedMessages = response.map(transformMessage);\n          \n          // Check if the selected message is in the response\n          const messageFound = transformedMessages.some(msg => msg.id === selectedMessageId);\n          \n          if (messageFound) {\n            dispatch(prependMessages({\n              channelId: activeChannelId,\n              messages: transformedMessages\n            }));\n          } else {\n            // If message not found in first page, try to fetch more\n            const moreMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, PAGE_SIZE);\n            const moreTransformedMessages = moreMessages.map(transformMessage);\n            dispatch(prependMessages({\n              channelId: activeChannelId,\n              messages: moreTransformedMessages\n            }));\n          }\n        } catch (error) {\n          console.error('Error fetching selected message:', error);\n          dispatch(setError('Failed to load message'));\n        } finally {\n          setIsLoadingMore(false);\n        }\n      }\n    };\n\n    fetchSelectedMessage();\n  }, [selectedMessageId, activeChannelId, messages, dispatch]);\n\n  const handleDeleteMessage = async (messageId: string) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: activeChannelId, messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleToggleReplies = async (messageId: string) => {\n    if (!activeChannelId) return;\n\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        \n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => \n            msg.id === messageId \n              ? {\n                  ...msg,\n                  repliesLoaded: true,\n                  replies: transformedReplies,\n                  isExpanded: true // Auto-expand after loading replies\n                }\n              : msg\n          )\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({ channelId: activeChannelId, messageId }));\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!replyToMessage || !activeChannelId) return;\n    \n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      \n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => \n          msg.id === replyToMessage.id \n            ? {\n                ...msg,\n                replyCount: (msg.replyCount || 0) + 1,\n                isExpanded: true,\n                repliesLoaded: true,\n                replies: [...(msg.replies || []), transformedReply]\n              }\n            : msg\n        )\n      }));\n      \n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef} onScroll={handleScroll}>\n        {isLoadingMore && <LoadingIndicator>Loading messages...</LoadingIndicator>}\n        <MessagesWrapper>\n          {messages.map(message => (\n            <MessageWrapper\n              key={message.id}\n              $isSelected={message.id === selectedMessageId}\n              data-message-id={message.id}\n            >\n              <Message\n                message={message}\n                currentUser={currentUser}\n                users={users}\n                onDelete={handleDeleteMessage}\n                onToggleReplies={handleToggleReplies}\n                onReply={handleReply}\n              />\n              {message.expanded && (\n                <MessageReplies\n                  replies={message.replies || []}\n                  users={users}\n                  currentUser={currentUser}\n                />\n              )}\n            </MessageWrapper>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      \n      {replyToMessage && (\n        <ReplyModal\n          isOpen={true}\n          onClose={() => setReplyToMessage(null)}\n          onSubmit={handleSendReply}\n          parentMessage={replyToMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}