{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, addChannel, removeChannel, updateChannelUnreadCount, setError } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies, deleteMessage, updateMessage, toggleExpanded } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c8 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c9 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c10 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c11 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users,\n    channelMessages\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users,\n    channelMessages: activeChannelId ? state.messages.messagesByChannel[activeChannelId] || [] : []\n  }));\n\n  // Get active channel\n  const activeChannel = useMemo(() => {\n    if (!activeChannelId) return undefined;\n    return channels.find(channel => channel.id === activeChannelId);\n  }, [channels, activeChannelId]);\n\n  // Handle channel switching\n  const handleChannelSwitch = useCallback(async targetChannelId => {\n    if (isChannelSwitching.current || targetChannelId === activeChannelId) return;\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // 1. Cleanup old connection and state\n      if (activeChannelId) {\n        await wsService.disconnect();\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: []\n        }));\n      }\n\n      // 2. Set new channel\n      dispatch(setActiveChannel(targetChannelId));\n\n      // 3. Fetch new channel data\n      const [messages, channelUsers] = await Promise.all([getChannelMessages(targetChannelId), getChannelUsers(targetChannelId)]);\n\n      // 4. Update store with new data\n      dispatch(setMessages({\n        channelId: targetChannelId,\n        messages: messages.map(message => transformMessage(message))\n      }));\n\n      // Convert users array to object\n      const usersObject = channelUsers.reduce((acc, user) => {\n        acc[user.id] = user;\n        return acc;\n      }, {});\n      dispatch(setUsers(usersObject));\n\n      // 5. Establish new WebSocket connection\n      await wsService.connect(targetChannelId);\n      await wsService.joinChannel(targetChannelId);\n    } catch (error) {\n      console.error('Channel switch failed:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket connection errors\n  const handleConnectionError = useCallback(error => {\n    console.error('WebSocket connection error:', error);\n    dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n  }, [dispatch]);\n\n  // Monitor WebSocket connection status\n  const handleConnectionStatus = useCallback(() => {\n    const status = wsService.getChatSocketState();\n    if (status === WebSocket.OPEN) {\n      dispatch(setError(null));\n    }\n  }, [dispatch]);\n\n  // Set up WebSocket error handling and status monitoring\n  useEffect(() => {\n    wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, [handleConnectionError, handleConnectionStatus]);\n\n  // Handle channel selection from search results\n  const handleSelectMessage = async (targetChannelId, messageId) => {\n    try {\n      if (targetChannelId !== activeChannelId) {\n        await handleChannelSwitch(targetChannelId);\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to the selected message\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n      dispatch(setError('Failed to navigate to message. Please try again.'));\n    }\n  };\n\n  // WebSocket message handler\n  const handleWebSocketMessage = useCallback(message => {\n    console.log('MainLayout received WebSocket message:', message);\n    if (!activeChannelId) return;\n\n    // Check if message is from another channel\n    if ('message' in message && (message.type === 'message' || message.type === 'message_sent' || message.type === 'new_reply' || message.type === 'message_updated') && message.message.channel_id.toString() !== activeChannelId) {\n      console.log('Ignoring message from different channel:', message.message.channel_id, 'current:', activeChannelId);\n      return; // Ignore messages from other channels\n    }\n    switch (message.type) {\n      case 'message':\n      case 'message_sent':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          console.log('Adding new message:', transformedMessage);\n          dispatch(addMessage({\n            channelId: activeChannelId,\n            message: transformedMessage\n          }));\n\n          // Auto-scroll for new messages\n          if (messageListRef.current) {\n            const container = messageListRef.current;\n            const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n            if (isAtBottom) {\n              requestAnimationFrame(() => {\n                container.scrollTop = container.scrollHeight;\n              });\n            }\n          }\n        }\n        break;\n      case 'new_reply':\n        if ('message' in message && message.parentId) {\n          console.log('Adding new reply:', message);\n          const transformedReply = transformMessage(message.message);\n          dispatch(setReplies({\n            channelId: activeChannelId,\n            messageId: message.parentId.toString(),\n            replies: [transformedReply]\n          }));\n\n          // Auto-expand parent message\n          const parentMessage = channelMessages.find(m => m.id === message.parentId);\n          if (parentMessage && !parentMessage.isExpanded) {\n            dispatch(toggleExpanded({\n              channelId: activeChannelId,\n              messageId: message.parentId.toString()\n            }));\n          }\n        }\n        break;\n      case 'message_deleted':\n        dispatch(deleteMessage({\n          channelId: message.channelId,\n          messageId: message.messageId\n        }));\n        break;\n      case 'message_updated':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          dispatch(updateMessage({\n            channelId: transformedMessage.channelId,\n            id: transformedMessage.id,\n            message: transformedMessage\n          }));\n        }\n        break;\n      case 'user_status':\n        dispatch(updateUserStatus({\n          userId: message.user_id,\n          status: message.status\n        }));\n        break;\n      case 'channel_created':\n        dispatch(addChannel(message.channel));\n        break;\n      case 'channel_deleted':\n        dispatch(removeChannel(message.channelId));\n        break;\n      case 'unread_count_updated':\n        dispatch(updateChannelUnreadCount({\n          channelId: message.channelId,\n          count: message.count\n        }));\n        break;\n    }\n  }, [activeChannelId, channelMessages, dispatch]);\n\n  // Set up WebSocket connection and message handling\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [activeChannelId, handleWebSocketMessage]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => {\n            acc[user.id] = user;\n            return acc;\n          }, {});\n          dispatch(setUsers(usersObject));\n          await handleChannelSwitch(firstChannelId);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to load initial data. Please refresh the page.'));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch, handleChannelSwitch]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(targetChannelId => {\n    if (targetChannelId !== activeChannelId) {\n      handleChannelSwitch(targetChannelId).catch(error => {\n        console.error('Error selecting channel:', error);\n        dispatch(setError('Failed to switch channels. Please try again.'));\n      });\n    }\n  }, [activeChannelId, handleChannelSwitch, dispatch]);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n          channel: channel,\n          isActive: channel.id === activeChannelId,\n          onSelect: handleChannelSelect\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: activeChannel && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: activeChannel.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n            children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n              onClick: () => setIsSettingsOpen(true),\n              children: \"Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId,\n        ref: messageListRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), activeChannel && /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannel.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"wlAL+/AuvPSKDX0VnuMaZUIOXD0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c12 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"ChannelHeader\");\n$RefreshReg$(_c9, \"CreateChannelButton\");\n$RefreshReg$(_c10, \"ChannelActions\");\n$RefreshReg$(_c11, \"SettingsButton\");\n$RefreshReg$(_c12, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addChannel","removeChannel","updateChannelUnreadCount","setError","addMessage","setMessages","setReplies","deleteMessage","updateMessage","toggleExpanded","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","transformMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","ChannelHeader","_c8","CreateChannelButton","_c9","ChannelGroup","GroupTitle","h3","textLight","ChannelActions","_c10","SettingsButton","_c11","SearchContainer","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","channelMessages","state","chat","messages","messagesByChannel","activeChannel","undefined","find","channel","id","handleChannelSwitch","targetChannelId","current","disconnect","channelId","channelUsers","Promise","all","map","message","usersObject","reduce","acc","user","connect","joinChannel","console","handleConnectionError","handleConnectionStatus","status","getChatSocketState","WebSocket","OPEN","onError","statusInterval","setInterval","clearInterval","handleSelectMessage","messageId","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","setTimeout","remove","requestAnimationFrame","handleWebSocketMessage","log","type","channel_id","toString","transformedMessage","container","isAtBottom","scrollHeight","scrollTop","clientHeight","parentId","transformedReply","replies","parentMessage","m","isExpanded","userId","user_id","count","unsubscribe","onMessage","handleSearch","query","trim","results","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","fetchInitialData","fetchedChannels","length","firstChannelId","handleChannelSelect","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isActive","onSelect","Object","values","username","ref","isOpen","onClose","_c12","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage,\n  toggleExpanded\n} from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, Message, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\nimport { transformMessage } from '../../../utils/messageTransform';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users, channelMessages } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User },\n    channelMessages: activeChannelId ? state.messages.messagesByChannel[activeChannelId] || [] : []\n  }));\n\n  // Get active channel\n  const activeChannel = useMemo<Channel | undefined>(() => {\n    if (!activeChannelId) return undefined;\n    return channels.find((channel: Channel) => channel.id === activeChannelId);\n  }, [channels, activeChannelId]);\n\n  // Handle channel switching\n  const handleChannelSwitch = useCallback(async (targetChannelId: string): Promise<void> => {\n    if (isChannelSwitching.current || targetChannelId === activeChannelId) return;\n\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n      \n      // 1. Cleanup old connection and state\n      if (activeChannelId) {\n        await wsService.disconnect();\n        dispatch(setMessages({ \n          channelId: activeChannelId, \n          messages: [] \n        }));\n      }\n      \n      // 2. Set new channel\n      dispatch(setActiveChannel(targetChannelId));\n      \n      // 3. Fetch new channel data\n      const [messages, channelUsers] = await Promise.all([\n        getChannelMessages(targetChannelId),\n        getChannelUsers(targetChannelId)\n      ]);\n      \n      // 4. Update store with new data\n      dispatch(setMessages({ \n        channelId: targetChannelId, \n        messages: messages.map((message: Message) => transformMessage(message))\n      }));\n\n      // Convert users array to object\n      const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => {\n        acc[user.id] = user;\n        return acc;\n      }, {});\n      dispatch(setUsers(usersObject));\n      \n      // 5. Establish new WebSocket connection\n      await wsService.connect(targetChannelId);\n      await wsService.joinChannel(targetChannelId);\n      \n    } catch (error) {\n      console.error('Channel switch failed:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket connection errors\n  const handleConnectionError = useCallback((error: Error) => {\n    console.error('WebSocket connection error:', error);\n    dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n  }, [dispatch]);\n\n  // Monitor WebSocket connection status\n  const handleConnectionStatus = useCallback(() => {\n    const status = wsService.getChatSocketState();\n    if (status === WebSocket.OPEN) {\n      dispatch(setError(null));\n    }\n  }, [dispatch]);\n\n  // Set up WebSocket error handling and status monitoring\n  useEffect(() => {\n    wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, [handleConnectionError, handleConnectionStatus]);\n\n  // Handle channel selection from search results\n  const handleSelectMessage = async (targetChannelId: string, messageId: string) => {\n    try {\n      if (targetChannelId !== activeChannelId) {\n        await handleChannelSwitch(targetChannelId);\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to the selected message\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n      dispatch(setError('Failed to navigate to message. Please try again.'));\n    }\n  };\n\n  // WebSocket message handler\n  const handleWebSocketMessage = useCallback((message: WebSocketMessage) => {\n    console.log('MainLayout received WebSocket message:', message);\n\n    if (!activeChannelId) return;\n\n    // Check if message is from another channel\n    if ('message' in message && \n        (message.type === 'message' || message.type === 'message_sent' || \n         message.type === 'new_reply' || message.type === 'message_updated') && \n        message.message.channel_id.toString() !== activeChannelId) {\n      console.log('Ignoring message from different channel:', message.message.channel_id, 'current:', activeChannelId);\n      return; // Ignore messages from other channels\n    }\n\n    switch (message.type) {\n      case 'message':\n      case 'message_sent':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          console.log('Adding new message:', transformedMessage);\n          \n          dispatch(addMessage({\n            channelId: activeChannelId,\n            message: transformedMessage\n          }));\n\n          // Auto-scroll for new messages\n          if (messageListRef.current) {\n            const container = messageListRef.current;\n            const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 100;\n            if (isAtBottom) {\n              requestAnimationFrame(() => {\n                container.scrollTop = container.scrollHeight;\n              });\n            }\n          }\n        }\n        break;\n\n      case 'new_reply':\n        if ('message' in message && message.parentId) {\n          console.log('Adding new reply:', message);\n          const transformedReply = transformMessage(message.message);\n          \n          dispatch(setReplies({\n            channelId: activeChannelId,\n            messageId: message.parentId.toString(),\n            replies: [transformedReply]\n          }));\n\n          // Auto-expand parent message\n          const parentMessage = channelMessages.find(m => m.id === message.parentId);\n          if (parentMessage && !parentMessage.isExpanded) {\n            dispatch(toggleExpanded({\n              channelId: activeChannelId,\n              messageId: message.parentId.toString()\n            }));\n          }\n        }\n        break;\n\n      case 'message_deleted':\n        dispatch(deleteMessage({\n          channelId: message.channelId,\n          messageId: message.messageId\n        }));\n        break;\n\n      case 'message_updated':\n        if ('message' in message) {\n          const transformedMessage = transformMessage(message.message);\n          dispatch(updateMessage({\n            channelId: transformedMessage.channelId,\n            id: transformedMessage.id,\n            message: transformedMessage\n          }));\n        }\n        break;\n\n      case 'user_status':\n        dispatch(updateUserStatus({\n          userId: message.user_id,\n          status: message.status\n        }));\n        break;\n\n      case 'channel_created':\n        dispatch(addChannel(message.channel));\n        break;\n\n      case 'channel_deleted':\n        dispatch(removeChannel(message.channelId));\n        break;\n\n      case 'unread_count_updated':\n        dispatch(updateChannelUnreadCount({\n          channelId: message.channelId,\n          count: message.count\n        }));\n        break;\n    }\n  }, [activeChannelId, channelMessages, dispatch]);\n\n  // Set up WebSocket connection and message handling\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [activeChannelId, handleWebSocketMessage]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => {\n            acc[user.id] = user;\n            return acc;\n          }, {});\n          dispatch(setUsers(usersObject));\n          await handleChannelSwitch(firstChannelId);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to load initial data. Please refresh the page.'));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch, handleChannelSwitch]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback((targetChannelId: string): void => {\n    if (targetChannelId !== activeChannelId) {\n      handleChannelSwitch(targetChannelId).catch(error => {\n        console.error('Error selecting channel:', error);\n        dispatch(setError('Failed to switch channels. Please try again.'));\n      });\n    }\n  }, [activeChannelId, handleChannelSwitch, dispatch]);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton onClick={() => setIsCreateModalOpen(true)}>\n              Create\n            </CreateChannelButton>\n          </ChannelHeader>\n          {channels.map((channel: Channel) => (\n            <ChannelListItem\n              key={channel.id}\n              channel={channel}\n              isActive={channel.id === activeChannelId}\n              onSelect={handleChannelSelect}\n            />\n          ))}\n        </ChannelList>\n        <UserList>\n          <h2>Users</h2>\n          {(Object.values(users) as User[]).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          {activeChannel && (\n            <>\n              <h1>{activeChannel.name}</h1>\n              <ChannelActions>\n                <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                  Settings\n                </SettingsButton>\n              </ChannelActions>\n            </>\n          )}\n        </ChatHeader>\n        <MessageList\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n          ref={messageListRef}\n        />\n        {activeChannel && (\n          <ChatInput>\n            <MessageInput channelId={activeChannel.id} />\n          </ChatInput>\n        )}\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}