{"ast":null,"code":"import { getAuthToken } from '../api/auth';\nconst WS_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\nclass WebSocketService {\n  // 5 seconds\n\n  constructor() {\n    this.chatSocket = null;\n    this.presenceSocket = null;\n    this.messageHandlers = [];\n    this.presenceHandlers = [];\n    this.reconnectTimeout = null;\n    this.RECONNECT_DELAY = 5000;\n    // Bind methods\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.updateStatus = this.updateStatus.bind(this);\n    this.joinChannel = this.joinChannel.bind(this);\n    this.leaveChannel = this.leaveChannel.bind(this);\n  }\n  connect() {\n    const token = getAuthToken();\n    if (!token) {\n      console.error('No auth token available');\n      return;\n    }\n\n    // Connect to chat WebSocket\n    this.chatSocket = new WebSocket(`${WS_URL}/chat?token=${token}`);\n    this.chatSocket.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        this.messageHandlers.forEach(handler => handler(message));\n      } catch (error) {\n        console.error('Failed to parse chat message:', error);\n      }\n    };\n    this.chatSocket.onclose = () => {\n      console.log('Chat WebSocket closed. Attempting to reconnect...');\n      this.scheduleReconnect();\n    };\n\n    // Connect to presence WebSocket\n    this.presenceSocket = new WebSocket(`${WS_URL}/presence?token=${token}`);\n    this.presenceSocket.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        this.presenceHandlers.forEach(handler => handler(message));\n      } catch (error) {\n        console.error('Failed to parse presence message:', error);\n      }\n    };\n    this.presenceSocket.onclose = () => {\n      console.log('Presence WebSocket closed. Attempting to reconnect...');\n      this.scheduleReconnect();\n    };\n  }\n  disconnect() {\n    if (this.chatSocket) {\n      this.chatSocket.close();\n      this.chatSocket = null;\n    }\n    if (this.presenceSocket) {\n      this.presenceSocket.close();\n      this.presenceSocket = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n  }\n  sendMessage(channelId, content) {\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\n      console.error('Chat WebSocket is not connected');\n      return;\n    }\n    const message = {\n      type: 'message',\n      channel_id: channelId,\n      content\n    };\n    this.chatSocket.send(JSON.stringify(message));\n  }\n  updateStatus(status) {\n    if (!this.presenceSocket || this.presenceSocket.readyState !== WebSocket.OPEN) {\n      console.error('Presence WebSocket is not connected');\n      return;\n    }\n    const message = {\n      type: 'status_update',\n      status\n    };\n    this.presenceSocket.send(JSON.stringify(message));\n  }\n  joinChannel(channelId) {\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\n      console.error('Chat WebSocket is not connected');\n      return;\n    }\n    const message = {\n      type: 'join_channel',\n      channel_id: channelId\n    };\n    this.chatSocket.send(JSON.stringify(message));\n  }\n  leaveChannel(channelId) {\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\n      console.error('Chat WebSocket is not connected');\n      return;\n    }\n    const message = {\n      type: 'leave_channel',\n      channel_id: channelId\n    };\n    this.chatSocket.send(JSON.stringify(message));\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onPresence(handler) {\n    this.presenceHandlers.push(handler);\n    return () => {\n      this.presenceHandlers = this.presenceHandlers.filter(h => h !== handler);\n    };\n  }\n  scheduleReconnect() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n    this.reconnectTimeout = setTimeout(() => {\n      console.log('Attempting to reconnect WebSocket...');\n      this.connect();\n    }, this.RECONNECT_DELAY);\n  }\n}\n\n// Create a singleton instance\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WS_URL","process","env","REACT_APP_WS_URL","WebSocketService","constructor","chatSocket","presenceSocket","messageHandlers","presenceHandlers","reconnectTimeout","RECONNECT_DELAY","connect","bind","disconnect","sendMessage","updateStatus","joinChannel","leaveChannel","token","console","error","WebSocket","onmessage","event","message","JSON","parse","data","forEach","handler","onclose","log","scheduleReconnect","close","clearTimeout","channelId","content","readyState","OPEN","type","channel_id","send","stringify","status","onMessage","push","filter","h","onPresence","setTimeout","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { getAuthToken } from '../api/auth';\r\n\r\nconst WS_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\r\n\r\ninterface WebSocketMessage {\r\n  type: string;\r\n  [key: string]: any;\r\n}\r\n\r\nclass WebSocketService {\r\n  private chatSocket: WebSocket | null = null;\r\n  private presenceSocket: WebSocket | null = null;\r\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private presenceHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private readonly RECONNECT_DELAY = 5000; // 5 seconds\r\n\r\n  constructor() {\r\n    // Bind methods\r\n    this.connect = this.connect.bind(this);\r\n    this.disconnect = this.disconnect.bind(this);\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.updateStatus = this.updateStatus.bind(this);\r\n    this.joinChannel = this.joinChannel.bind(this);\r\n    this.leaveChannel = this.leaveChannel.bind(this);\r\n  }\r\n\r\n  public connect(): void {\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      console.error('No auth token available');\r\n      return;\r\n    }\r\n\r\n    // Connect to chat WebSocket\r\n    this.chatSocket = new WebSocket(`${WS_URL}/chat?token=${token}`);\r\n    this.chatSocket.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data);\r\n        this.messageHandlers.forEach(handler => handler(message));\r\n      } catch (error) {\r\n        console.error('Failed to parse chat message:', error);\r\n      }\r\n    };\r\n\r\n    this.chatSocket.onclose = () => {\r\n      console.log('Chat WebSocket closed. Attempting to reconnect...');\r\n      this.scheduleReconnect();\r\n    };\r\n\r\n    // Connect to presence WebSocket\r\n    this.presenceSocket = new WebSocket(`${WS_URL}/presence?token=${token}`);\r\n    this.presenceSocket.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data);\r\n        this.presenceHandlers.forEach(handler => handler(message));\r\n      } catch (error) {\r\n        console.error('Failed to parse presence message:', error);\r\n      }\r\n    };\r\n\r\n    this.presenceSocket.onclose = () => {\r\n      console.log('Presence WebSocket closed. Attempting to reconnect...');\r\n      this.scheduleReconnect();\r\n    };\r\n  }\r\n\r\n  public disconnect(): void {\r\n    if (this.chatSocket) {\r\n      this.chatSocket.close();\r\n      this.chatSocket = null;\r\n    }\r\n    if (this.presenceSocket) {\r\n      this.presenceSocket.close();\r\n      this.presenceSocket = null;\r\n    }\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n  }\r\n\r\n  public sendMessage(channelId: number, content: string): void {\r\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Chat WebSocket is not connected');\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'message',\r\n      channel_id: channelId,\r\n      content\r\n    };\r\n\r\n    this.chatSocket.send(JSON.stringify(message));\r\n  }\r\n\r\n  public updateStatus(status: 'online' | 'offline' | 'away' | 'busy'): void {\r\n    if (!this.presenceSocket || this.presenceSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Presence WebSocket is not connected');\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'status_update',\r\n      status\r\n    };\r\n\r\n    this.presenceSocket.send(JSON.stringify(message));\r\n  }\r\n\r\n  public joinChannel(channelId: number): void {\r\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Chat WebSocket is not connected');\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'join_channel',\r\n      channel_id: channelId\r\n    };\r\n\r\n    this.chatSocket.send(JSON.stringify(message));\r\n  }\r\n\r\n  public leaveChannel(channelId: number): void {\r\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Chat WebSocket is not connected');\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'leave_channel',\r\n      channel_id: channelId\r\n    };\r\n\r\n    this.chatSocket.send(JSON.stringify(message));\r\n  }\r\n\r\n  public onMessage(handler: (message: WebSocketMessage) => void): () => void {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  public onPresence(handler: (message: WebSocketMessage) => void): () => void {\r\n    this.presenceHandlers.push(handler);\r\n    return () => {\r\n      this.presenceHandlers = this.presenceHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  private scheduleReconnect(): void {\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n    }\r\n    this.reconnectTimeout = setTimeout(() => {\r\n      console.log('Attempting to reconnect WebSocket...');\r\n      this.connect();\r\n    }, this.RECONNECT_DELAY);\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst wsService = new WebSocketService();\r\n\r\nexport default wsService; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,aAAa;AAE1C,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,wBAAwB;AAOvE,MAAMC,gBAAgB,CAAC;EAMoB;;EAEzCC,WAAWA,CAAA,EAAG;IAAA,KAPNC,UAAU,GAAqB,IAAI;IAAA,KACnCC,cAAc,GAAqB,IAAI;IAAA,KACvCC,eAAe,GAA4C,EAAE;IAAA,KAC7DC,gBAAgB,GAA4C,EAAE;IAAA,KAC9DC,gBAAgB,GAA0B,IAAI;IAAA,KACrCC,eAAe,GAAG,IAAI;IAGrC;IACA,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;IACtC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACA,UAAU,CAACD,IAAI,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACE,WAAW,GAAG,IAAI,CAACA,WAAW,CAACF,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACG,YAAY,GAAG,IAAI,CAACA,YAAY,CAACH,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACI,WAAW,GAAG,IAAI,CAACA,WAAW,CAACJ,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACK,YAAY,GAAG,IAAI,CAACA,YAAY,CAACL,IAAI,CAAC,IAAI,CAAC;EAClD;EAEOD,OAAOA,CAAA,EAAS;IACrB,MAAMO,KAAK,GAAGpB,YAAY,CAAC,CAAC;IAC5B,IAAI,CAACoB,KAAK,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACxC;IACF;;IAEA;IACA,IAAI,CAACf,UAAU,GAAG,IAAIgB,SAAS,CAAC,GAAGtB,MAAM,eAAemB,KAAK,EAAE,CAAC;IAChE,IAAI,CAACb,UAAU,CAACiB,SAAS,GAAIC,KAAK,IAAK;MACrC,IAAI;QACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACtC,IAAI,CAACpB,eAAe,CAACqB,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACL,OAAO,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAED,IAAI,CAACf,UAAU,CAACyB,OAAO,GAAG,MAAM;MAC9BX,OAAO,CAACY,GAAG,CAAC,mDAAmD,CAAC;MAChE,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC1B,CAAC;;IAED;IACA,IAAI,CAAC1B,cAAc,GAAG,IAAIe,SAAS,CAAC,GAAGtB,MAAM,mBAAmBmB,KAAK,EAAE,CAAC;IACxE,IAAI,CAACZ,cAAc,CAACgB,SAAS,GAAIC,KAAK,IAAK;MACzC,IAAI;QACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACtC,IAAI,CAACnB,gBAAgB,CAACoB,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACL,OAAO,CAAC,CAAC;MAC5D,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;IAED,IAAI,CAACd,cAAc,CAACwB,OAAO,GAAG,MAAM;MAClCX,OAAO,CAACY,GAAG,CAAC,uDAAuD,CAAC;MACpE,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC1B,CAAC;EACH;EAEOnB,UAAUA,CAAA,EAAS;IACxB,IAAI,IAAI,CAACR,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,CAAC4B,KAAK,CAAC,CAAC;MACvB,IAAI,CAAC5B,UAAU,GAAG,IAAI;IACxB;IACA,IAAI,IAAI,CAACC,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAAC2B,KAAK,CAAC,CAAC;MAC3B,IAAI,CAAC3B,cAAc,GAAG,IAAI;IAC5B;IACA,IAAI,IAAI,CAACG,gBAAgB,EAAE;MACzByB,YAAY,CAAC,IAAI,CAACzB,gBAAgB,CAAC;MACnC,IAAI,CAACA,gBAAgB,GAAG,IAAI;IAC9B;EACF;EAEOK,WAAWA,CAACqB,SAAiB,EAAEC,OAAe,EAAQ;IAC3D,IAAI,CAAC,IAAI,CAAC/B,UAAU,IAAI,IAAI,CAACA,UAAU,CAACgC,UAAU,KAAKhB,SAAS,CAACiB,IAAI,EAAE;MACrEnB,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;MAChD;IACF;IAEA,MAAMI,OAAO,GAAG;MACde,IAAI,EAAE,SAAS;MACfC,UAAU,EAAEL,SAAS;MACrBC;IACF,CAAC;IAED,IAAI,CAAC/B,UAAU,CAACoC,IAAI,CAAChB,IAAI,CAACiB,SAAS,CAAClB,OAAO,CAAC,CAAC;EAC/C;EAEOT,YAAYA,CAAC4B,MAA8C,EAAQ;IACxE,IAAI,CAAC,IAAI,CAACrC,cAAc,IAAI,IAAI,CAACA,cAAc,CAAC+B,UAAU,KAAKhB,SAAS,CAACiB,IAAI,EAAE;MAC7EnB,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;MACpD;IACF;IAEA,MAAMI,OAAO,GAAG;MACde,IAAI,EAAE,eAAe;MACrBI;IACF,CAAC;IAED,IAAI,CAACrC,cAAc,CAACmC,IAAI,CAAChB,IAAI,CAACiB,SAAS,CAAClB,OAAO,CAAC,CAAC;EACnD;EAEOR,WAAWA,CAACmB,SAAiB,EAAQ;IAC1C,IAAI,CAAC,IAAI,CAAC9B,UAAU,IAAI,IAAI,CAACA,UAAU,CAACgC,UAAU,KAAKhB,SAAS,CAACiB,IAAI,EAAE;MACrEnB,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;MAChD;IACF;IAEA,MAAMI,OAAO,GAAG;MACde,IAAI,EAAE,cAAc;MACpBC,UAAU,EAAEL;IACd,CAAC;IAED,IAAI,CAAC9B,UAAU,CAACoC,IAAI,CAAChB,IAAI,CAACiB,SAAS,CAAClB,OAAO,CAAC,CAAC;EAC/C;EAEOP,YAAYA,CAACkB,SAAiB,EAAQ;IAC3C,IAAI,CAAC,IAAI,CAAC9B,UAAU,IAAI,IAAI,CAACA,UAAU,CAACgC,UAAU,KAAKhB,SAAS,CAACiB,IAAI,EAAE;MACrEnB,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;MAChD;IACF;IAEA,MAAMI,OAAO,GAAG;MACde,IAAI,EAAE,eAAe;MACrBC,UAAU,EAAEL;IACd,CAAC;IAED,IAAI,CAAC9B,UAAU,CAACoC,IAAI,CAAChB,IAAI,CAACiB,SAAS,CAAClB,OAAO,CAAC,CAAC;EAC/C;EAEOoB,SAASA,CAACf,OAA4C,EAAc;IACzE,IAAI,CAACtB,eAAe,CAACsC,IAAI,CAAChB,OAAO,CAAC;IAClC,OAAO,MAAM;MACX,IAAI,CAACtB,eAAe,GAAG,IAAI,CAACA,eAAe,CAACuC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKlB,OAAO,CAAC;IACxE,CAAC;EACH;EAEOmB,UAAUA,CAACnB,OAA4C,EAAc;IAC1E,IAAI,CAACrB,gBAAgB,CAACqC,IAAI,CAAChB,OAAO,CAAC;IACnC,OAAO,MAAM;MACX,IAAI,CAACrB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACsC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKlB,OAAO,CAAC;IAC1E,CAAC;EACH;EAEQG,iBAAiBA,CAAA,EAAS;IAChC,IAAI,IAAI,CAACvB,gBAAgB,EAAE;MACzByB,YAAY,CAAC,IAAI,CAACzB,gBAAgB,CAAC;IACrC;IACA,IAAI,CAACA,gBAAgB,GAAGwC,UAAU,CAAC,MAAM;MACvC9B,OAAO,CAACY,GAAG,CAAC,sCAAsC,CAAC;MACnD,IAAI,CAACpB,OAAO,CAAC,CAAC;IAChB,CAAC,EAAE,IAAI,CAACD,eAAe,CAAC;EAC1B;AACF;;AAEA;AACA,MAAMwC,SAAS,GAAG,IAAI/C,gBAAgB,CAAC,CAAC;AAExC,eAAe+C,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}