{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, setMessages } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { toast } from 'react-toastify';\nimport WebSocketService from '../../../services/websocket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#4a4a4a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #0f0' : '2px solid transparent'};\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s2(/*#__PURE__*/forwardRef(_c5 = _s2((props, ref) => {\n  var _s = $RefreshSig$();\n  _s2();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const containerRef = useRef(null);\n  const selectedMessageRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef(null);\n  const loadedRepliesRef = useRef(new Set());\n  const lastMessageTimestamp = useRef(null);\n  const disableAutoScrollRef = useRef(false);\n  const isInitialLoad = useRef(true);\n  const wasNearBottomRef = useRef(true);\n  const {\n    currentUser,\n    users,\n    activeChannelId\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users,\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Forward the ref to the container\n  useEffect(() => {\n    if (ref && typeof ref === 'object') {\n      ref.current = containerRef.current;\n    }\n  }, [ref]);\n\n  // Check if we're near the bottom of the scroll\n  const isNearBottom = useCallback(() => {\n    if (!containerRef.current) return false;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = containerRef.current;\n    return scrollHeight - scrollTop - clientHeight < 100;\n  }, []);\n\n  // Scroll to selected message with a delay to ensure DOM is ready\n  useEffect(() => {\n    if (selectedMessageId && selectedMessageRef.current) {\n      console.log('[DEBUG] Attempting to scroll to message:', selectedMessageId);\n\n      // Disable auto-scroll while we're scrolling to the message\n      disableAutoScrollRef.current = true;\n      wasNearBottomRef.current = false;\n\n      // Function to attempt scroll\n      const attemptScroll = () => {\n        if (selectedMessageRef.current) {\n          console.log('[DEBUG] Scrolling to message');\n          selectedMessageRef.current.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          return true;\n        }\n        return false;\n      };\n\n      // Try immediately\n      if (!attemptScroll()) {\n        // If immediate attempt fails, try again after a short delay\n        const timeoutId = setTimeout(() => {\n          if (!attemptScroll()) {\n            // If second attempt fails, try one last time after messages should be rendered\n            const finalTimeoutId = setTimeout(attemptScroll, 500);\n            return () => clearTimeout(finalTimeoutId);\n          }\n        }, 100);\n        return () => clearTimeout(timeoutId);\n      }\n    }\n  }, [selectedMessageId]);\n\n  // Load initial messages when channel changes\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const loadInitialMessages = async () => {\n      try {\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = messages.map(transformMessage);\n          const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n          // If we have a selected message, disable auto-scroll before updating messages\n          if (selectedMessageId) {\n            disableAutoScrollRef.current = true;\n            wasNearBottomRef.current = false;\n          }\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: organizedMessages\n          }));\n\n          // Update last message timestamp\n          if (messages.length > 0) {\n            lastMessageTimestamp.current = new Date(messages[messages.length - 1].created_at).getTime();\n          }\n\n          // Connect to WebSocket for this channel\n          WebSocketService.joinChannel(activeChannelId);\n        }\n      } catch (error) {\n        console.error('Error loading initial messages:', error);\n        dispatch(setError('Failed to load messages'));\n      }\n    };\n    loadInitialMessages();\n    setPage(0);\n    setHasMore(true);\n\n    // Only reset scroll lock if we don't have a selected message\n    if (!selectedMessageId) {\n      scrollLockRef.current = null;\n    }\n\n    // Cleanup: leave the WebSocket channel when component unmounts or channel changes\n    return () => {\n      if (activeChannelId) {\n        WebSocketService.leaveChannel(activeChannelId);\n      }\n    };\n  }, [activeChannelId, dispatch, selectedMessageId]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    if (!selectedMessageId) {\n      setPage(0);\n      setHasMore(true);\n      scrollLockRef.current = null;\n      isInitialLoad.current = true;\n      wasNearBottomRef.current = true;\n    }\n  }, [activeChannelId, selectedMessageId]);\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    // If we have a selected message, don't auto-scroll\n    if (selectedMessageId) {\n      console.log('[DEBUG] Selected message exists, skipping auto-scroll');\n      return;\n    }\n\n    // Handle scroll position after loading older messages\n    if (scrollLockRef.current) {\n      console.log('[DEBUG] Restoring scroll position after loading older messages');\n      const {\n        position,\n        height\n      } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      container.scrollTop = newPosition;\n      scrollLockRef.current = null;\n      return;\n    }\n\n    // Handle initial load\n    if (isInitialLoad.current) {\n      console.log('[DEBUG] Initial load, scrolling to bottom');\n      container.scrollTop = container.scrollHeight;\n      isInitialLoad.current = false;\n      wasNearBottomRef.current = true;\n      return;\n    }\n\n    // Handle auto-scroll for new messages\n    if (!disableAutoScrollRef.current && wasNearBottomRef.current) {\n      console.log('[DEBUG] Near bottom and auto-scroll enabled, scrolling to bottom');\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [messages, selectedMessageId]);\n\n  // Reset scroll behavior when search ends (selectedMessageId changes to null)\n  _s(useEffect(_s(() => {\n    _s();\n    const prevSelectedMessageId = useRef(selectedMessageId);\n\n    // Only trigger when going from having a selected message to not having one\n    if (prevSelectedMessageId.current && !selectedMessageId) {\n      console.log('[DEBUG] Search ended, resetting scroll behavior');\n      disableAutoScrollRef.current = false;\n      wasNearBottomRef.current = true;\n\n      // Scroll to bottom after a short delay to ensure messages are rendered\n      const timeoutId = setTimeout(() => {\n        const container = containerRef.current;\n        if (container) {\n          console.log('[DEBUG] Scrolling to bottom after search ended');\n          container.scrollTop = container.scrollHeight;\n        }\n      }, 100);\n      return () => clearTimeout(timeoutId);\n    }\n\n    // Update the ref for the next render\n    prevSelectedMessageId.current = selectedMessageId;\n\n    // When selecting a message, disable auto-scroll\n    if (selectedMessageId) {\n      console.log('[DEBUG] Message selected, disabling auto-scroll');\n      disableAutoScrollRef.current = true;\n      wasNearBottomRef.current = false;\n    }\n  }, \"pI2DnyYdJ/KLv7+567UfY6HQ2aQ=\"), [selectedMessageId]), \"pI2DnyYdJ/KLv7+567UfY6HQ2aQ=\");\n\n  // Handle scroll events\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    const isAtBottom = container.scrollHeight - container.scrollTop - container.clientHeight < 100;\n\n    // Update wasNearBottom state if we're not in a search\n    if (!selectedMessageId) {\n      wasNearBottomRef.current = isAtBottom;\n      if (isAtBottom) {\n        console.log('[DEBUG] User scrolled to bottom, enabling auto-scroll');\n        disableAutoScrollRef.current = false;\n      }\n    }\n\n    // Handle infinite loading\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore, selectedMessageId]);\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n\n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => msg.replyCount > 0 && !msg.repliesLoaded && !msg.parentId && !loadedRepliesRef.current.has(msg.id));\n      if (messagesToLoadReplies.length === 0) return;\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => msg.id === message.id ? {\n              ...msg,\n              repliesLoaded: true,\n              replies: transformedReplies,\n              isExpanded: msg.isExpanded || false\n            } : msg)\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = messages => {\n    const mainMessages = [];\n    const repliesByParentId = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n    return mainMessages;\n  };\n  const handleDeleteMessage = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: activeChannelId,\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleToggleReplies = async messageId => {\n    if (!activeChannelId) return;\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => msg.id === messageId ? {\n            ...msg,\n            repliesLoaded: true,\n            replies: transformedReplies,\n            isExpanded: true // Auto-expand after loading replies\n          } : msg)\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({\n      channelId: activeChannelId,\n      messageId\n    }));\n  };\n  const handleReply = messageId => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n  const handleSendReply = async content => {\n    if (!replyToMessage || !activeChannelId) return;\n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n\n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => msg.id === replyToMessage.id ? {\n          ...msg,\n          replyCount: (msg.replyCount || 0) + 1,\n          isExpanded: true,\n          repliesLoaded: true,\n          replies: [...(msg.replies || []), transformedReply]\n        } : msg)\n      }));\n\n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      onScroll: handleScroll,\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: sortedMessages.map(message => {\n          var _users$message$userId;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(MessageWrapper, {\n              $isSelected: message.id === selectedMessageId,\n              ref: message.id === selectedMessageId ? selectedMessageRef : undefined,\n              onClick: () => console.log('[DEBUG] Message clicked:', message.id),\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                content: message.content,\n                sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n                timestamp: message.createdAt,\n                userId: message.userId,\n                currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n                onDelete: () => handleDeleteMessage(message.id),\n                replyCount: message.replyCount,\n                isExpanded: message.isExpanded || false,\n                onToggleReplies: () => handleToggleReplies(message.id),\n                onReply: () => handleReply(message.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 15\n            }, this), message.isExpanded && message.replyCount > 0 && /*#__PURE__*/_jsxDEV(MessageReplies, {\n              parentId: message.id,\n              replies: message.replies || [],\n              isExpanded: message.isExpanded,\n              onToggleReplies: handleToggleReplies,\n              onDelete: handleDeleteMessage,\n              currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 17\n            }, this)]\n          }, message.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 7\n    }, this), replyToMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: true,\n      onClose: () => setReplyToMessage(null),\n      onSubmit: handleSendReply,\n      parentMessage: replyToMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"FKjIbP2OscwNrHvJ+UM+S+3otzU=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"FKjIbP2OscwNrHvJ+UM+S+3otzU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","useMemo","styled","useSelector","useDispatch","transformMessage","Message","MessageReplies","ReplyModal","deleteMessage","toggleExpanded","prependMessages","setMessages","deleteMessageApi","getChannelMessages","createReply","getReplies","setError","toast","WebSocketService","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s2","_c5","ref","_s","$RefreshSig$","messages","selectedMessageId","dispatch","containerRef","selectedMessageRef","isLoadingMore","setIsLoadingMore","hasMore","setHasMore","page","setPage","replyToMessage","setReplyToMessage","PAGE_SIZE","scrollLockRef","loadedRepliesRef","Set","lastMessageTimestamp","disableAutoScrollRef","isInitialLoad","wasNearBottomRef","currentUser","users","activeChannelId","state","auth","user","chat","current","isNearBottom","scrollTop","scrollHeight","clientHeight","console","log","attemptScroll","scrollIntoView","behavior","block","timeoutId","setTimeout","finalTimeoutId","clearTimeout","loadInitialMessages","length","transformedMessages","map","organizedMessages","organizeMessagesAndReplies","channelId","Date","created_at","getTime","joinChannel","error","leaveChannel","loadMoreMessages","container","position","height","olderMessages","p","newPosition","prevSelectedMessageId","handleScroll","event","currentTarget","isAtBottom","sortedMessages","mainMessages","filter","msg","parentId","sort","a","b","timeA","createdAt","timeB","loadRepliesForMessages","messagesToLoadReplies","replyCount","repliesLoaded","has","id","message","add","replies","transformedReplies","isExpanded","delete","clear","repliesByParentId","forEach","push","handleDeleteMessage","messageId","handleToggleReplies","find","m","handleReply","handleSendReply","content","reply","transformedReply","success","children","onScroll","fileName","_jsxFileName","lineNumber","columnNumber","_users$message$userId","undefined","onClick","sender","userId","username","timestamp","currentUserId","onDelete","onToggleReplies","onReply","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User, Message as ApiMessage } from '../../../types';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies, updateMessage } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { toast } from 'react-toastify';\nimport WebSocketService from '../../../services/websocket';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#4a4a4a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #0f0' : '2px solid transparent'};\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const dispatch = useDispatch();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState<StoreMessage | null>(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef<{ position: number; height: number } | null>(null);\n  const loadedRepliesRef = useRef<Set<string>>(new Set());\n  const lastMessageTimestamp = useRef<number | null>(null);\n  const disableAutoScrollRef = useRef(false);\n  const isInitialLoad = useRef(true);\n  const wasNearBottomRef = useRef(true);\n\n  const { currentUser, users, activeChannelId } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User },\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Forward the ref to the container\n  useEffect(() => {\n    if (ref && typeof ref === 'object') {\n      ref.current = containerRef.current;\n    }\n  }, [ref]);\n\n  // Check if we're near the bottom of the scroll\n  const isNearBottom = useCallback(() => {\n    if (!containerRef.current) return false;\n    const { scrollTop, scrollHeight, clientHeight } = containerRef.current;\n    return scrollHeight - scrollTop - clientHeight < 100;\n  }, []);\n\n  // Scroll to selected message with a delay to ensure DOM is ready\n  useEffect(() => {\n    if (selectedMessageId && selectedMessageRef.current) {\n      console.log('[DEBUG] Attempting to scroll to message:', selectedMessageId);\n      \n      // Disable auto-scroll while we're scrolling to the message\n      disableAutoScrollRef.current = true;\n      wasNearBottomRef.current = false;\n      \n      // Function to attempt scroll\n      const attemptScroll = () => {\n        if (selectedMessageRef.current) {\n          console.log('[DEBUG] Scrolling to message');\n          selectedMessageRef.current.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          return true;\n        }\n        return false;\n      };\n\n      // Try immediately\n      if (!attemptScroll()) {\n        // If immediate attempt fails, try again after a short delay\n        const timeoutId = setTimeout(() => {\n          if (!attemptScroll()) {\n            // If second attempt fails, try one last time after messages should be rendered\n            const finalTimeoutId = setTimeout(attemptScroll, 500);\n            return () => clearTimeout(finalTimeoutId);\n          }\n        }, 100);\n        return () => clearTimeout(timeoutId);\n      }\n    }\n  }, [selectedMessageId]);\n\n  // Load initial messages when channel changes\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const loadInitialMessages = async () => {\n      try {\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = messages.map(transformMessage);\n          const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n          \n          // If we have a selected message, disable auto-scroll before updating messages\n          if (selectedMessageId) {\n            disableAutoScrollRef.current = true;\n            wasNearBottomRef.current = false;\n          }\n          \n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: organizedMessages\n          }));\n          \n          // Update last message timestamp\n          if (messages.length > 0) {\n            lastMessageTimestamp.current = new Date(messages[messages.length - 1].created_at).getTime();\n          }\n\n          // Connect to WebSocket for this channel\n          WebSocketService.joinChannel(activeChannelId);\n        }\n      } catch (error) {\n        console.error('Error loading initial messages:', error);\n        dispatch(setError('Failed to load messages'));\n      }\n    };\n\n    loadInitialMessages();\n    setPage(0);\n    setHasMore(true);\n    \n    // Only reset scroll lock if we don't have a selected message\n    if (!selectedMessageId) {\n      scrollLockRef.current = null;\n    }\n\n    // Cleanup: leave the WebSocket channel when component unmounts or channel changes\n    return () => {\n      if (activeChannelId) {\n        WebSocketService.leaveChannel(activeChannelId);\n      }\n    };\n  }, [activeChannelId, dispatch, selectedMessageId]);\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    if (!selectedMessageId) {\n      setPage(0);\n      setHasMore(true);\n      scrollLockRef.current = null;\n      isInitialLoad.current = true;\n      wasNearBottomRef.current = true;\n    }\n  }, [activeChannelId, selectedMessageId]);\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      \n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n\n      if (olderMessages.length > 0) {\n        // Transform messages and organize them\n        const transformedMessages = olderMessages.map(transformMessage);\n        const organizedMessages = organizeMessagesAndReplies(transformedMessages);\n\n        // Prepend the organized messages\n        dispatch(prependMessages({ \n          channelId: activeChannelId, \n          messages: organizedMessages\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    // If we have a selected message, don't auto-scroll\n    if (selectedMessageId) {\n      console.log('[DEBUG] Selected message exists, skipping auto-scroll');\n      return;\n    }\n\n    // Handle scroll position after loading older messages\n    if (scrollLockRef.current) {\n      console.log('[DEBUG] Restoring scroll position after loading older messages');\n      const { position, height } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      container.scrollTop = newPosition;\n      scrollLockRef.current = null;\n      return;\n    }\n\n    // Handle initial load\n    if (isInitialLoad.current) {\n      console.log('[DEBUG] Initial load, scrolling to bottom');\n      container.scrollTop = container.scrollHeight;\n      isInitialLoad.current = false;\n      wasNearBottomRef.current = true;\n      return;\n    }\n\n    // Handle auto-scroll for new messages\n    if (!disableAutoScrollRef.current && wasNearBottomRef.current) {\n      console.log('[DEBUG] Near bottom and auto-scroll enabled, scrolling to bottom');\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [messages, selectedMessageId]);\n\n  // Reset scroll behavior when search ends (selectedMessageId changes to null)\n  useEffect(() => {\n    const prevSelectedMessageId = useRef<string | null>(selectedMessageId);\n\n    // Only trigger when going from having a selected message to not having one\n    if (prevSelectedMessageId.current && !selectedMessageId) {\n      console.log('[DEBUG] Search ended, resetting scroll behavior');\n      disableAutoScrollRef.current = false;\n      wasNearBottomRef.current = true;\n      \n      // Scroll to bottom after a short delay to ensure messages are rendered\n      const timeoutId = setTimeout(() => {\n        const container = containerRef.current;\n        if (container) {\n          console.log('[DEBUG] Scrolling to bottom after search ended');\n          container.scrollTop = container.scrollHeight;\n        }\n      }, 100);\n\n      return () => clearTimeout(timeoutId);\n    }\n\n    // Update the ref for the next render\n    prevSelectedMessageId.current = selectedMessageId;\n\n    // When selecting a message, disable auto-scroll\n    if (selectedMessageId) {\n      console.log('[DEBUG] Message selected, disabling auto-scroll');\n      disableAutoScrollRef.current = true;\n      wasNearBottomRef.current = false;\n    }\n  }, [selectedMessageId]);\n\n  // Handle scroll events\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    const isAtBottom = container.scrollHeight - container.scrollTop - container.clientHeight < 100;\n    \n    // Update wasNearBottom state if we're not in a search\n    if (!selectedMessageId) {\n      wasNearBottomRef.current = isAtBottom;\n      if (isAtBottom) {\n        console.log('[DEBUG] User scrolled to bottom, enabling auto-scroll');\n        disableAutoScrollRef.current = false;\n      }\n    }\n\n    // Handle infinite loading\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore, selectedMessageId]);\n\n  // Sort messages by creation time to ensure newest is at the bottom\n  const sortedMessages = useMemo(() => {\n    // Filter out messages that are replies (have parentId)\n    const mainMessages = messages.filter(msg => !msg.parentId);\n    \n    return [...mainMessages].sort((a, b) => {\n      const timeA = new Date(a.createdAt).getTime();\n      const timeB = new Date(b.createdAt).getTime();\n      return timeA - timeB;\n    });\n  }, [messages]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n      \n      // Get all messages that have replies but haven't loaded them yet\n      const messagesToLoadReplies = messages.filter(msg => \n        msg.replyCount > 0 && \n        !msg.repliesLoaded && \n        !msg.parentId && \n        !loadedRepliesRef.current.has(msg.id)\n      );\n\n      if (messagesToLoadReplies.length === 0) return;\n\n      for (const message of messagesToLoadReplies) {\n        try {\n          loadedRepliesRef.current.add(message.id);\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          \n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: messages.map(msg => \n              msg.id === message.id \n                ? { \n                    ...msg, \n                    repliesLoaded: true,\n                    replies: transformedReplies,\n                    isExpanded: msg.isExpanded || false\n                  } \n                : msg\n            )\n          }));\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n          loadedRepliesRef.current.delete(message.id); // Remove from loaded set if failed\n        }\n      }\n    };\n\n    // Clear the loaded replies set when channel changes\n    if (activeChannelId) {\n      loadedRepliesRef.current.clear();\n    }\n\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = (messages: StoreMessage[]) => {\n    const mainMessages: StoreMessage[] = [];\n    const repliesByParentId: { [key: string]: StoreMessage[] } = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n\n    return mainMessages;\n  };\n\n  const handleDeleteMessage = async (messageId: string) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: activeChannelId, messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleToggleReplies = async (messageId: string) => {\n    if (!activeChannelId) return;\n\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If we're expanding and replies aren't loaded yet, load them first\n    if (!message.isExpanded && message.replyCount > 0 && !message.repliesLoaded) {\n      try {\n        const replies = await getReplies(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        \n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: messages.map(msg => \n            msg.id === messageId \n              ? {\n                  ...msg,\n                  repliesLoaded: true,\n                  replies: transformedReplies,\n                  isExpanded: true // Auto-expand after loading replies\n                }\n              : msg\n          )\n        }));\n        return; // Return early since we've already expanded\n      } catch (error) {\n        console.error('Error loading replies:', error);\n        return;\n      }\n    }\n\n    // Toggle expanded state\n    dispatch(toggleExpanded({ channelId: activeChannelId, messageId }));\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!replyToMessage || !activeChannelId) return;\n    \n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      \n      // Update the parent message and its replies in a single dispatch\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => \n          msg.id === replyToMessage.id \n            ? {\n                ...msg,\n                replyCount: (msg.replyCount || 0) + 1,\n                isExpanded: true,\n                repliesLoaded: true,\n                replies: [...(msg.replies || []), transformedReply]\n              }\n            : msg\n        )\n      }));\n      \n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef} onScroll={handleScroll}>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        <MessagesWrapper>\n          {sortedMessages.map(message => (\n            <React.Fragment key={message.id}>\n              <MessageWrapper\n                $isSelected={message.id === selectedMessageId}\n                ref={message.id === selectedMessageId ? selectedMessageRef : undefined}\n                onClick={() => console.log('[DEBUG] Message clicked:', message.id)}\n              >\n                <Message\n                  content={message.content}\n                  sender={users[message.userId]?.username || message.userId}\n                  timestamp={message.createdAt}\n                  userId={message.userId}\n                  currentUserId={currentUser?.id}\n                  onDelete={() => handleDeleteMessage(message.id)}\n                  replyCount={message.replyCount}\n                  isExpanded={message.isExpanded || false}\n                  onToggleReplies={() => handleToggleReplies(message.id)}\n                  onReply={() => handleReply(message.id)}\n                />\n              </MessageWrapper>\n              {message.isExpanded && message.replyCount > 0 && (\n                <MessageReplies \n                  parentId={message.id}\n                  replies={message.replies || []}\n                  isExpanded={message.isExpanded}\n                  onToggleReplies={handleToggleReplies}\n                  onDelete={handleDeleteMessage}\n                  currentUserId={currentUser?.id}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      \n      {replyToMessage && (\n        <ReplyModal\n          isOpen={true}\n          onClose={() => setReplyToMessage(null)}\n          onSubmit={handleSendReply}\n          parentMessage={replyToMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}