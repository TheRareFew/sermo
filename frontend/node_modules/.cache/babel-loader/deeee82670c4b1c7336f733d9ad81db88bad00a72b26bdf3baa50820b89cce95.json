{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c3 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c4 = _s((props, ref) => {\n  var _messages, _messages$, _messages$3;\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const lastMessageRef = useRef(((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.id) || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef(((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) || null);\n  const isInitialRender = useRef(true);\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    var _messages$2;\n    if (!containerRef.current) return;\n    const newChannelId = (_messages$2 = messages[0]) === null || _messages$2 === void 0 ? void 0 : _messages$2.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      var _messages2;\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = (_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n    isInitialRender.current = false;\n  }, [(_messages$3 = messages[0]) === null || _messages$3 === void 0 ? void 0 : _messages$3.channelId]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    var _messages3, _messages4, _messages5;\n    if (!containerRef.current || isInitialRender.current) return;\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = ((_messages3 = messages[messages.length - 1]) === null || _messages3 === void 0 ? void 0 : _messages3.id) !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && ((_messages4 = messages[messages.length - 1]) === null || _messages4 === void 0 ? void 0 : _messages4.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    }\n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || isNewMessage && isAtBottom) {\n      container.scrollTop = container.scrollHeight;\n    }\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = (_messages5 = messages[messages.length - 1]) === null || _messages5 === void 0 ? void 0 : _messages5.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = messageId => {\n    console.log('Toggle replies:', messageId);\n  };\n  const handleReply = messageId => {\n    console.log('Reply to message:', messageId);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: [...messages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()).map(message => {\n        var _users$message$userId;\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          $isSelected: message.id === selectedMessageId,\n          \"data-message-id\": message.id,\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            content: message.content,\n            sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n            timestamp: message.createdAt,\n            userId: message.userId,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            onDelete: () => handleDeleteMessage(message.id),\n            replyCount: message.replyCount || 0,\n            isExpanded: message.isExpanded || false,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onReply: () => handleReply(message.id),\n            isReply: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), message.isExpanded && message.replies && /*#__PURE__*/_jsxDEV(MessageReplies, {\n            parentId: message.id,\n            replies: message.replies,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            isExpanded: message.isExpanded,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onDelete: handleDeleteMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}, \"tXpCzkkci+LJgpqyTCsqHoDVEtA=\", false, function () {\n  return [useSelector];\n})), \"tXpCzkkci+LJgpqyTCsqHoDVEtA=\", false, function () {\n  return [useSelector];\n});\n_c5 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"MessageWrapper\");\n$RefreshReg$(_c4, \"MessageList$forwardRef\");\n$RefreshReg$(_c5, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","styled","useSelector","Message","MessageReplies","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","MessageWrapper","$isSelected","_c3","MessageList","_s","_c4","ref","_messages","_messages$","_messages$3","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","lastMessageRef","length","id","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","isUserScrolling","currentChannelRef","channelId","isInitialRender","currentUser","users","state","auth","user","chat","current","clearTimeout","_messages$2","newChannelId","channelChanged","_messages2","requestAnimationFrame","scrollTop","scrollHeight","setTimeout","container","scrollTimeout","handleScroll","addEventListener","removeEventListener","_messages3","_messages4","_messages5","isAtBottom","clientHeight","hasNewMessages","isNewMessage","isOwnMessage","userId","messageElement","querySelector","scrollIntoView","behavior","block","classList","add","remove","handleDeleteMessage","messageId","console","log","handleToggleReplies","handleReply","children","sort","a","b","Date","createdAt","getTime","map","message","_users$message$userId","content","sender","username","timestamp","currentUserId","onDelete","replyCount","isExpanded","onToggleReplies","onReply","isReply","fileName","_jsxFileName","lineNumber","columnNumber","replies","parentId","_c5","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message, { ChatMessageProps } from '../Message';\nimport MessageReplies from '../MessageReplies';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const lastMessageRef = useRef<string | null>(messages[messages.length - 1]?.id || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef<string | null>(messages[0]?.channelId || null);\n  const isInitialRender = useRef(true);\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const newChannelId = messages[0]?.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    \n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = messages[messages.length - 1]?.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n\n    isInitialRender.current = false;\n  }, [messages[0]?.channelId]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current || isInitialRender.current) return;\n\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = messages[messages.length - 1]?.id !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && messages[messages.length - 1]?.userId === currentUser?.id;\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(\n        `[data-message-id=\"${selectedMessageId}\"]`\n      ) as HTMLElement;\n      \n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        \n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        \n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    } \n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || (isNewMessage && isAtBottom)) {\n      container.scrollTop = container.scrollHeight;\n    }\n\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = messages[messages.length - 1]?.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser?.id]);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    console.log('Toggle replies:', messageId);\n  };\n\n  const handleReply = (messageId: string) => {\n    console.log('Reply to message:', messageId);\n  };\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      <MessagesWrapper>\n        {[...messages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()).map(message => (\n          <MessageWrapper\n            key={message.id}\n            $isSelected={message.id === selectedMessageId}\n            data-message-id={message.id}\n          >\n            <Message\n              content={message.content}\n              sender={users[message.userId]?.username || message.userId}\n              timestamp={message.createdAt}\n              userId={message.userId}\n              currentUserId={currentUser?.id}\n              onDelete={() => handleDeleteMessage(message.id)}\n              replyCount={message.replyCount || 0}\n              isExpanded={message.isExpanded || false}\n              onToggleReplies={() => handleToggleReplies(message.id)}\n              onReply={() => handleReply(message.id)}\n              isReply={false}\n            />\n            {message.isExpanded && message.replies && (\n              <MessageReplies\n                parentId={message.id}\n                replies={message.replies}\n                currentUserId={currentUser?.id}\n                isExpanded={message.isExpanded}\n                onToggleReplies={() => handleToggleReplies(message.id)}\n                onDelete={handleDeleteMessage}\n              />\n            )}\n          </MessageWrapper>\n        ))}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}