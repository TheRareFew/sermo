{"ast":null,"code":"import { apiRequest, API_URL } from './utils';\nimport { getAuthToken } from './auth';\nexport class FileUploadError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.name = 'FileUploadError';\n  }\n}\n\n/**\n * Uploads a file to the server\n * @param file The file to upload\n * @param messageId Optional message ID to attach the file to\n * @returns Promise<FileResponse>\n * @throws {FileUploadError} When upload fails with specific error details\n */\nexport const uploadFile = async (file, messageId) => {\n  console.log(`Uploading file ${file.name}...`);\n\n  // Validate file size\n  if (file.size > 50 * 1024 * 1024) {\n    throw new FileUploadError('File size exceeds 50MB limit', 'FILE_TOO_LARGE');\n  }\n\n  // Validate file type\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\n  if (!allowedTypes.includes(file.type)) {\n    throw new FileUploadError('File type not supported. Allowed types: jpg, png, gif, pdf, txt', 'INVALID_FILE_TYPE');\n  }\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Always send message_id as a string in form data\n    formData.append('message_id', messageId ? messageId.toString() : '');\n    const token = getAuthToken();\n    if (!token) {\n      throw new FileUploadError('Authentication required. Please log in.', 'AUTH_ERROR');\n    }\n\n    // Send the upload request\n    const response = await fetch(`${API_URL}/files/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: formData\n    });\n    if (!response.ok) {\n      let errorMessage;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.detail || 'Unknown error occurred';\n      } catch {\n        errorMessage = (await response.text()) || 'Unknown error occurred';\n      }\n      console.error('Upload failed:', errorMessage);\n      if (response.status === 413) {\n        throw new FileUploadError('File size too large for server. Maximum size: 50MB', 'SERVER_FILE_TOO_LARGE');\n      }\n      if (response.status === 415) {\n        throw new FileUploadError('File type not accepted by server', 'SERVER_INVALID_TYPE');\n      }\n      if (response.status === 401) {\n        throw new FileUploadError('Authentication error. Please try logging in again.', 'AUTH_ERROR');\n      }\n      if (response.status === 503) {\n        throw new FileUploadError('Server is temporarily unavailable. Please try again later.', 'SERVER_ERROR');\n      }\n      if (response.status === 500) {\n        throw new FileUploadError(`Server error: ${errorMessage}`, 'SERVER_ERROR');\n      }\n      throw new FileUploadError(`Upload failed: ${errorMessage}`, 'UPLOAD_FAILED');\n    }\n    const responseData = await response.json();\n    console.log('File uploaded successfully:', responseData);\n    return responseData;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    if (error instanceof FileUploadError) {\n      throw error;\n    }\n    if (error instanceof TypeError && error.message.includes('NetworkError')) {\n      throw new FileUploadError('Network error occurred. Please check your connection and try again.', 'NETWORK_ERROR');\n    }\n\n    // Generic error case\n    throw new FileUploadError('Failed to upload file. Please try again.', 'UPLOAD_FAILED');\n  }\n};\n\n/**\n * Updates a file's message ID\n * @param fileId The ID of the file to update\n * @param messageId The ID of the message to associate with the file\n * @returns Promise<FileResponse>\n */\nexport const updateFileMessage = async (fileId, messageId) => {\n  try {\n    const response = await apiRequest(`/files/${fileId}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        message_id: messageId\n      })\n    });\n    console.log('File updated successfully:', response);\n    return response;\n  } catch (error) {\n    console.error('Error updating file:', error);\n    throw new FileUploadError('Failed to update file. Please try again.', 'UPDATE_FAILED');\n  }\n};","map":{"version":3,"names":["apiRequest","API_URL","getAuthToken","FileUploadError","Error","constructor","message","code","name","uploadFile","file","messageId","console","log","size","allowedTypes","includes","type","formData","FormData","append","toString","token","response","fetch","method","headers","credentials","mode","body","ok","errorMessage","errorData","json","detail","text","error","status","responseData","TypeError","updateFileMessage","fileId","JSON","stringify","message_id"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/files.ts"],"sourcesContent":["import { apiRequest, API_URL } from './utils';\nimport { getAuthToken } from './auth';\n\nexport interface FileResponse {\n  id: number;\n  filename: string;\n  file_type: string;\n  file_path: string;\n  message_id?: number;\n  created_at: string;\n}\n\nexport class FileUploadError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'FileUploadError';\n  }\n}\n\n/**\n * Uploads a file to the server\n * @param file The file to upload\n * @param messageId Optional message ID to attach the file to\n * @returns Promise<FileResponse>\n * @throws {FileUploadError} When upload fails with specific error details\n */\nexport const uploadFile = async (file: File, messageId?: number): Promise<FileResponse> => {\n  console.log(`Uploading file ${file.name}...`);\n  \n  // Validate file size\n  if (file.size > 50 * 1024 * 1024) {\n    throw new FileUploadError(\n      'File size exceeds 50MB limit',\n      'FILE_TOO_LARGE'\n    );\n  }\n\n  // Validate file type\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\n  if (!allowedTypes.includes(file.type)) {\n    throw new FileUploadError(\n      'File type not supported. Allowed types: jpg, png, gif, pdf, txt',\n      'INVALID_FILE_TYPE'\n    );\n  }\n\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Always send message_id as a string in form data\n    formData.append('message_id', messageId ? messageId.toString() : '');\n\n    const token = getAuthToken();\n    if (!token) {\n      throw new FileUploadError(\n        'Authentication required. Please log in.',\n        'AUTH_ERROR'\n      );\n    }\n\n    // Send the upload request\n    const response = await fetch(`${API_URL}/files/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      let errorMessage: string;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.detail || 'Unknown error occurred';\n      } catch {\n        errorMessage = await response.text() || 'Unknown error occurred';\n      }\n      console.error('Upload failed:', errorMessage);\n      \n      if (response.status === 413) {\n        throw new FileUploadError(\n          'File size too large for server. Maximum size: 50MB',\n          'SERVER_FILE_TOO_LARGE'\n        );\n      }\n      if (response.status === 415) {\n        throw new FileUploadError(\n          'File type not accepted by server',\n          'SERVER_INVALID_TYPE'\n        );\n      }\n      if (response.status === 401) {\n        throw new FileUploadError(\n          'Authentication error. Please try logging in again.',\n          'AUTH_ERROR'\n        );\n      }\n      if (response.status === 503) {\n        throw new FileUploadError(\n          'Server is temporarily unavailable. Please try again later.',\n          'SERVER_ERROR'\n        );\n      }\n      if (response.status === 500) {\n        throw new FileUploadError(\n          `Server error: ${errorMessage}`,\n          'SERVER_ERROR'\n        );\n      }\n\n      throw new FileUploadError(\n        `Upload failed: ${errorMessage}`,\n        'UPLOAD_FAILED'\n      );\n    }\n\n    const responseData = await response.json();\n    console.log('File uploaded successfully:', responseData);\n    return responseData;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    \n    if (error instanceof FileUploadError) {\n      throw error;\n    }\n\n    if (error instanceof TypeError && error.message.includes('NetworkError')) {\n      throw new FileUploadError(\n        'Network error occurred. Please check your connection and try again.',\n        'NETWORK_ERROR'\n      );\n    }\n\n    // Generic error case\n    throw new FileUploadError(\n      'Failed to upload file. Please try again.',\n      'UPLOAD_FAILED'\n    );\n  }\n}; \n\n/**\n * Updates a file's message ID\n * @param fileId The ID of the file to update\n * @param messageId The ID of the message to associate with the file\n * @returns Promise<FileResponse>\n */\nexport const updateFileMessage = async (fileId: number, messageId: number): Promise<FileResponse> => {\n  try {\n    const response = await apiRequest<FileResponse>(`/files/${fileId}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ message_id: messageId }),\n    });\n    console.log('File updated successfully:', response);\n    return response;\n  } catch (error) {\n    console.error('Error updating file:', error);\n    throw new FileUploadError(\n      'Failed to update file. Please try again.',\n      'UPDATE_FAILED'\n    );\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}