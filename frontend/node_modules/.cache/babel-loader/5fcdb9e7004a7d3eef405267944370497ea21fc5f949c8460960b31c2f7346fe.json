{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, addMessage, setMessages, setUsers, updateUserStatus, setLoading, setError } from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n_c7 = ChatMessages;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c8 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c9 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c10 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c11 = CreateChannelButton;\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\nconst transformMessage = (msg, users) => {\n  return {\n    id: msg.id,\n    content: msg.content,\n    sender: users[msg.sender_id.toString()] || {\n      id: msg.sender_id,\n      username: 'Unknown User',\n      email: '',\n      full_name: 'Unknown User',\n      status: 'offline',\n      last_seen: msg.created_at\n    },\n    channel_id: msg.channel_id,\n    created_at: msg.created_at,\n    updated_at: msg.created_at\n  };\n};\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const channels = useSelector(state => state.chat.channels);\n  const users = useSelector(state => state.chat.users);\n  const messages = useSelector(state => {\n    const channelMessages = state.chat.messages[(activeChannelId === null || activeChannelId === void 0 ? void 0 : activeChannelId.toString()) || ''] || [];\n    return channelMessages;\n  });\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    const messageHandler = data => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id) {\n        const rawMessage = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at || new Date().toISOString(),\n          is_system: data.is_system\n        };\n        const transformedMessage = transformMessage(rawMessage, users);\n        dispatch(addMessage({\n          channelId: rawMessage.channel_id.toString(),\n          message: transformedMessage\n        }));\n        if (rawMessage.channel_id === activeChannelId) {\n          scrollToBottom();\n        }\n      } else if (data.type === 'user_status' && data.user_id && data.status) {\n        dispatch(updateUserStatus({\n          userId: data.user_id.toString(),\n          status: data.status\n        }));\n      }\n    };\n    wsService.on('message', messageHandler);\n    return () => {\n      wsService.off('message', messageHandler);\n    };\n  }, [dispatch, users, activeChannelId]);\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        dispatch(setLoading(true));\n        const channelsData = await getChannels();\n        dispatch(setChannels(channelsData));\n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          dispatch(setActiveChannel(firstChannelId));\n          const [messagesData, usersData] = await Promise.all([getChannelMessages(firstChannelId), getChannelUsers(firstChannelId)]);\n          const userMap = usersData.reduce((acc, user) => {\n            acc[user.id.toString()] = user;\n            return acc;\n          }, {});\n          dispatch(setUsers(userMap));\n          dispatch(setMessages({\n            channelId: firstChannelId.toString(),\n            messages: messagesData.map(msg => transformMessage(msg, userMap))\n          }));\n        }\n      } catch (error) {\n        dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch initial data'));\n      } finally {\n        dispatch(setLoading(false));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]);\n  const handleChannelClick = async channelId => {\n    if (channelId === activeChannelId) return;\n    try {\n      dispatch(setLoading(true));\n      dispatch(setActiveChannel(channelId));\n      const [messagesData, usersData] = await Promise.all([getChannelMessages(channelId), getChannelUsers(channelId)]);\n      const userMap = usersData.reduce((acc, user) => {\n        acc[user.id.toString()] = user;\n        return acc;\n      }, {});\n      dispatch(setUsers(userMap));\n      dispatch(setMessages({\n        channelId: channelId.toString(),\n        messages: messagesData.map(msg => transformMessage(msg, userMap))\n      }));\n      scrollToBottom();\n    } catch (error) {\n      dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch channel data'));\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n          channel: channel,\n          isActive: channel.id === activeChannelId,\n          onClick: () => handleChannelClick(channel.id)\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          user: user\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sermo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        children: [messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `message-${msg.id}`,\n          children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n            content: msg.content,\n            sender: msg.sender.username,\n            timestamp: msg.created_at\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), activeChannelId && /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"xB9mRrRXhtZCoq1juQOtITdp6fI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c12 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatMessages\");\n$RefreshReg$(_c8, \"ChatInput\");\n$RefreshReg$(_c9, \"LogoutButton\");\n$RefreshReg$(_c10, \"ChannelHeader\");\n$RefreshReg$(_c11, \"CreateChannelButton\");\n$RefreshReg$(_c12, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","addMessage","setMessages","setUsers","updateUserStatus","setLoading","setError","Button","ChatMessage","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","wsService","getChannels","getChannelMessages","getChannelUsers","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatMessages","_c7","ChatInput","_c8","LogoutButton","button","error","_c9","ChannelHeader","_c10","CreateChannelButton","_c11","NoChannelMessage","secondary","LoadingMessage","textSecondary","transformMessage","msg","users","id","content","sender","sender_id","toString","username","email","full_name","status","last_seen","created_at","channel_id","updated_at","MainLayout","_s","dispatch","messagesEndRef","isCreateModalOpen","setIsCreateModalOpen","activeChannelId","state","chat","channels","messages","channelMessages","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","messageHandler","data","type","rawMessage","Date","toISOString","is_system","transformedMessage","channelId","message","user_id","userId","on","off","fetchInitialData","channelsData","length","firstChannelId","messagesData","usersData","Promise","all","userMap","reduce","acc","user","map","Error","handleChannelClick","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","channel","isActive","Object","values","timestamp","ref","onClose","_c12","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  addMessage,\n  setMessages,\n  setUsers,\n  updateUserStatus,\n  setLoading,\n  setError\n} from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { Message, WebSocketMessage, User, RootState, ApiMessage } from '../../../types';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n\nconst transformMessage = (msg: ApiMessage, users: { [key: string]: User }): Message => {\n  return {\n    id: msg.id,\n    content: msg.content,\n    sender: users[msg.sender_id.toString()] || {\n      id: msg.sender_id,\n      username: 'Unknown User',\n      email: '',\n      full_name: 'Unknown User',\n      status: 'offline',\n      last_seen: msg.created_at\n    },\n    channel_id: msg.channel_id,\n    created_at: msg.created_at,\n    updated_at: msg.created_at\n  };\n};\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  const activeChannelId = useSelector((state: RootState) => state.chat.activeChannelId);\n  const channels = useSelector((state: RootState) => state.chat.channels);\n  const users = useSelector((state: RootState) => state.chat.users);\n  const messages = useSelector((state: RootState) => {\n    const channelMessages = state.chat.messages[activeChannelId?.toString() || ''] || [];\n    return channelMessages;\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    const messageHandler = (data: WebSocketMessage) => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id) {\n        const rawMessage: ApiMessage = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at || new Date().toISOString(),\n          is_system: data.is_system\n        };\n        \n        const transformedMessage = transformMessage(rawMessage, users);\n        dispatch(addMessage({ \n          channelId: rawMessage.channel_id.toString(), \n          message: transformedMessage \n        }));\n        \n        if (rawMessage.channel_id === activeChannelId) {\n          scrollToBottom();\n        }\n      } else if (data.type === 'user_status' && data.user_id && data.status) {\n        dispatch(updateUserStatus({ userId: data.user_id.toString(), status: data.status }));\n      }\n    };\n\n    wsService.on('message', messageHandler);\n    return () => {\n      wsService.off('message', messageHandler);\n    };\n  }, [dispatch, users, activeChannelId]);\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        dispatch(setLoading(true));\n        const channelsData = await getChannels();\n        dispatch(setChannels(channelsData));\n        \n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          dispatch(setActiveChannel(firstChannelId));\n          \n          const [messagesData, usersData] = await Promise.all([\n            getChannelMessages(firstChannelId),\n            getChannelUsers(firstChannelId)\n          ]);\n          \n          const userMap = usersData.reduce((acc: { [key: string]: User }, user: User) => {\n            acc[user.id.toString()] = user;\n            return acc;\n          }, {});\n          \n          dispatch(setUsers(userMap));\n          dispatch(setMessages({ \n            channelId: firstChannelId.toString(), \n            messages: (messagesData as unknown[] as ApiMessage[]).map(msg => transformMessage(msg, userMap))\n          }));\n        }\n      } catch (error) {\n        dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch initial data'));\n      } finally {\n        dispatch(setLoading(false));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]);\n\n  const handleChannelClick = async (channelId: number) => {\n    if (channelId === activeChannelId) return;\n    \n    try {\n      dispatch(setLoading(true));\n      dispatch(setActiveChannel(channelId));\n      \n      const [messagesData, usersData] = await Promise.all([\n        getChannelMessages(channelId),\n        getChannelUsers(channelId)\n      ]);\n      \n      const userMap = usersData.reduce((acc: { [key: string]: User }, user: User) => {\n        acc[user.id.toString()] = user;\n        return acc;\n      }, {});\n      \n      dispatch(setUsers(userMap));\n      dispatch(setMessages({ \n        channelId: channelId.toString(), \n        messages: (messagesData as unknown[] as ApiMessage[]).map(msg => transformMessage(msg, userMap))\n      }));\n      scrollToBottom();\n    } catch (error) {\n      dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch channel data'));\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton onClick={() => setIsCreateModalOpen(true)}>\n              +\n            </CreateChannelButton>\n          </ChannelHeader>\n          {channels.map(channel => (\n            <ChannelListItem\n              key={channel.id}\n              channel={channel}\n              isActive={channel.id === activeChannelId}\n              onClick={() => handleChannelClick(channel.id)}\n            />\n          ))}\n        </ChannelList>\n        <UserList>\n          <h2>Users</h2>\n          {Object.values(users).map(user => (\n            <UserListItem key={user.id} user={user} />\n          ))}\n        </UserList>\n      </Sidebar>\n      \n      <ChatArea>\n        <ChatHeader>\n          <h1>Sermo</h1>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </ChatHeader>\n        \n        <ChatMessages>\n          {messages.map((msg: Message) => (\n            <div key={msg.id} id={`message-${msg.id}`}>\n              <ChatMessage\n                content={msg.content}\n                sender={msg.sender.username}\n                timestamp={msg.created_at}\n              />\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </ChatMessages>\n        \n        {activeChannelId && (\n          <ChatInput>\n            <MessageInput channelId={activeChannelId} />\n          </ChatInput>\n        )}\n      </ChatArea>\n      \n      {isCreateModalOpen && (\n        <CreateChannelModal onClose={() => setIsCreateModalOpen(false)} />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}