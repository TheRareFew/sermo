{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\common\\\\ChatMessage\\\\index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  margin: 2px 0;\n  padding: 4px 8px;\n  color: ${props => props.isSystem ? props.theme.colors.secondary : props.theme.colors.text};\n  word-wrap: break-word;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${props => props.theme.colors.hover};\n  }\n`;\n_c = MessageContainer;\nconst Timestamp = styled.span`\n  color: ${props => props.theme.colors.secondary};\n`;\n_c2 = Timestamp;\nconst Sender = styled.span`\n  color: ${props => props.theme.colors.primary};\n  font-weight: bold;\n`;\n_c3 = Sender;\nconst formatTime = timestamp => {\n  try {\n    const date = new Date(timestamp);\n    if (isNaN(date.getTime())) {\n      console.error('Invalid timestamp:', timestamp);\n      return '--:--:--';\n    }\n    // Use UTC time consistently to avoid timezone issues\n    const hours = date.getUTCHours().toString().padStart(2, '0');\n    const minutes = date.getUTCMinutes().toString().padStart(2, '0');\n    const seconds = date.getUTCSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  } catch (error) {\n    console.error('Error formatting timestamp:', error);\n    return '--:--:--';\n  }\n};\nconst ChatMessage = ({\n  content,\n  sender,\n  timestamp,\n  isSystem = false\n}) => {\n  const formattedTime = formatTime(timestamp);\n  if (isSystem) {\n    return /*#__PURE__*/_jsxDEV(MessageContainer, {\n      isSystem: true,\n      children: [/*#__PURE__*/_jsxDEV(Timestamp, {\n        children: [\"[\", formattedTime, \"]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), \" *** \", content, \" ***\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MessageContainer, {\n    isSystem: false,\n    children: [/*#__PURE__*/_jsxDEV(Timestamp, {\n      children: [\"[\", formattedTime, \"]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), \" <\", /*#__PURE__*/_jsxDEV(Sender, {\n      children: sender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 52\n    }, this), \"> \", content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_c4 = ChatMessage;\nexport default ChatMessage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MessageContainer\");\n$RefreshReg$(_c2, \"Timestamp\");\n$RefreshReg$(_c3, \"Sender\");\n$RefreshReg$(_c4, \"ChatMessage\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","MessageContainer","div","props","isSystem","theme","colors","secondary","text","hover","_c","Timestamp","span","_c2","Sender","primary","_c3","formatTime","timestamp","date","Date","isNaN","getTime","console","error","hours","getUTCHours","toString","padStart","minutes","getUTCMinutes","seconds","getUTCSeconds","ChatMessage","content","sender","formattedTime","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/common/ChatMessage/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ChatMessageProps {\r\n  content: string;\r\n  sender: string;\r\n  timestamp: string;\r\n  isSystem?: boolean;\r\n}\r\n\r\nconst MessageContainer = styled.div<{ isSystem: boolean }>`\r\n  font-family: 'Courier New', monospace;\r\n  margin: 2px 0;\r\n  padding: 4px 8px;\r\n  color: ${props => props.isSystem ? props.theme.colors.secondary : props.theme.colors.text};\r\n  word-wrap: break-word;\r\n  transition: background-color 0.2s;\r\n\r\n  &:hover {\r\n    background-color: ${props => props.theme.colors.hover};\r\n  }\r\n`;\r\n\r\nconst Timestamp = styled.span`\r\n  color: ${props => props.theme.colors.secondary};\r\n`;\r\n\r\nconst Sender = styled.span`\r\n  color: ${props => props.theme.colors.primary};\r\n  font-weight: bold;\r\n`;\r\n\r\nconst formatTime = (timestamp: string): string => {\r\n  try {\r\n    const date = new Date(timestamp);\r\n    if (isNaN(date.getTime())) {\r\n      console.error('Invalid timestamp:', timestamp);\r\n      return '--:--:--';\r\n    }\r\n    // Use UTC time consistently to avoid timezone issues\r\n    const hours = date.getUTCHours().toString().padStart(2, '0');\r\n    const minutes = date.getUTCMinutes().toString().padStart(2, '0');\r\n    const seconds = date.getUTCSeconds().toString().padStart(2, '0');\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  } catch (error) {\r\n    console.error('Error formatting timestamp:', error);\r\n    return '--:--:--';\r\n  }\r\n};\r\n\r\nconst ChatMessage: React.FC<ChatMessageProps> = ({ content, sender, timestamp, isSystem = false }) => {\r\n  const formattedTime = formatTime(timestamp);\r\n  \r\n  if (isSystem) {\r\n    return (\r\n      <MessageContainer isSystem={true}>\r\n        <Timestamp>[{formattedTime}]</Timestamp> *** {content} ***\r\n      </MessageContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MessageContainer isSystem={false}>\r\n      <Timestamp>[{formattedTime}]</Timestamp> &lt;<Sender>{sender}</Sender>&gt; {content}\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nexport default ChatMessage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}