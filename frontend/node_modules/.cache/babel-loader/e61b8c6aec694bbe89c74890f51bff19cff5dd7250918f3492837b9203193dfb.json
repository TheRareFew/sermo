{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\nexport const login = async credentials => {\n  const response = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to login');\n  }\n  return response.json();\n};\nexport const logout = async token => {\n  const response = await fetch(`${API_URL}/auth/logout`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to logout');\n  }\n};\nexport const refreshToken = async token => {\n  const response = await fetch(`${API_URL}/auth/refresh`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to refresh token');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","detail","logout","token","refreshToken"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/auth.ts"],"sourcesContent":["import { User } from '@store/types';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\r\n\r\ninterface LoginResponse {\r\n  user: User;\r\n  token: string;\r\n}\r\n\r\ninterface LoginCredentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport const login = async (credentials: LoginCredentials): Promise<LoginResponse> => {\r\n  const response = await fetch(`${API_URL}/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to login');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const logout = async (token: string): Promise<void> => {\r\n  const response = await fetch(`${API_URL}/auth/logout`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to logout');\r\n  }\r\n};\r\n\r\nexport const refreshToken = async (token: string): Promise<{ token: string }> => {\r\n  const response = await fetch(`${API_URL}/auth/refresh`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to refresh token');\r\n  }\r\n\r\n  return response.json();\r\n}; "],"mappings":"AAEA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;AAY/E,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAA6B,IAA6B;EACpF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,EAAE;IACpDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;EAClC,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAI,iBAAiB,CAAC;EACpD;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,MAAM,GAAG,MAAOC,KAAa,IAAoB;EAC5D,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,cAAc,EAAE;IACrDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUU,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAI,kBAAkB,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAOD,KAAa,IAAiC;EAC/E,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,eAAe,EAAE;IACtDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUU,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAI,yBAAyB,CAAC;EAC5D;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}