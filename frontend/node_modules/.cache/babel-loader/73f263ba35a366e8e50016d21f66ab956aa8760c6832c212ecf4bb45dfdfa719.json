{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatMessage from '../../common/ChatMessage';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { fetchMessagesStart, fetchMessagesSuccess, fetchMessagesFailure } from '../../../store/messages/messagesSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  gap: 2px;\n  background: ${props => props.theme.colors.background};\n  border: 2px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c = MessageListContainer;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n_c2 = LoadingMessage;\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.error};\n  font-family: 'Courier New', monospace;\n  border: 1px solid ${props => props.theme.colors.error};\n  margin: 8px;\n`;\n_c3 = ErrorMessage;\nconst NoMessagesMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n  border: 1px dashed ${props => props.theme.colors.border};\n  margin: 16px;\n`;\n_c4 = NoMessagesMessage;\nconst MESSAGES_PER_PAGE = 30;\n\n// Transform API message to store message format\nconst transformMessage = msg => {\n  if (!msg || !msg.id || !msg.content || !msg.channel_id || !msg.sender_id) {\n    console.error('Invalid message format:', msg);\n    throw new Error('Invalid message format');\n  }\n  const transformed = {\n    id: String(msg.id),\n    content: msg.content,\n    channelId: String(msg.channel_id),\n    userId: String(msg.sender_id),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at || new Date().toISOString(),\n    updatedAt: msg.created_at || new Date().toISOString()\n  };\n  console.log('Transformed message:', transformed);\n  return transformed;\n};\nconst MessageList = ({\n  channelId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [error, setError] = useState(null);\n  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);\n  const messages = useSelector(state => {\n    var _state$messages;\n    if (!channelId || !((_state$messages = state.messages) !== null && _state$messages !== void 0 && _state$messages.messagesByChannel)) {\n      return [];\n    }\n    const channelMessages = state.messages.messagesByChannel[String(channelId)] || [];\n    console.log('Selected messages for channel', channelId, ':', channelMessages);\n    return channelMessages;\n  });\n  const users = useSelector(state => {\n    var _state$chat;\n    const allUsers = ((_state$chat = state.chat) === null || _state$chat === void 0 ? void 0 : _state$chat.users) || {};\n    console.log('Selected users:', allUsers);\n    return allUsers;\n  });\n  const isLoading = useSelector(state => {\n    var _state$messages2;\n    const loading = ((_state$messages2 = state.messages) === null || _state$messages2 === void 0 ? void 0 : _state$messages2.loading) || false;\n    console.log('Loading state:', loading);\n    return loading;\n  });\n\n  // Initial message load\n  useEffect(() => {\n    if (channelId) {\n      console.log('Loading messages for channel:', channelId);\n      dispatch(fetchMessagesStart());\n      setIsLoadingMore(true);\n      setHasMoreMessages(true);\n      setError(null);\n      setShouldScrollToBottom(true);\n      getChannelMessages(channelId, MESSAGES_PER_PAGE).then(newMessages => {\n        console.log('Received messages from API:', newMessages);\n        if (newMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        const transformedMessages = newMessages.map(transformMessage);\n        console.log('Transformed messages:', transformedMessages);\n        dispatch(fetchMessagesSuccess({\n          channelId: String(channelId),\n          messages: transformedMessages\n        }));\n      }).catch(error => {\n        console.error('Failed to fetch messages:', error);\n        setError('Failed to load messages. Please try again.');\n        dispatch(fetchMessagesFailure(error.message));\n      }).finally(() => {\n        setIsLoadingMore(false);\n      });\n    }\n  }, [channelId, dispatch]);\n\n  // Handle scroll to load more messages\n  const handleScroll = async e => {\n    const div = e.currentTarget;\n    const isNearTop = div.scrollTop <= 100;\n    if (isNearTop && !isLoadingMore && hasMoreMessages && channelId) {\n      setIsLoadingMore(true);\n      setError(null);\n      setShouldScrollToBottom(false);\n      try {\n        const olderMessages = await getChannelMessages(channelId, MESSAGES_PER_PAGE, messages.length);\n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        if (olderMessages.length > 0) {\n          const transformedMessages = olderMessages.map(transformMessage);\n          dispatch(fetchMessagesSuccess({\n            channelId: String(channelId),\n            messages: [...transformedMessages, ...messages]\n          }));\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n        setError('Failed to load more messages. Please try again.');\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0 && shouldScrollToBottom) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, shouldScrollToBottom]);\n\n  // Reset scroll behavior when channel changes\n  useEffect(() => {\n    setShouldScrollToBottom(true);\n  }, [channelId]);\n  if (!channelId) {\n    return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n      children: /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n        children: \"Select a channel to view messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    onScroll: handleScroll,\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this), isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n      children: \"Loading older messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), !hasMoreMessages && messages.length > 0 && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n      children: \"You've reached the beginning of this conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this), messages.map(msg => {\n      var _users$Number;\n      const sender = ((_users$Number = users[Number(msg.userId)]) === null || _users$Number === void 0 ? void 0 : _users$Number.username) || 'Unknown';\n      console.log('Rendering message:', {\n        msg,\n        sender\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: `message-${msg.id}`,\n        children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n          content: msg.content,\n          sender: sender,\n          timestamp: msg.createdAt,\n          isSystem: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this);\n    }), !isLoading && messages.length === 0 && /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n      children: \"No messages yet. Start the conversation!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"ggRwGSCKDfC4Ctsxt4jx6GMUc1Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c5 = MessageList;\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"LoadingMessage\");\n$RefreshReg$(_c3, \"ErrorMessage\");\n$RefreshReg$(_c4, \"NoMessagesMessage\");\n$RefreshReg$(_c5, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","ChatMessage","getChannelMessages","fetchMessagesStart","fetchMessagesSuccess","fetchMessagesFailure","jsxDEV","_jsxDEV","MessageListContainer","div","props","theme","colors","background","border","_c","LoadingMessage","textSecondary","_c2","ErrorMessage","error","_c3","NoMessagesMessage","secondary","_c4","MESSAGES_PER_PAGE","transformMessage","msg","id","content","channel_id","sender_id","console","Error","transformed","String","channelId","userId","reactions","attachments","createdAt","created_at","Date","toISOString","updatedAt","log","MessageList","_s","dispatch","containerRef","isLoadingMore","setIsLoadingMore","hasMoreMessages","setHasMoreMessages","setError","shouldScrollToBottom","setShouldScrollToBottom","messages","state","_state$messages","messagesByChannel","channelMessages","users","_state$chat","allUsers","chat","isLoading","_state$messages2","loading","then","newMessages","length","transformedMessages","map","catch","message","finally","handleScroll","e","currentTarget","isNearTop","scrollTop","olderMessages","current","scrollHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onScroll","_users$Number","sender","Number","username","timestamp","isSystem","_c5","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatMessage from '../../common/ChatMessage';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { fetchMessagesStart, fetchMessagesSuccess, fetchMessagesFailure } from '../../../store/messages/messagesSlice';\nimport { Message as ApiMessage } from '../../../types';\nimport { Message as StoreMessage } from '../../../store/types';\nimport { RootState } from '../../../store/rootReducer';\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  gap: 2px;\n  background: ${props => props.theme.colors.background};\n  border: 2px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.error};\n  font-family: 'Courier New', monospace;\n  border: 1px solid ${props => props.theme.colors.error};\n  margin: 8px;\n`;\n\nconst NoMessagesMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n  border: 1px dashed ${props => props.theme.colors.border};\n  margin: 16px;\n`;\n\ninterface MessageListProps {\n  channelId: number | null;\n}\n\nconst MESSAGES_PER_PAGE = 30;\n\n// Transform API message to store message format\nconst transformMessage = (msg: ApiMessage): StoreMessage => {\n  if (!msg || !msg.id || !msg.content || !msg.channel_id || !msg.sender_id) {\n    console.error('Invalid message format:', msg);\n    throw new Error('Invalid message format');\n  }\n\n  const transformed: StoreMessage = {\n    id: String(msg.id),\n    content: msg.content,\n    channelId: String(msg.channel_id),\n    userId: String(msg.sender_id),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at || new Date().toISOString(),\n    updatedAt: msg.created_at || new Date().toISOString()\n  };\n\n  console.log('Transformed message:', transformed);\n  return transformed;\n};\n\nconst MessageList: React.FC<MessageListProps> = ({ channelId }) => {\n  const dispatch = useDispatch();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);\n\n  const messages = useSelector((state: RootState) => {\n    if (!channelId || !state.messages?.messagesByChannel) {\n      return [];\n    }\n    const channelMessages = state.messages.messagesByChannel[String(channelId)] || [];\n    console.log('Selected messages for channel', channelId, ':', channelMessages);\n    return channelMessages;\n  });\n\n  const users = useSelector((state: RootState) => {\n    const allUsers = state.chat?.users || {};\n    console.log('Selected users:', allUsers);\n    return allUsers;\n  });\n\n  const isLoading = useSelector((state: RootState) => {\n    const loading = state.messages?.loading || false;\n    console.log('Loading state:', loading);\n    return loading;\n  });\n\n  // Initial message load\n  useEffect(() => {\n    if (channelId) {\n      console.log('Loading messages for channel:', channelId);\n      dispatch(fetchMessagesStart());\n      setIsLoadingMore(true);\n      setHasMoreMessages(true);\n      setError(null);\n      setShouldScrollToBottom(true);\n      \n      getChannelMessages(channelId, MESSAGES_PER_PAGE)\n        .then(newMessages => {\n          console.log('Received messages from API:', newMessages);\n          if (newMessages.length < MESSAGES_PER_PAGE) {\n            setHasMoreMessages(false);\n          }\n          const transformedMessages = newMessages.map(transformMessage);\n          console.log('Transformed messages:', transformedMessages);\n          dispatch(fetchMessagesSuccess({ \n            channelId: String(channelId), \n            messages: transformedMessages \n          }));\n        })\n        .catch(error => {\n          console.error('Failed to fetch messages:', error);\n          setError('Failed to load messages. Please try again.');\n          dispatch(fetchMessagesFailure(error.message));\n        })\n        .finally(() => {\n          setIsLoadingMore(false);\n        });\n    }\n  }, [channelId, dispatch]);\n\n  // Handle scroll to load more messages\n  const handleScroll = async (e: React.UIEvent<HTMLDivElement>) => {\n    const div = e.currentTarget;\n    const isNearTop = div.scrollTop <= 100;\n    \n    if (isNearTop && !isLoadingMore && hasMoreMessages && channelId) {\n      setIsLoadingMore(true);\n      setError(null);\n      setShouldScrollToBottom(false);\n      \n      try {\n        const olderMessages = await getChannelMessages(\n          channelId, \n          MESSAGES_PER_PAGE,\n          messages.length\n        );\n        \n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n\n        if (olderMessages.length > 0) {\n          const transformedMessages = olderMessages.map(transformMessage);\n          dispatch(fetchMessagesSuccess({ \n            channelId: String(channelId), \n            messages: [...transformedMessages, ...messages]\n          }));\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n        setError('Failed to load more messages. Please try again.');\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0 && shouldScrollToBottom) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, shouldScrollToBottom]);\n\n  // Reset scroll behavior when channel changes\n  useEffect(() => {\n    setShouldScrollToBottom(true);\n  }, [channelId]);\n\n  if (!channelId) {\n    return (\n      <MessageListContainer>\n        <NoMessagesMessage>\n          Select a channel to view messages\n        </NoMessagesMessage>\n      </MessageListContainer>\n    );\n  }\n\n  return (\n    <MessageListContainer\n      ref={containerRef}\n      onScroll={handleScroll}\n    >\n      {error && (\n        <ErrorMessage>\n          {error}\n        </ErrorMessage>\n      )}\n      \n      {isLoadingMore && (\n        <LoadingMessage>Loading older messages...</LoadingMessage>\n      )}\n      \n      {!hasMoreMessages && messages.length > 0 && (\n        <LoadingMessage>\n          You've reached the beginning of this conversation\n        </LoadingMessage>\n      )}\n\n      {messages.map((msg: StoreMessage) => {\n        const sender = users[Number(msg.userId)]?.username || 'Unknown';\n        console.log('Rendering message:', { msg, sender });\n        return (\n          <div key={msg.id} id={`message-${msg.id}`}>\n            <ChatMessage\n              content={msg.content}\n              sender={sender}\n              timestamp={msg.createdAt}\n              isSystem={false}\n            />\n          </div>\n        );\n      })}\n      \n      {!isLoading && messages.length === 0 && (\n        <NoMessagesMessage>\n          No messages yet. Start the conversation!\n        </NoMessagesMessage>\n      )}\n    </MessageListContainer>\n  );\n};\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}