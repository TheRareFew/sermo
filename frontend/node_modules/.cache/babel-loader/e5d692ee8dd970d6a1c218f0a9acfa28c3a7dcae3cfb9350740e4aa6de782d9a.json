{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? {\n        parentId: msg.parent_id.toString()\n      } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback(msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout;\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n      setIsConnecting(true);\n      console.log('[DEBUG] Connecting to channel:', activeChannelId);\n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n\n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        if (!isMounted) return;\n\n        // After joining, fetch channel users and messages\n        console.log('[DEBUG] Fetching channel data...');\n        const [channelUsers, channelMessages] = await Promise.all([getChannelUsers(activeChannelId), getChannelMessages(activeChannelId)]);\n        if (isMounted) {\n          console.log('[DEBUG] Setting users:', channelUsers);\n          dispatch(setUsers(channelUsers));\n          // Transform messages to match StoreMessage type\n          const transformedMessages = channelMessages.map(transformToStoreMessage);\n          console.log('[DEBUG] Setting messages for channel:', activeChannelId, transformedMessages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n\n          // Scroll to bottom after messages are loaded\n          setTimeout(() => {\n            if (messageListRef.current) {\n              messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n            }\n          }, 100);\n        }\n      } catch (error) {\n        console.error('[DEBUG] Error connecting to channel:', error);\n        if (isMounted) {\n          // Clear messages if there's an error\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: []\n          }));\n        }\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting, transformToStoreMessage]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n\n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = msg => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n          if (message.type === 'new_reply' && message.parentId) {\n            storeMessage.parentId = message.parentId.toString();\n          }\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n\n          // If this is a new message and we're at the bottom, scroll to it\n          if (messageListRef.current) {\n            const {\n              scrollTop,\n              scrollHeight,\n              clientHeight\n            } = messageListRef.current;\n            const isAtBottom = scrollTop + clientHeight >= scrollHeight - 50;\n            if (isAtBottom) {\n              setTimeout(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              }, 100);\n            }\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = msg => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, transformToStoreMessage]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async channelId => {\n    if (channelId === activeChannelId) return;\n    if (isChannelSwitching.current) {\n      console.log('[DEBUG] Channel switch already in progress, ignoring request');\n      return;\n    }\n    const previousChannelId = activeChannelId;\n    isChannelSwitching.current = true;\n    try {\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      // Update UI immediately\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n\n      // Start data fetching\n      const dataPromise = Promise.all([getChannelUsers(channelId), getChannelMessages(channelId)]);\n\n      // Handle channel joining in parallel if needed\n      let joinPromise = Promise.resolve();\n      if (channel.is_public && !wsService.isChannelJoined(channelId)) {\n        joinPromise = (async () => {\n          try {\n            await wsService.connect(channelId);\n            await joinChannel(channelId);\n          } catch (error) {\n            console.error('Failed to join channel:', error);\n          }\n        })();\n      }\n\n      // Wait for data\n      const [channelUsers, channelMessages] = await dataPromise;\n      await joinPromise;\n\n      // Update users immediately\n      dispatch(setUsers(channelUsers));\n\n      // Transform messages in batches and update state\n      const batchSize = 100;\n      let allMessages = [];\n      for (let i = 0; i < channelMessages.length; i += batchSize) {\n        const batch = channelMessages.slice(i, i + batchSize).map(transformToStoreMessage);\n        allMessages = [...allMessages, ...batch];\n\n        // Update state with accumulated messages\n        dispatch(setMessages({\n          channelId,\n          messages: allMessages\n        }));\n\n        // Only yield if we have more messages to process\n        if (i + batchSize < channelMessages.length) {\n          await new Promise(resolve => setTimeout(resolve, 0));\n        }\n      }\n\n      // Final scroll after all messages are loaded\n      requestAnimationFrame(() => {\n        if (messageListRef.current) {\n          messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n        }\n      });\n    } catch (error) {\n      console.error('Error switching channel:', error);\n      if (previousChannelId) {\n        dispatch(setActiveChannel(previousChannelId));\n      }\n    } finally {\n      isChannelSwitching.current = false;\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        // Clear current messages and show loading state\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n\n        // Start channel switch in background\n        handleChannelClick(channelId).catch(error => {\n          console.error('Error switching channel:', error);\n        });\n      }\n\n      // Set the selected message ID immediately\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to message using requestAnimationFrame for better performance\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          // If element not found yet, try again in next frame\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector(state => {\n    console.log('[DEBUG] MainLayout - Current Redux state:', state);\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    console.log('[DEBUG] MainLayout - Selected messages for channel:', activeChannelId, channelMessages);\n    return channelMessages;\n  });\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: messages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      onClose: () => setIsSettingsOpen(false),\n      channel: activeChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 545,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"L3FhQfaKUYJGgBKGO4wWvVbAMQ0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addMessage","setMessages","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","joinChannel","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","transformMessagesInChunks","messages","map","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","transformToStoreMessage","fetchInitialData","fetchedChannels","length","channelUsers","console","disconnect","isMounted","connectionTimeout","connectToChannel","log","Promise","resolve","setTimeout","connect","channelMessages","all","transformedMessages","current","scrollTop","scrollHeight","clearTimeout","handleWebSocketMessage","message","type","isChannelMessage","storeMessage","clientHeight","isAtBottom","isStatusMessage","user_id","status","unsubscribe","onMessage","handleSearch","query","trim","undefined","results","handleChannelClick","previousChannelId","c","dataPromise","joinPromise","is_public","isChannelJoined","batchSize","allMessages","i","batch","slice","requestAnimationFrame","handleSelectMessage","messageId","catch","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","handleLogout","sortedChannels","sort","a","b","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","messagesByChannel","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","user","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult, Message } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n    } as StoreMessage));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback((msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    \n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout: NodeJS.Timeout;\n\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n\n      setIsConnecting(true);\n      console.log('[DEBUG] Connecting to channel:', activeChannelId);\n      \n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n        \n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // After joining, fetch channel users and messages\n        console.log('[DEBUG] Fetching channel data...');\n        const [channelUsers, channelMessages] = await Promise.all([\n          getChannelUsers(activeChannelId),\n          getChannelMessages(activeChannelId)\n        ]);\n\n        if (isMounted) {\n          console.log('[DEBUG] Setting users:', channelUsers);\n          dispatch(setUsers(channelUsers));\n          // Transform messages to match StoreMessage type\n          const transformedMessages = channelMessages.map(transformToStoreMessage);\n          console.log('[DEBUG] Setting messages for channel:', activeChannelId, transformedMessages);\n          dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n\n          // Scroll to bottom after messages are loaded\n          setTimeout(() => {\n            if (messageListRef.current) {\n              messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n            }\n          }, 100);\n        }\n      } catch (error) {\n        console.error('[DEBUG] Error connecting to channel:', error);\n        if (isMounted) {\n          // Clear messages if there's an error\n          dispatch(setMessages({ channelId: activeChannelId, messages: [] }));\n        }\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting, transformToStoreMessage]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n          if (message.type === 'new_reply' && message.parentId) {\n            storeMessage.parentId = message.parentId.toString();\n          }\n\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n\n          // If this is a new message and we're at the bottom, scroll to it\n          if (messageListRef.current) {\n            const { scrollTop, scrollHeight, clientHeight } = messageListRef.current;\n            const isAtBottom = scrollTop + clientHeight >= scrollHeight - 50;\n            if (isAtBottom) {\n              setTimeout(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              }, 100);\n            }\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = (msg: WebSocketMessage): msg is WebSocketStatusMessage => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, transformToStoreMessage]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async (channelId: string) => {\n    if (channelId === activeChannelId) return;\n    if (isChannelSwitching.current) {\n      console.log('[DEBUG] Channel switch already in progress, ignoring request');\n      return;\n    }\n\n    const previousChannelId = activeChannelId;\n    isChannelSwitching.current = true;\n    \n    try {\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      // Update UI immediately\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({ channelId, messages: [] }));\n\n      // Start data fetching\n      const dataPromise = Promise.all([\n        getChannelUsers(channelId),\n        getChannelMessages(channelId)\n      ]);\n\n      // Handle channel joining in parallel if needed\n      let joinPromise = Promise.resolve();\n      if (channel.is_public && !wsService.isChannelJoined(channelId)) {\n        joinPromise = (async () => {\n          try {\n            await wsService.connect(channelId);\n            await joinChannel(channelId);\n          } catch (error) {\n            console.error('Failed to join channel:', error);\n          }\n        })();\n      }\n\n      // Wait for data\n      const [channelUsers, channelMessages] = await dataPromise;\n      await joinPromise;\n\n      // Update users immediately\n      dispatch(setUsers(channelUsers));\n\n      // Transform messages in batches and update state\n      const batchSize = 100;\n      let allMessages: StoreMessage[] = [];\n\n      for (let i = 0; i < channelMessages.length; i += batchSize) {\n        const batch = channelMessages.slice(i, i + batchSize).map(transformToStoreMessage);\n        allMessages = [...allMessages, ...batch];\n\n        // Update state with accumulated messages\n        dispatch(setMessages({ channelId, messages: allMessages }));\n\n        // Only yield if we have more messages to process\n        if (i + batchSize < channelMessages.length) {\n          await new Promise(resolve => setTimeout(resolve, 0));\n        }\n      }\n\n      // Final scroll after all messages are loaded\n      requestAnimationFrame(() => {\n        if (messageListRef.current) {\n          messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n        }\n      });\n    } catch (error) {\n      console.error('Error switching channel:', error);\n      if (previousChannelId) {\n        dispatch(setActiveChannel(previousChannelId));\n      }\n    } finally {\n      isChannelSwitching.current = false;\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        // Clear current messages and show loading state\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n        \n        // Start channel switch in background\n        handleChannelClick(channelId).catch(error => {\n          console.error('Error switching channel:', error);\n        });\n      }\n\n      // Set the selected message ID immediately\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to message using requestAnimationFrame for better performance\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          // If element not found yet, try again in next frame\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector((state: RootState) => {\n    console.log('[DEBUG] MainLayout - Current Redux state:', state);\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    console.log('[DEBUG] MainLayout - Selected messages for channel:', activeChannelId, channelMessages);\n    return channelMessages;\n  });\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={messages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput channelId={activeChannelId || ''} />\n        </ChatInput>\n      </ChatArea>\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          onClose={() => setIsSettingsOpen(false)}\n          channel={activeChannel}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}