{"ast":null,"code":"export const transformMessage = message => {\n  var _message$content, _message$sender_id, _message$channel_id, _message$parent_id;\n  console.log('Transforming message:', {\n    id: message.id,\n    content: (_message$content = message.content) === null || _message$content === void 0 ? void 0 : _message$content.slice(0, 50),\n    // Only log first 50 chars\n    reactions: message.reactions\n  });\n\n  // Ensure reactions is an array and filter out invalid reactions\n  const reactions = Array.isArray(message.reactions) ? message.reactions.filter(reaction => {\n    if (!reaction || typeof reaction !== 'object') {\n      console.warn('Invalid reaction object:', reaction);\n      return false;\n    }\n    if (!reaction.emoji || !reaction.userId) {\n      console.warn('Reaction missing required fields:', reaction);\n      return false;\n    }\n    return true;\n  }) : [];\n  console.log('Transformed reactions:', reactions);\n  return {\n    id: message.id.toString(),\n    content: message.content || '',\n    userId: ((_message$sender_id = message.sender_id) === null || _message$sender_id === void 0 ? void 0 : _message$sender_id.toString()) || '',\n    channelId: ((_message$channel_id = message.channel_id) === null || _message$channel_id === void 0 ? void 0 : _message$channel_id.toString()) || '',\n    createdAt: message.created_at || new Date().toISOString(),\n    updatedAt: message.updated_at || message.created_at || new Date().toISOString(),\n    parentId: (_message$parent_id = message.parent_id) === null || _message$parent_id === void 0 ? void 0 : _message$parent_id.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    reactions: reactions.map(r => {\n      var _r$id;\n      return {\n        id: ((_r$id = r.id) === null || _r$id === void 0 ? void 0 : _r$id.toString()) || `${message.id}_${r.userId}_${r.emoji}`,\n        messageId: message.id.toString(),\n        userId: r.userId.toString(),\n        emoji: r.emoji,\n        createdAt: r.createdAt || new Date().toISOString()\n      };\n    })\n  };\n};","map":{"version":3,"names":["transformMessage","message","_message$content","_message$sender_id","_message$channel_id","_message$parent_id","console","log","id","content","slice","reactions","Array","isArray","filter","reaction","warn","emoji","userId","toString","sender_id","channelId","channel_id","createdAt","created_at","Date","toISOString","updatedAt","updated_at","parentId","parent_id","replyCount","reply_count","isExpanded","map","r","_r$id","messageId"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { RawMessage, StoreMessage, Reaction } from '../types';\n\nexport const transformMessage = (message: RawMessage): StoreMessage => {\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content?.slice(0, 50), // Only log first 50 chars\n    reactions: message.reactions\n  });\n\n  // Ensure reactions is an array and filter out invalid reactions\n  const reactions = Array.isArray(message.reactions) \n    ? message.reactions.filter(reaction => {\n        if (!reaction || typeof reaction !== 'object') {\n          console.warn('Invalid reaction object:', reaction);\n          return false;\n        }\n        if (!reaction.emoji || !reaction.userId) {\n          console.warn('Reaction missing required fields:', reaction);\n          return false;\n        }\n        return true;\n      })\n    : [];\n\n  console.log('Transformed reactions:', reactions);\n\n  return {\n    id: message.id.toString(),\n    content: message.content || '',\n    userId: message.sender_id?.toString() || '',\n    channelId: message.channel_id?.toString() || '',\n    createdAt: message.created_at || new Date().toISOString(),\n    updatedAt: message.updated_at || message.created_at || new Date().toISOString(),\n    parentId: message.parent_id?.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    reactions: reactions.map(r => ({\n      id: r.id?.toString() || `${message.id}_${r.userId}_${r.emoji}`,\n      messageId: message.id.toString(),\n      userId: r.userId.toString(),\n      emoji: r.emoji,\n      createdAt: r.createdAt || new Date().toISOString()\n    })),\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}