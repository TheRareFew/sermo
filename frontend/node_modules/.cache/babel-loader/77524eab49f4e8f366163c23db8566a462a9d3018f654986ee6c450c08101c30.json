{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c3 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c4 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const [lastScrolledMessageId, setLastScrolledMessageId] = useState(null);\n  const [isAutoScrollEnabled, setIsAutoScrollEnabled] = useState(true);\n  const previousMessagesLength = useRef(0);\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Handle message selection and scrolling\n  useEffect(() => {\n    if (!selectedMessageId || !containerRef.current) return;\n\n    // Only scroll if this is a new message selection from search\n    // and not just a channel switch or message load\n    if (selectedMessageId !== lastScrolledMessageId && (previousMessagesLength.current === 0 || previousMessagesLength.current === messages.length)) {\n      const messageElement = containerRef.current.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        // Scroll the message into view\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n\n        // Clear any existing timeout\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n\n        // Remove highlight class after animation\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n\n        // Update last scrolled message\n        setLastScrolledMessageId(selectedMessageId);\n        setIsAutoScrollEnabled(false);\n      }\n    }\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n    };\n  }, [selectedMessageId, messages, lastScrolledMessageId]);\n\n  // Update previous messages length\n  useEffect(() => {\n    previousMessagesLength.current = messages.length;\n  }, [messages]);\n\n  // Handle scroll events\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = container;\n\n    // Enable auto-scroll only when we're near the bottom and no message is selected\n    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;\n    setIsAutoScrollEnabled(isNearBottom && !selectedMessageId);\n  }, [selectedMessageId]);\n\n  // Auto-scroll to bottom for new messages or channel switches\n  useEffect(() => {\n    // If messages length changed significantly, it's likely a channel switch\n    const isChannelSwitch = Math.abs(messages.length - previousMessagesLength.current) > 5;\n    if (isAutoScrollEnabled && !selectedMessageId || isChannelSwitch) {\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n    }\n  }, [messages, isAutoScrollEnabled, selectedMessageId]);\n\n  // Reset scroll state only on channel switch\n  useEffect(() => {\n    const isChannelSwitch = Math.abs(messages.length - previousMessagesLength.current) > 5;\n    if (isChannelSwitch) {\n      setLastScrolledMessageId(null);\n      setIsAutoScrollEnabled(true);\n    }\n  }, [messages]);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = messageId => {\n    console.log('Toggle replies:', messageId);\n  };\n  const handleReply = messageId => {\n    console.log('Reply to message:', messageId);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    onScroll: handleScroll,\n    children: /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: messages.map(message => {\n        var _users$message$userId;\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          $isSelected: message.id === selectedMessageId,\n          \"data-message-id\": message.id,\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            content: message.content,\n            sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n            timestamp: message.createdAt,\n            userId: message.userId,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            onDelete: () => handleDeleteMessage(message.id),\n            replyCount: message.replyCount || 0,\n            isExpanded: message.isExpanded || false,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onReply: () => handleReply(message.id),\n            isReply: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), message.isExpanded && message.replies && /*#__PURE__*/_jsxDEV(MessageReplies, {\n            parentId: message.id,\n            replies: message.replies,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            isExpanded: message.isExpanded,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onDelete: handleDeleteMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}, \"9je44KVWX7aksYXjCGEj6DpMO28=\", false, function () {\n  return [useSelector];\n})), \"9je44KVWX7aksYXjCGEj6DpMO28=\", false, function () {\n  return [useSelector];\n});\n_c5 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"MessageWrapper\");\n$RefreshReg$(_c4, \"MessageList$forwardRef\");\n$RefreshReg$(_c5, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useCallback","useState","styled","useSelector","Message","MessageReplies","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","MessageWrapper","$isSelected","_c3","MessageList","_s","_c4","ref","messages","selectedMessageId","containerRef","highlightTimeoutRef","lastScrolledMessageId","setLastScrolledMessageId","isAutoScrollEnabled","setIsAutoScrollEnabled","previousMessagesLength","currentUser","users","state","auth","user","chat","current","length","messageElement","querySelector","scrollIntoView","behavior","block","classList","add","clearTimeout","setTimeout","remove","handleScroll","event","container","currentTarget","scrollTop","scrollHeight","clientHeight","isNearBottom","isChannelSwitch","Math","abs","handleDeleteMessage","messageId","console","log","handleToggleReplies","handleReply","onScroll","children","map","message","_users$message$userId","id","content","sender","userId","username","timestamp","createdAt","currentUserId","onDelete","replyCount","isExpanded","onToggleReplies","onReply","isReply","fileName","_jsxFileName","lineNumber","columnNumber","replies","parentId","_c5","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message, { ChatMessageProps } from '../Message';\nimport MessageReplies from '../MessageReplies';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const [lastScrolledMessageId, setLastScrolledMessageId] = useState<string | null>(null);\n  const [isAutoScrollEnabled, setIsAutoScrollEnabled] = useState(true);\n  const previousMessagesLength = useRef<number>(0);\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Handle message selection and scrolling\n  useEffect(() => {\n    if (!selectedMessageId || !containerRef.current) return;\n\n    // Only scroll if this is a new message selection from search\n    // and not just a channel switch or message load\n    if (selectedMessageId !== lastScrolledMessageId && \n        (previousMessagesLength.current === 0 || previousMessagesLength.current === messages.length)) {\n      const messageElement = containerRef.current.querySelector(`[data-message-id=\"${selectedMessageId}\"]`) as HTMLElement;\n      if (messageElement) {\n        // Scroll the message into view\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        \n        // Clear any existing timeout\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        \n        // Remove highlight class after animation\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n\n        // Update last scrolled message\n        setLastScrolledMessageId(selectedMessageId);\n        setIsAutoScrollEnabled(false);\n      }\n    }\n\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n    };\n  }, [selectedMessageId, messages, lastScrolledMessageId]);\n\n  // Update previous messages length\n  useEffect(() => {\n    previousMessagesLength.current = messages.length;\n  }, [messages]);\n\n  // Handle scroll events\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    const { scrollTop, scrollHeight, clientHeight } = container;\n    \n    // Enable auto-scroll only when we're near the bottom and no message is selected\n    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;\n    setIsAutoScrollEnabled(isNearBottom && !selectedMessageId);\n  }, [selectedMessageId]);\n\n  // Auto-scroll to bottom for new messages or channel switches\n  useEffect(() => {\n    // If messages length changed significantly, it's likely a channel switch\n    const isChannelSwitch = Math.abs(messages.length - previousMessagesLength.current) > 5;\n    \n    if ((isAutoScrollEnabled && !selectedMessageId) || isChannelSwitch) {\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n    }\n  }, [messages, isAutoScrollEnabled, selectedMessageId]);\n\n  // Reset scroll state only on channel switch\n  useEffect(() => {\n    const isChannelSwitch = Math.abs(messages.length - previousMessagesLength.current) > 5;\n    if (isChannelSwitch) {\n      setLastScrolledMessageId(null);\n      setIsAutoScrollEnabled(true);\n    }\n  }, [messages]);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    console.log('Toggle replies:', messageId);\n  };\n\n  const handleReply = (messageId: string) => {\n    console.log('Reply to message:', messageId);\n  };\n\n  return (\n    <MessageListContainer \n      ref={containerRef}\n      onScroll={handleScroll}\n    >\n      <MessagesWrapper>\n        {messages.map(message => (\n          <MessageWrapper\n            key={message.id}\n            $isSelected={message.id === selectedMessageId}\n            data-message-id={message.id}\n          >\n            <Message\n              content={message.content}\n              sender={users[message.userId]?.username || message.userId}\n              timestamp={message.createdAt}\n              userId={message.userId}\n              currentUserId={currentUser?.id}\n              onDelete={() => handleDeleteMessage(message.id)}\n              replyCount={message.replyCount || 0}\n              isExpanded={message.isExpanded || false}\n              onToggleReplies={() => handleToggleReplies(message.id)}\n              onReply={() => handleReply(message.id)}\n              isReply={false}\n            />\n            {message.isExpanded && message.replies && (\n              <MessageReplies\n                parentId={message.id}\n                replies={message.replies}\n                currentUserId={currentUser?.id}\n                isExpanded={message.isExpanded}\n                onToggleReplies={() => handleToggleReplies(message.id)}\n                onDelete={handleDeleteMessage}\n              />\n            )}\n          </MessageWrapper>\n        ))}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}