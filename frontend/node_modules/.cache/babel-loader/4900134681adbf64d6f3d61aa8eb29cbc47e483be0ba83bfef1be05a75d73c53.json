{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatMessage from '../../common/ChatMessage';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { setMessages } from '../../../store/messages/messagesSlice';\nimport wsService from '../../../services/websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  gap: 2px;\n  background: ${props => props.theme.colors.background};\n  border: 2px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: auto;\n  min-height: min-content;\n`;\n_c2 = MessagesWrapper;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n_c3 = LoadingMessage;\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.error};\n  font-family: 'Courier New', monospace;\n  border: 1px solid ${props => props.theme.colors.error};\n  margin: 8px;\n`;\n_c4 = ErrorMessage;\nconst NoMessagesMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n  border: 1px dashed ${props => props.theme.colors.border};\n  margin: 16px;\n`;\n_c5 = NoMessagesMessage;\nconst MESSAGES_PER_PAGE = 30;\n\n// Transform API message to store message format\nconst transformMessage = msg => {\n  console.log('Transforming message:', msg);\n  if (!msg || !msg.id || !msg.content || !msg.channel_id || !msg.sender_id) {\n    console.error('Invalid message format:', msg);\n    throw new Error('Invalid message format');\n  }\n  const transformed = {\n    id: String(msg.id),\n    content: msg.content,\n    channelId: String(msg.channel_id),\n    userId: String(msg.sender_id),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at\n  };\n  console.log('Transformed message:', transformed);\n  return transformed;\n};\nconst MessageList = ({\n  channelId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [error, setError] = useState(null);\n  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);\n\n  // Connect to WebSocket when channel changes\n  useEffect(() => {\n    if (channelId) {\n      wsService.connect(channelId);\n\n      // Clean up WebSocket connection when unmounting or changing channels\n      return () => {\n        wsService.leaveChannel(channelId);\n      };\n    }\n  }, [channelId]);\n  const messages = useSelector(state => {\n    var _state$messages;\n    if (!channelId || !((_state$messages = state.messages) !== null && _state$messages !== void 0 && _state$messages.messagesByChannel)) {\n      var _state$messages2;\n      console.log('No messages to display - channelId or messagesByChannel is missing:', {\n        channelId,\n        hasMessagesByChannel: !!((_state$messages2 = state.messages) !== null && _state$messages2 !== void 0 && _state$messages2.messagesByChannel)\n      });\n      return [];\n    }\n    const channelMessages = state.messages.messagesByChannel[String(channelId)] || [];\n    // Sort messages by timestamp, oldest first\n    const sortedMessages = [...channelMessages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n    console.log('Selected messages for channel', channelId, ':', {\n      channelId,\n      messageCount: sortedMessages.length,\n      messages: sortedMessages,\n      messagesByChannel: state.messages.messagesByChannel,\n      stateMessages: state.messages\n    });\n    return sortedMessages;\n  });\n  const users = useSelector(state => {\n    var _state$chat;\n    const allUsers = ((_state$chat = state.chat) === null || _state$chat === void 0 ? void 0 : _state$chat.users) || {};\n    console.log('Selected users:', {\n      userCount: Object.keys(allUsers).length,\n      users: allUsers\n    });\n    return allUsers;\n  });\n  const isLoading = useSelector(state => {\n    var _state$messages3;\n    const loading = ((_state$messages3 = state.messages) === null || _state$messages3 === void 0 ? void 0 : _state$messages3.loading) || false;\n    console.log('Loading state:', loading);\n    return loading;\n  });\n\n  // Initial message load\n  useEffect(() => {\n    if (channelId) {\n      console.log('Loading messages for channel:', channelId);\n      setIsLoadingMore(true);\n      setHasMoreMessages(true);\n      setError(null);\n      setShouldScrollToBottom(true);\n      getChannelMessages(channelId, MESSAGES_PER_PAGE).then(newMessages => {\n        console.log('Received messages from API:', newMessages);\n        if (newMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        const transformedMessages = newMessages.map(transformMessage);\n        console.log('Transformed messages:', transformedMessages);\n        dispatch(setMessages({\n          channelId: String(channelId),\n          messages: transformedMessages\n        }));\n      }).catch(error => {\n        console.error('Failed to fetch messages:', error);\n        setError('Failed to load messages. Please try again.');\n      }).finally(() => {\n        setIsLoadingMore(false);\n      });\n    }\n  }, [channelId, dispatch]);\n\n  // Handle scroll to load more messages\n  const handleScroll = async e => {\n    const div = e.currentTarget;\n    const isNearTop = div.scrollTop <= 100;\n    const previousScrollHeight = div.scrollHeight;\n    if (isNearTop && !isLoadingMore && hasMoreMessages && channelId) {\n      setIsLoadingMore(true);\n      setError(null);\n      setShouldScrollToBottom(false);\n      try {\n        const olderMessages = await getChannelMessages(channelId, MESSAGES_PER_PAGE, messages.length);\n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        if (olderMessages.length > 0) {\n          const transformedMessages = olderMessages.map(transformMessage);\n          const allMessages = [...transformedMessages, ...messages];\n          dispatch(setMessages({\n            channelId: String(channelId),\n            messages: allMessages\n          }));\n\n          // Maintain scroll position after loading older messages\n          requestAnimationFrame(() => {\n            if (containerRef.current) {\n              const newScrollHeight = containerRef.current.scrollHeight;\n              containerRef.current.scrollTop = newScrollHeight - previousScrollHeight;\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n        setError('Failed to load more messages. Please try again.');\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0 && shouldScrollToBottom) {\n      const container = containerRef.current;\n      // Use requestAnimationFrame to ensure the scroll happens after the render\n      requestAnimationFrame(() => {\n        container.scrollTop = container.scrollHeight;\n      });\n    }\n  }, [messages, shouldScrollToBottom]);\n\n  // Reset scroll behavior when channel changes\n  useEffect(() => {\n    setShouldScrollToBottom(true);\n  }, [channelId]);\n  if (!channelId) {\n    return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n      children: /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n        children: \"Select a channel to view messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    onScroll: handleScroll,\n    children: /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), !hasMoreMessages && messages.length > 0 && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n        children: \"You've reached the beginning of this conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), messages.length === 0 && !isLoading && !error && /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n        children: \"No messages yet. Start the conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this), messages.map(msg => {\n        const userId = Number(msg.userId);\n        console.log('Looking up user:', {\n          userId,\n          availableUsers: users\n        });\n        const user = users[userId];\n        console.log('Found user:', user);\n        const sender = (user === null || user === void 0 ? void 0 : user.username) || `User ${msg.userId}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `message-${msg.id}`,\n          style: {\n            margin: '4px 0'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n            content: msg.content,\n            sender: sender,\n            timestamp: msg.createdAt,\n            isSystem: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"yrZXssLIfi3UdoMzSgo2W3HeLms=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c6 = MessageList;\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingMessage\");\n$RefreshReg$(_c4, \"ErrorMessage\");\n$RefreshReg$(_c5, \"NoMessagesMessage\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","ChatMessage","getChannelMessages","setMessages","wsService","jsxDEV","_jsxDEV","MessageListContainer","div","props","theme","colors","background","border","_c","MessagesWrapper","_c2","LoadingMessage","textSecondary","_c3","ErrorMessage","error","_c4","NoMessagesMessage","secondary","_c5","MESSAGES_PER_PAGE","transformMessage","msg","console","log","id","content","channel_id","sender_id","Error","transformed","String","channelId","userId","reactions","attachments","createdAt","created_at","updatedAt","MessageList","_s","dispatch","containerRef","isLoadingMore","setIsLoadingMore","hasMoreMessages","setHasMoreMessages","setError","shouldScrollToBottom","setShouldScrollToBottom","connect","leaveChannel","messages","state","_state$messages","messagesByChannel","_state$messages2","hasMessagesByChannel","channelMessages","sortedMessages","sort","a","b","Date","getTime","messageCount","length","stateMessages","users","_state$chat","allUsers","chat","userCount","Object","keys","isLoading","_state$messages3","loading","then","newMessages","transformedMessages","map","catch","finally","handleScroll","e","currentTarget","isNearTop","scrollTop","previousScrollHeight","scrollHeight","olderMessages","allMessages","requestAnimationFrame","current","newScrollHeight","container","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onScroll","Number","availableUsers","user","sender","username","style","margin","timestamp","isSystem","_c6","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatMessage from '../../common/ChatMessage';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { setMessages } from '../../../store/messages/messagesSlice';\nimport { Message as ApiMessage, StoreMessage, RootState, User } from '../../../types';\nimport wsService from '../../../services/websocket';\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  gap: 2px;\n  background: ${props => props.theme.colors.background};\n  border: 2px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: auto;\n  min-height: min-content;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.error};\n  font-family: 'Courier New', monospace;\n  border: 1px solid ${props => props.theme.colors.error};\n  margin: 8px;\n`;\n\nconst NoMessagesMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n  border: 1px dashed ${props => props.theme.colors.border};\n  margin: 16px;\n`;\n\ninterface MessageListProps {\n  channelId: string | null;\n}\n\nconst MESSAGES_PER_PAGE = 30;\n\n// Transform API message to store message format\nconst transformMessage = (msg: ApiMessage): StoreMessage => {\n  console.log('Transforming message:', msg);\n  if (!msg || !msg.id || !msg.content || !msg.channel_id || !msg.sender_id) {\n    console.error('Invalid message format:', msg);\n    throw new Error('Invalid message format');\n  }\n\n  const transformed: StoreMessage = {\n    id: String(msg.id),\n    content: msg.content,\n    channelId: String(msg.channel_id),\n    userId: String(msg.sender_id),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at\n  };\n\n  console.log('Transformed message:', transformed);\n  return transformed;\n};\n\nconst MessageList: React.FC<MessageListProps> = ({ channelId }) => {\n  const dispatch = useDispatch();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);\n\n  // Connect to WebSocket when channel changes\n  useEffect(() => {\n    if (channelId) {\n      wsService.connect(channelId);\n      \n      // Clean up WebSocket connection when unmounting or changing channels\n      return () => {\n        wsService.leaveChannel(channelId);\n      };\n    }\n  }, [channelId]);\n\n  const messages = useSelector((state: RootState) => {\n    if (!channelId || !state.messages?.messagesByChannel) {\n      console.log('No messages to display - channelId or messagesByChannel is missing:', {\n        channelId,\n        hasMessagesByChannel: !!state.messages?.messagesByChannel\n      });\n      return [];\n    }\n    const channelMessages = state.messages.messagesByChannel[String(channelId)] || [];\n    // Sort messages by timestamp, oldest first\n    const sortedMessages = [...channelMessages].sort((a, b) => \n      new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n    );\n    console.log('Selected messages for channel', channelId, ':', {\n      channelId,\n      messageCount: sortedMessages.length,\n      messages: sortedMessages,\n      messagesByChannel: state.messages.messagesByChannel,\n      stateMessages: state.messages\n    });\n    return sortedMessages;\n  });\n\n  const users = useSelector((state: RootState) => {\n    const allUsers = state.chat?.users || {} as { [key: number]: User };\n    console.log('Selected users:', {\n      userCount: Object.keys(allUsers).length,\n      users: allUsers\n    });\n    return allUsers;\n  });\n\n  const isLoading = useSelector((state: RootState) => {\n    const loading = state.messages?.loading || false;\n    console.log('Loading state:', loading);\n    return loading;\n  });\n\n  // Initial message load\n  useEffect(() => {\n    if (channelId) {\n      console.log('Loading messages for channel:', channelId);\n      setIsLoadingMore(true);\n      setHasMoreMessages(true);\n      setError(null);\n      setShouldScrollToBottom(true);\n      \n      getChannelMessages(channelId, MESSAGES_PER_PAGE)\n        .then(newMessages => {\n          console.log('Received messages from API:', newMessages);\n          if (newMessages.length < MESSAGES_PER_PAGE) {\n            setHasMoreMessages(false);\n          }\n          const transformedMessages: StoreMessage[] = newMessages.map(transformMessage);\n          console.log('Transformed messages:', transformedMessages);\n          dispatch(setMessages({ \n            channelId: String(channelId), \n            messages: transformedMessages \n          }));\n        })\n        .catch(error => {\n          console.error('Failed to fetch messages:', error);\n          setError('Failed to load messages. Please try again.');\n        })\n        .finally(() => {\n          setIsLoadingMore(false);\n        });\n    }\n  }, [channelId, dispatch]);\n\n  // Handle scroll to load more messages\n  const handleScroll = async (e: React.UIEvent<HTMLDivElement>) => {\n    const div = e.currentTarget;\n    const isNearTop = div.scrollTop <= 100;\n    const previousScrollHeight = div.scrollHeight;\n    \n    if (isNearTop && !isLoadingMore && hasMoreMessages && channelId) {\n      setIsLoadingMore(true);\n      setError(null);\n      setShouldScrollToBottom(false);\n      \n      try {\n        const olderMessages = await getChannelMessages(\n          channelId, \n          MESSAGES_PER_PAGE,\n          messages.length\n        );\n        \n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n\n        if (olderMessages.length > 0) {\n          const transformedMessages: StoreMessage[] = olderMessages.map(transformMessage);\n          const allMessages: StoreMessage[] = [...transformedMessages, ...messages];\n          dispatch(setMessages({ \n            channelId: String(channelId), \n            messages: allMessages\n          }));\n          \n          // Maintain scroll position after loading older messages\n          requestAnimationFrame(() => {\n            if (containerRef.current) {\n              const newScrollHeight = containerRef.current.scrollHeight;\n              containerRef.current.scrollTop = newScrollHeight - previousScrollHeight;\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n        setError('Failed to load more messages. Please try again.');\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0 && shouldScrollToBottom) {\n      const container = containerRef.current;\n      // Use requestAnimationFrame to ensure the scroll happens after the render\n      requestAnimationFrame(() => {\n        container.scrollTop = container.scrollHeight;\n      });\n    }\n  }, [messages, shouldScrollToBottom]);\n\n  // Reset scroll behavior when channel changes\n  useEffect(() => {\n    setShouldScrollToBottom(true);\n  }, [channelId]);\n\n  if (!channelId) {\n    return (\n      <MessageListContainer>\n        <NoMessagesMessage>\n          Select a channel to view messages\n        </NoMessagesMessage>\n      </MessageListContainer>\n    );\n  }\n\n  return (\n    <MessageListContainer\n      ref={containerRef}\n      onScroll={handleScroll}\n    >\n      <MessagesWrapper>\n        {error && (\n          <ErrorMessage>\n            {error}\n          </ErrorMessage>\n        )}\n        \n        {!hasMoreMessages && messages.length > 0 && (\n          <LoadingMessage>\n            You've reached the beginning of this conversation\n          </LoadingMessage>\n        )}\n        \n        {isLoadingMore && (\n          <LoadingMessage>Loading older messages...</LoadingMessage>\n        )}\n\n        {messages.length === 0 && !isLoading && !error && (\n          <NoMessagesMessage>\n            No messages yet. Start the conversation!\n          </NoMessagesMessage>\n        )}\n\n        {messages.map((msg: StoreMessage) => {\n          const userId = Number(msg.userId);\n          console.log('Looking up user:', { userId, availableUsers: users });\n          const user = users[userId];\n          console.log('Found user:', user);\n          const sender = user?.username || `User ${msg.userId}`;\n          return (\n            <div key={msg.id} id={`message-${msg.id}`} style={{ margin: '4px 0' }}>\n              <ChatMessage\n                content={msg.content}\n                sender={sender}\n                timestamp={msg.createdAt}\n                isSystem={false}\n              />\n            </div>\n          );\n        })}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n};\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}