{"ast":null,"code":"import { store } from '../../store';\nimport { addMessage, updateMessage } from '../../store/messages/messagesSlice';\nimport { updateUserStatus } from '../../store/chat/chatSlice';\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.pingInterval = null;\n    this.channels = new Set();\n  }\n  connect() {\n    var _this$ws;\n    if (((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN) return;\n    const token = this.getAuthToken();\n    if (!token) {\n      console.error('No auth token available for WebSocket connection');\n      return;\n    }\n\n    // Use secure WebSocket if the page is served over HTTPS\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//localhost:8000/ws?token=${token}`;\n    console.log('Connecting to WebSocket:', wsUrl);\n    this.ws = new WebSocket(wsUrl);\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n      this.startPingInterval();\n\n      // Rejoin all channels\n      this.channels.forEach(channelId => {\n        this.joinChannel(channelId);\n      });\n    };\n    this.ws.onmessage = this.handleMessage.bind(this);\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.stopPingInterval();\n      this.attemptReconnect();\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  getAuthToken() {\n    var _state$auth;\n    const state = store.getState();\n    return ((_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : _state$auth.token) || null;\n  }\n  handleMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket message received:', data);\n      switch (data.type) {\n        case 'NEW_MESSAGE':\n          if (data.channelId && data.message) {\n            store.dispatch(addMessage({\n              channelId: data.channelId,\n              message: data.message\n            }));\n          }\n          break;\n        case 'UPDATE_MESSAGE':\n          if (data.channelId && data.id && data.updates) {\n            const updatedMessage = {\n              id: data.id,\n              ...data.updates\n            };\n            store.dispatch(updateMessage({\n              channelId: data.channelId,\n              id: data.id,\n              message: updatedMessage\n            }));\n          }\n          break;\n        case 'USER_STATUS':\n          if (data.userId && data.status) {\n            store.dispatch(updateUserStatus({\n              userId: data.userId,\n              status: data.status\n            }));\n          }\n          break;\n        case 'PONG':\n          // Handle pong response\n          break;\n        default:\n          console.warn('Unknown message type:', data.type);\n      }\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      return;\n    }\n    this.reconnectAttempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n    this.reconnectTimeout = setTimeout(() => {\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      this.connect();\n    }, delay);\n  }\n  startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      this.send({\n        type: 'PING'\n      });\n    }, 30000);\n  }\n  stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n  }\n  send(data) {\n    var _this$ws2;\n    if (((_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.readyState) === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n  joinChannel(channelId) {\n    this.channels.add(channelId);\n    this.send({\n      type: 'JOIN_CHANNEL',\n      channelId\n    });\n  }\n  leaveChannel(channelId) {\n    this.channels.delete(channelId);\n    this.send({\n      type: 'LEAVE_CHANNEL',\n      channelId\n    });\n  }\n  disconnect() {\n    this.channels.clear();\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    this.stopPingInterval();\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["store","addMessage","updateMessage","updateUserStatus","WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","pingInterval","channels","Set","connect","_this$ws","readyState","WebSocket","OPEN","token","getAuthToken","console","error","protocol","window","location","wsUrl","log","onopen","startPingInterval","forEach","channelId","joinChannel","onmessage","handleMessage","bind","onclose","stopPingInterval","attemptReconnect","onerror","_state$auth","state","getState","auth","event","data","JSON","parse","type","message","dispatch","id","updates","updatedMessage","userId","status","warn","delay","Math","min","pow","setTimeout","setInterval","send","clearInterval","_this$ws2","stringify","add","leaveChannel","delete","disconnect","clear","close","clearTimeout"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { Message, User, StoreMessage } from '../../types';\r\nimport { store } from '../../store';\r\nimport { addMessage, updateMessage } from '../../store/messages/messagesSlice';\r\nimport { updateUserStatus } from '../../store/chat/chatSlice';\r\n\r\ninterface WebSocketMessage {\r\n  type: 'NEW_MESSAGE' | 'UPDATE_MESSAGE' | 'USER_STATUS' | 'PING' | 'PONG' | 'JOIN_CHANNEL' | 'LEAVE_CHANNEL';\r\n  channelId?: string;\r\n  message?: StoreMessage;\r\n  id?: string;\r\n  updates?: Partial<StoreMessage>;\r\n  userId?: string;\r\n  status?: 'online' | 'offline' | 'away' | 'busy';\r\n}\r\n\r\nclass WebSocketService {\r\n  private ws: WebSocket | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private pingInterval: NodeJS.Timeout | null = null;\r\n  private channels: Set<string> = new Set();\r\n\r\n  connect() {\r\n    if (this.ws?.readyState === WebSocket.OPEN) return;\r\n\r\n    const token = this.getAuthToken();\r\n    if (!token) {\r\n      console.error('No auth token available for WebSocket connection');\r\n      return;\r\n    }\r\n\r\n    // Use secure WebSocket if the page is served over HTTPS\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const wsUrl = `${protocol}//localhost:8000/ws?token=${token}`;\r\n    \r\n    console.log('Connecting to WebSocket:', wsUrl);\r\n    this.ws = new WebSocket(wsUrl);\r\n    \r\n    this.ws.onopen = () => {\r\n      console.log('WebSocket connected');\r\n      this.reconnectAttempts = 0;\r\n      this.startPingInterval();\r\n      \r\n      // Rejoin all channels\r\n      this.channels.forEach(channelId => {\r\n        this.joinChannel(channelId);\r\n      });\r\n    };\r\n\r\n    this.ws.onmessage = this.handleMessage.bind(this);\r\n    this.ws.onclose = () => {\r\n      console.log('WebSocket disconnected');\r\n      this.stopPingInterval();\r\n      this.attemptReconnect();\r\n    };\r\n    this.ws.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  private getAuthToken(): string | null {\r\n    const state = store.getState();\r\n    return state.auth?.token || null;\r\n  }\r\n\r\n  private handleMessage(event: MessageEvent) {\r\n    try {\r\n      const data = JSON.parse(event.data) as WebSocketMessage;\r\n      console.log('WebSocket message received:', data);\r\n\r\n      switch (data.type) {\r\n        case 'NEW_MESSAGE':\r\n          if (data.channelId && data.message) {\r\n            store.dispatch(addMessage({\r\n              channelId: data.channelId,\r\n              message: data.message\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'UPDATE_MESSAGE':\r\n          if (data.channelId && data.id && data.updates) {\r\n            const updatedMessage = {\r\n              id: data.id,\r\n              ...data.updates\r\n            } as StoreMessage;\r\n            \r\n            store.dispatch(updateMessage({\r\n              channelId: data.channelId,\r\n              id: data.id,\r\n              message: updatedMessage\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'USER_STATUS':\r\n          if (data.userId && data.status) {\r\n            store.dispatch(updateUserStatus({\r\n              userId: data.userId,\r\n              status: data.status\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'PONG':\r\n          // Handle pong response\r\n          break;\r\n\r\n        default:\r\n          console.warn('Unknown message type:', data.type);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling WebSocket message:', error);\r\n    }\r\n  }\r\n\r\n  private attemptReconnect() {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.error('Max reconnection attempts reached');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\r\n    \r\n    this.reconnectTimeout = setTimeout(() => {\r\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      this.connect();\r\n    }, delay);\r\n  }\r\n\r\n  private startPingInterval() {\r\n    this.pingInterval = setInterval(() => {\r\n      this.send({ type: 'PING' });\r\n    }, 30000);\r\n  }\r\n\r\n  private stopPingInterval() {\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n      this.pingInterval = null;\r\n    }\r\n  }\r\n\r\n  send(data: WebSocketMessage) {\r\n    if (this.ws?.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(data));\r\n    } else {\r\n      console.warn('WebSocket is not connected');\r\n    }\r\n  }\r\n\r\n  joinChannel(channelId: string) {\r\n    this.channels.add(channelId);\r\n    this.send({\r\n      type: 'JOIN_CHANNEL',\r\n      channelId\r\n    });\r\n  }\r\n\r\n  leaveChannel(channelId: string) {\r\n    this.channels.delete(channelId);\r\n    this.send({\r\n      type: 'LEAVE_CHANNEL',\r\n      channelId\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    this.channels.clear();\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n    this.stopPingInterval();\r\n  }\r\n}\r\n\r\nexport default new WebSocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}