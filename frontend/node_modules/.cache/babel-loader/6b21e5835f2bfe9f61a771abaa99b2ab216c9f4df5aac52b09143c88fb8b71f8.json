{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageInput\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport { sendMessage } from '../../../services/api/chat';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport data from '@emoji-mart/data';\nimport Picker from '@emoji-mart/react';\nimport { FaSmile } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputContainer = styled.div`\n  padding: 8px;\n  background-color: ${props => props.theme.colors.background};\n  border-top: 1px solid ${props => props.theme.colors.border};\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n_c = InputContainer;\nconst Input = styled.input`\n  flex: 1;\n  padding: 8px;\n  background-color: ${props => props.theme.colors.inputBackground};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n_c2 = Input;\nconst ErrorText = styled.div`\n  color: ${props => props.theme.colors.error};\n  font-size: 12px;\n  margin-top: 4px;\n`;\n_c3 = ErrorText;\nconst EmojiButton = styled.button`\n  background: none;\n  border: none;\n  padding: 8px;\n  cursor: pointer;\n  color: ${props => props.theme.colors.text};\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n_c4 = EmojiButton;\nconst EmojiPickerWrapper = styled.div`\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  z-index: 100;\n`;\n_c5 = EmojiPickerWrapper;\nconst MessageInput = ({\n  channelId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [messageSent, setMessageSent] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const inputRef = useRef(null);\n  useLayoutEffect(() => {\n    if (channelId && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [channelId]);\n  useEffect(() => {\n    if (messageSent) {\n      setTimeout(() => {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        setMessageSent(false);\n      }, 100);\n    }\n  }, [messageSent]);\n  const handleKeyPress = async e => {\n    if (e.key === 'Enter' && message.trim() && channelId) {\n      setError(null);\n      setIsLoading(true);\n      try {\n        console.log('Sending message:', {\n          channelId,\n          content: message.trim()\n        });\n        const sentMessage = await sendMessage({\n          channelId,\n          content: message.trim()\n        });\n        console.log('Message sent successfully:', sentMessage);\n        const transformedMessage = transformMessage(sentMessage);\n        console.log('Transformed message:', transformedMessage);\n        dispatch(addMessage({\n          channelId,\n          message: transformedMessage\n        }));\n        setMessage('');\n        setMessageSent(true);\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        setError('Failed to send message. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const handleChange = e => {\n    setMessage(e.target.value);\n    if (error) {\n      setError(null);\n    }\n  };\n  const handleEmojiSelect = emoji => {\n    setMessage(prev => prev + emoji.native);\n    setShowEmojiPicker(false);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  const toggleEmojiPicker = () => {\n    setShowEmojiPicker(!showEmojiPicker);\n  };\n  return /*#__PURE__*/_jsxDEV(InputContainer, {\n    children: [/*#__PURE__*/_jsxDEV(EmojiButton, {\n      onClick: toggleEmojiPicker,\n      type: \"button\",\n      children: /*#__PURE__*/_jsxDEV(FaSmile, {\n        size: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(EmojiPickerWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Picker, {\n        data: data,\n        onEmojiSelect: handleEmojiSelect,\n        theme: \"dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      ref: inputRef,\n      type: \"text\",\n      value: message,\n      onChange: handleChange,\n      onKeyPress: handleKeyPress,\n      placeholder: channelId ? \"Type a message...\" : \"Select a channel to start chatting...\",\n      disabled: isLoading || !channelId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorText, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageInput, \"qv3tZkgn1sJ8zd39EySSQid+2/c=\", false, function () {\n  return [useDispatch];\n});\n_c6 = MessageInput;\nexport default MessageInput;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"InputContainer\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"ErrorText\");\n$RefreshReg$(_c4, \"EmojiButton\");\n$RefreshReg$(_c5, \"EmojiPickerWrapper\");\n$RefreshReg$(_c6, \"MessageInput\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","useEffect","styled","useDispatch","addMessage","sendMessage","transformMessage","data","Picker","FaSmile","jsxDEV","_jsxDEV","InputContainer","div","props","theme","colors","background","border","_c","Input","input","inputBackground","text","primary","_c2","ErrorText","error","_c3","EmojiButton","button","_c4","EmojiPickerWrapper","_c5","MessageInput","channelId","_s","dispatch","message","setMessage","setError","isLoading","setIsLoading","messageSent","setMessageSent","showEmojiPicker","setShowEmojiPicker","inputRef","current","focus","setTimeout","handleKeyPress","e","key","trim","console","log","content","sentMessage","transformedMessage","handleChange","target","value","handleEmojiSelect","emoji","prev","native","toggleEmojiPicker","children","onClick","type","size","fileName","_jsxFileName","lineNumber","columnNumber","onEmojiSelect","ref","onChange","onKeyPress","placeholder","disabled","_c6","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageInput/index.tsx"],"sourcesContent":["import React, { useState, KeyboardEvent, useRef, useLayoutEffect, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport { sendMessage } from '../../../services/api/chat';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { AppDispatch } from '../../../store';\nimport data from '@emoji-mart/data';\nimport Picker from '@emoji-mart/react';\nimport { FaSmile } from 'react-icons/fa';\n\ninterface MessageInputProps {\n  channelId: string | null;\n}\n\nconst InputContainer = styled.div`\n  padding: 8px;\n  background-color: ${props => props.theme.colors.background};\n  border-top: 1px solid ${props => props.theme.colors.border};\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  padding: 8px;\n  background-color: ${props => props.theme.colors.inputBackground};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ErrorText = styled.div`\n  color: ${props => props.theme.colors.error};\n  font-size: 12px;\n  margin-top: 4px;\n`;\n\nconst EmojiButton = styled.button`\n  background: none;\n  border: none;\n  padding: 8px;\n  cursor: pointer;\n  color: ${props => props.theme.colors.text};\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst EmojiPickerWrapper = styled.div`\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  z-index: 100;\n`;\n\nconst MessageInput: React.FC<MessageInputProps> = ({ channelId }) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [messageSent, setMessageSent] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useLayoutEffect(() => {\n    if (channelId && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [channelId]);\n\n  useEffect(() => {\n    if (messageSent) {\n      setTimeout(() => {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        setMessageSent(false);\n      }, 100);\n    }\n  }, [messageSent]);\n\n  const handleKeyPress = async (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && message.trim() && channelId) {\n      setError(null);\n      setIsLoading(true);\n\n      try {\n        console.log('Sending message:', {\n          channelId,\n          content: message.trim()\n        });\n\n        const sentMessage = await sendMessage({\n          channelId,\n          content: message.trim()\n        });\n\n        console.log('Message sent successfully:', sentMessage);\n\n        const transformedMessage = transformMessage(sentMessage);\n        console.log('Transformed message:', transformedMessage);\n\n        dispatch(addMessage({\n          channelId,\n          message: transformedMessage\n        }));\n        \n        setMessage('');\n        setMessageSent(true);\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        setError('Failed to send message. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMessage(e.target.value);\n    if (error) {\n      setError(null);\n    }\n  };\n\n  const handleEmojiSelect = (emoji: any) => {\n    setMessage(prev => prev + emoji.native);\n    setShowEmojiPicker(false);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const toggleEmojiPicker = () => {\n    setShowEmojiPicker(!showEmojiPicker);\n  };\n\n  return (\n    <InputContainer>\n      <EmojiButton onClick={toggleEmojiPicker} type=\"button\">\n        <FaSmile size={20} />\n      </EmojiButton>\n      {showEmojiPicker && (\n        <EmojiPickerWrapper>\n          <Picker \n            data={data}\n            onEmojiSelect={handleEmojiSelect}\n            theme=\"dark\"\n          />\n        </EmojiPickerWrapper>\n      )}\n      <Input\n        ref={inputRef}\n        type=\"text\"\n        value={message}\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n        placeholder={channelId ? \"Type a message...\" : \"Select a channel to start chatting...\"}\n        disabled={isLoading || !channelId}\n      />\n      {error && <ErrorText>{error}</ErrorText>}\n    </InputContainer>\n  );\n};\n\nexport default MessageInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}