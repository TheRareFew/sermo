{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  channels: [],\n  activeChannelId: null,\n  users: {},\n  loading: false,\n  error: null\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setChannels: (state, action) => {\n      state.channels = action.payload;\n    },\n    setActiveChannel: (state, action) => {\n      state.activeChannelId = action.payload;\n    },\n    addChannel: (state, action) => {\n      state.channels.push(action.payload);\n    },\n    removeChannel: (state, action) => {\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\n      if (state.activeChannelId === action.payload) {\n        state.activeChannelId = null;\n      }\n    },\n    setUsers: (state, action) => {\n      state.users = action.payload;\n    },\n    updateUserStatus: (state, action) => {\n      if (state.users[action.payload.userId]) {\n        state.users[action.payload.userId].status = action.payload.status;\n      }\n    },\n    updateChannelUnreadCount: (state, action) => {\n      const channel = state.channels.find(ch => ch.id === action.payload.channelId);\n      if (channel) {\n        channel.unreadCount = action.payload.count;\n      }\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setChannels,\n  setActiveChannel,\n  addChannel,\n  removeChannel,\n  setUsers,\n  updateUserStatus,\n  updateChannelUnreadCount,\n  setLoading,\n  setError\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","channels","activeChannelId","users","loading","error","chatSlice","name","reducers","setChannels","state","action","payload","setActiveChannel","addChannel","push","removeChannel","filter","channel","id","setUsers","updateUserStatus","userId","status","updateChannelUnreadCount","find","ch","channelId","unreadCount","count","setLoading","setError","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/chat/chatSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ChatState, Channel, User } from '../../types';\n\nconst initialState: ChatState = {\n  channels: [],\n  activeChannelId: null,\n  users: {},\n  loading: false,\n  error: null\n};\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setChannels: (state, action: PayloadAction<Channel[]>) => {\n      state.channels = action.payload;\n    },\n    setActiveChannel: (state, action: PayloadAction<string>) => {\n      state.activeChannelId = action.payload;\n    },\n    addChannel: (state, action: PayloadAction<Channel>) => {\n      state.channels.push(action.payload);\n    },\n    removeChannel: (state, action: PayloadAction<string>) => {\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\n      if (state.activeChannelId === action.payload) {\n        state.activeChannelId = null;\n      }\n    },\n    setUsers: (state, action: PayloadAction<{ [key: string]: User }>) => {\n      state.users = action.payload;\n    },\n    updateUserStatus: (state, action: PayloadAction<{ userId: string; status: string }>) => {\n      if (state.users[action.payload.userId]) {\n        state.users[action.payload.userId].status = action.payload.status;\n      }\n    },\n    updateChannelUnreadCount: (state, action: PayloadAction<{ channelId: string; count: number }>) => {\n      const channel = state.channels.find(ch => ch.id === action.payload.channelId);\n      if (channel) {\n        channel.unreadCount = action.payload.count;\n      }\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    }\n  }\n});\n\nexport const {\n  setChannels,\n  setActiveChannel,\n  addChannel,\n  removeChannel,\n  setUsers,\n  updateUserStatus,\n  updateChannelUnreadCount,\n  setLoading,\n  setError\n} = chatSlice.actions;\n\nexport default chatSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAG7D,MAAMC,YAAuB,GAAG;EAC9BC,QAAQ,EAAE,EAAE;EACZC,eAAe,EAAE,IAAI;EACrBC,KAAK,EAAE,CAAC,CAAC;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZP,YAAY;EACZQ,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAgC,KAAK;MACxDD,KAAK,CAACT,QAAQ,GAAGU,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,gBAAgB,EAAEA,CAACH,KAAK,EAAEC,MAA6B,KAAK;MAC1DD,KAAK,CAACR,eAAe,GAAGS,MAAM,CAACC,OAAO;IACxC,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACT,QAAQ,CAACc,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC;IACDI,aAAa,EAAEA,CAACN,KAAK,EAAEC,MAA6B,KAAK;MACvDD,KAAK,CAACT,QAAQ,GAAGS,KAAK,CAACT,QAAQ,CAACgB,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAAC;MAChF,IAAIF,KAAK,CAACR,eAAe,KAAKS,MAAM,CAACC,OAAO,EAAE;QAC5CF,KAAK,CAACR,eAAe,GAAG,IAAI;MAC9B;IACF,CAAC;IACDkB,QAAQ,EAAEA,CAACV,KAAK,EAAEC,MAA8C,KAAK;MACnED,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDS,gBAAgB,EAAEA,CAACX,KAAK,EAAEC,MAAyD,KAAK;MACtF,IAAID,KAAK,CAACP,KAAK,CAACQ,MAAM,CAACC,OAAO,CAACU,MAAM,CAAC,EAAE;QACtCZ,KAAK,CAACP,KAAK,CAACQ,MAAM,CAACC,OAAO,CAACU,MAAM,CAAC,CAACC,MAAM,GAAGZ,MAAM,CAACC,OAAO,CAACW,MAAM;MACnE;IACF,CAAC;IACDC,wBAAwB,EAAEA,CAACd,KAAK,EAAEC,MAA2D,KAAK;MAChG,MAAMO,OAAO,GAAGR,KAAK,CAACT,QAAQ,CAACwB,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACP,EAAE,KAAKR,MAAM,CAACC,OAAO,CAACe,SAAS,CAAC;MAC7E,IAAIT,OAAO,EAAE;QACXA,OAAO,CAACU,WAAW,GAAGjB,MAAM,CAACC,OAAO,CAACiB,KAAK;MAC5C;IACF,CAAC;IACDC,UAAU,EAAEA,CAACpB,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACDmB,QAAQ,EAAEA,CAACrB,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,WAAW;EACXI,gBAAgB;EAChBC,UAAU;EACVE,aAAa;EACbI,QAAQ;EACRC,gBAAgB;EAChBG,wBAAwB;EACxBM,UAAU;EACVC;AACF,CAAC,GAAGzB,SAAS,CAAC0B,OAAO;AAErB,eAAe1B,SAAS,CAAC2B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}