{"ast":null,"code":"var _WebSocketService;\nimport { store } from '../../store';\nimport { addMessage, updateMessage, addReaction, removeReaction } from '../../store/messages/messagesSlice';\nimport { updateUserStatus } from '../../store/chat/chatSlice';\n// Get WebSocket URL from environment variable or fallback to localhost\nconst WS_BASE_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n\n// Helper function to get the correct WebSocket URL based on the current protocol\nconst getWebSocketUrl = () => {\n  // If we're on HTTPS, use WSS\n  if (window.location.protocol === 'https:' && WS_BASE_URL.startsWith('ws:')) {\n    return WS_BASE_URL.replace('ws:', 'wss:');\n  }\n  return WS_BASE_URL;\n};\nfunction isReactionAddedMessage(msg) {\n  return msg.type === 'reaction_added' && 'payload' in msg;\n}\nfunction isReactionRemovedMessage(msg) {\n  return msg.type === 'reaction_removed' && 'payload' in msg;\n}\nfunction isNewMessageMessage(msg) {\n  return msg.type === 'new_message' && 'channelId' in msg && 'message' in msg;\n}\nfunction isUpdateMessageMessage(msg) {\n  return msg.type === 'update_message' && 'channelId' in msg && 'id' in msg && 'updates' in msg;\n}\nfunction isUserStatusMessage(msg) {\n  return msg.type === 'user_status' && 'userId' in msg && 'status' in msg;\n}\nexport class WebSocketService {\n  constructor(store) {\n    this.ws = null;\n    this.pingInterval = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.channels = new Set();\n    this.store = null;\n    this.store = store;\n    if (WebSocketService.instance) {\n      return WebSocketService.instance;\n    }\n    WebSocketService.instance = this;\n  }\n  getAuthToken() {\n    var _state$auth;\n    const state = store.getState();\n    return ((_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : _state$auth.token) || null;\n  }\n  connect() {\n    var _this$ws;\n    if (((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN) {\n      console.log('WebSocket already connected');\n      return;\n    }\n    const token = this.getAuthToken();\n    if (!token) {\n      console.warn('No auth token available, skipping WebSocket connection');\n      return;\n    }\n    const wsUrl = `${getWebSocketUrl()}?token=${token}`;\n    console.log('Connecting to WebSocket:', wsUrl);\n    try {\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket connected successfully');\n        this.reconnectAttempts = 0;\n        this.startPingInterval();\n\n        // Rejoin all channels with a small delay to ensure connection is stable\n        setTimeout(() => {\n          console.log('Rejoining channels after connection:', Array.from(this.channels));\n          this.channels.forEach(channelId => {\n            console.log('Rejoining channel:', channelId);\n            this.joinChannel(channelId);\n          });\n        }, 1000);\n      };\n      this.ws.onmessage = event => {\n        console.log('Raw WebSocket message received:', event.data);\n        this.handleMessage(event);\n      };\n      this.ws.onclose = event => {\n        console.log('WebSocket disconnected with code:', event.code, 'reason:', event.reason);\n        this.stopPingInterval();\n        this.handleReconnect();\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n\n      // Store current channels before reconnecting\n      const currentChannels = new Set(this.channels);\n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n\n        // After reconnection, verify channels are rejoined\n        setTimeout(() => {\n          currentChannels.forEach(channelId => {\n            if (!this.channels.has(channelId)) {\n              console.log('Rejoining channel after reconnect:', channelId);\n              this.joinChannel(channelId);\n            }\n          });\n        }, 2000);\n      }, 5000);\n    }\n  }\n  startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      var _this$ws2;\n      if (((_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.readyState) === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'PING'\n        }));\n      }\n    }, 30000);\n  }\n  stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    this.stopPingInterval();\n  }\n  handleMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket received message:', data);\n      switch (data.type) {\n        case 'reaction_added':\n          if (isReactionAddedMessage(data)) {\n            console.log('Handling reaction_added:', data.payload);\n            if (this.store) {\n              const {\n                channelId,\n                messageId,\n                reaction\n              } = data.payload;\n              this.store.dispatch(addReaction({\n                channelId,\n                messageId,\n                reaction\n              }));\n            }\n          }\n          break;\n        case 'reaction_removed':\n          if (isReactionRemovedMessage(data)) {\n            console.log('Handling reaction_removed:', data.payload);\n            if (this.store) {\n              const {\n                channelId,\n                messageId,\n                userId,\n                emoji\n              } = data.payload;\n              this.store.dispatch(removeReaction({\n                channelId,\n                messageId,\n                userId,\n                emoji\n              }));\n            }\n          }\n          break;\n        case 'new_message':\n          if (isNewMessageMessage(data)) {\n            if (this.store) {\n              if (data.isReply && data.parentId) {\n                this.store.dispatch(addMessage({\n                  channelId: data.channelId,\n                  message: {\n                    ...data.message,\n                    parentId: data.parentId\n                  }\n                }));\n              } else {\n                this.store.dispatch(addMessage({\n                  channelId: data.channelId,\n                  message: data.message\n                }));\n              }\n            }\n          }\n          break;\n        case 'update_message':\n          if (isUpdateMessageMessage(data)) {\n            if (this.store) {\n              this.store.dispatch(updateMessage({\n                channelId: data.channelId,\n                messageId: data.id,\n                message: data.updates\n              }));\n            }\n          }\n          break;\n        case 'user_status':\n          if (isUserStatusMessage(data)) {\n            if (this.store) {\n              this.store.dispatch(updateUserStatus({\n                userId: data.userId,\n                status: data.status\n              }));\n            }\n          }\n          break;\n        case 'pong':\n          break;\n        default:\n          console.warn('Unknown message type:', data.type);\n      }\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n    }\n  }\n  joinChannel(channelId) {\n    var _this$ws3;\n    console.log('Joining channel:', channelId);\n    if (((_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.readyState) === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'join_channel',\n        channelId\n      }));\n      this.channels.add(channelId);\n      console.log('Current channels:', Array.from(this.channels));\n    } else {\n      console.warn('WebSocket not connected, queueing channel join for:', channelId);\n      // Add to channels set anyway, will be joined when connection is established\n      this.channels.add(channelId);\n      // Try to reconnect if not already connected\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        this.connect();\n      }\n    }\n  }\n  leaveChannel(channelId) {\n    var _this$ws4;\n    console.log('Leaving channel:', channelId);\n    if (((_this$ws4 = this.ws) === null || _this$ws4 === void 0 ? void 0 : _this$ws4.readyState) === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'leave_channel',\n        channelId\n      }));\n    } else {\n      console.warn('WebSocket not connected, skipping leave message for channel:', channelId);\n    }\n    // Always remove from channels set\n    this.channels.delete(channelId);\n    console.log('Current channels:', Array.from(this.channels));\n  }\n}\n_WebSocketService = WebSocketService;\nWebSocketService.instance = null;\nexport default new WebSocketService(store);","map":{"version":3,"names":["store","addMessage","updateMessage","addReaction","removeReaction","updateUserStatus","WS_BASE_URL","process","env","REACT_APP_WS_URL","getWebSocketUrl","window","location","protocol","startsWith","replace","isReactionAddedMessage","msg","type","isReactionRemovedMessage","isNewMessageMessage","isUpdateMessageMessage","isUserStatusMessage","WebSocketService","constructor","ws","pingInterval","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","channels","Set","instance","getAuthToken","_state$auth","state","getState","auth","token","connect","_this$ws","readyState","WebSocket","OPEN","console","log","warn","wsUrl","onopen","startPingInterval","setTimeout","Array","from","forEach","channelId","joinChannel","onmessage","event","data","handleMessage","onclose","code","reason","stopPingInterval","handleReconnect","onerror","error","currentChannels","has","setInterval","_this$ws2","send","JSON","stringify","clearInterval","disconnect","close","clearTimeout","parse","payload","messageId","reaction","dispatch","userId","emoji","isReply","parentId","message","id","updates","status","_this$ws3","add","CLOSED","leaveChannel","_this$ws4","delete","_WebSocketService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { Reaction } from '../../types';\nimport { store } from '../../store';\nimport { addMessage, updateMessage, addReaction, removeReaction } from '../../store/messages/messagesSlice';\nimport { updateUserStatus } from '../../store/chat/chatSlice';\nimport { Store } from 'redux';\n\n// Get WebSocket URL from environment variable or fallback to localhost\nconst WS_BASE_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n\n// Helper function to get the correct WebSocket URL based on the current protocol\nconst getWebSocketUrl = () => {\n  // If we're on HTTPS, use WSS\n  if (window.location.protocol === 'https:' && WS_BASE_URL.startsWith('ws:')) {\n    return WS_BASE_URL.replace('ws:', 'wss:');\n  }\n  return WS_BASE_URL;\n};\n\ninterface BaseWebSocketMessage {\n  type: string;\n  data?: any;\n}\n\ninterface ReactionAddedMessage extends BaseWebSocketMessage {\n  type: 'reaction_added';\n  payload: {\n    channelId: string;\n    messageId: string;\n    reaction: Reaction;\n  };\n}\n\ninterface ReactionRemovedMessage extends BaseWebSocketMessage {\n  type: 'reaction_removed';\n  payload: {\n    channelId: string;\n    messageId: string;\n    userId: string;\n    emoji: string;\n  };\n}\n\ninterface NewMessageMessage extends BaseWebSocketMessage {\n  type: 'new_message';\n  channelId: string;\n  message: any;\n  isReply?: boolean;\n  parentId?: string;\n}\n\ninterface UpdateMessageMessage extends BaseWebSocketMessage {\n  type: 'update_message';\n  channelId: string;\n  id: string;\n  updates: any;\n}\n\ninterface UserStatusMessage extends BaseWebSocketMessage {\n  type: 'user_status';\n  userId: string;\n  status: 'online' | 'offline' | 'away' | 'busy';\n}\n\ntype WebSocketMessage = \n  | ReactionAddedMessage \n  | ReactionRemovedMessage \n  | NewMessageMessage \n  | UpdateMessageMessage \n  | UserStatusMessage \n  | BaseWebSocketMessage;\n\nfunction isReactionAddedMessage(msg: WebSocketMessage): msg is ReactionAddedMessage {\n  return msg.type === 'reaction_added' && 'payload' in msg;\n}\n\nfunction isReactionRemovedMessage(msg: WebSocketMessage): msg is ReactionRemovedMessage {\n  return msg.type === 'reaction_removed' && 'payload' in msg;\n}\n\nfunction isNewMessageMessage(msg: WebSocketMessage): msg is NewMessageMessage {\n  return msg.type === 'new_message' && 'channelId' in msg && 'message' in msg;\n}\n\nfunction isUpdateMessageMessage(msg: WebSocketMessage): msg is UpdateMessageMessage {\n  return msg.type === 'update_message' && 'channelId' in msg && 'id' in msg && 'updates' in msg;\n}\n\nfunction isUserStatusMessage(msg: WebSocketMessage): msg is UserStatusMessage {\n  return msg.type === 'user_status' && 'userId' in msg && 'status' in msg;\n}\n\nexport class WebSocketService {\n  private static instance: WebSocketService | null = null;\n  private ws: WebSocket | null = null;\n  private pingInterval: NodeJS.Timeout | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private channels: Set<string> = new Set();\n  private store: Store | null = null;\n\n  constructor(store: Store) {\n    this.store = store;\n    if (WebSocketService.instance) {\n      return WebSocketService.instance;\n    }\n    WebSocketService.instance = this;\n  }\n\n  private getAuthToken(): string | null {\n    const state = store.getState();\n    return state.auth?.token || null;\n  }\n\n  public connect() {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      console.log('WebSocket already connected');\n      return;\n    }\n\n    const token = this.getAuthToken();\n    if (!token) {\n      console.warn('No auth token available, skipping WebSocket connection');\n      return;\n    }\n\n    const wsUrl = `${getWebSocketUrl()}?token=${token}`;\n    console.log('Connecting to WebSocket:', wsUrl);\n    \n    try {\n      this.ws = new WebSocket(wsUrl);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected successfully');\n        this.reconnectAttempts = 0;\n        this.startPingInterval();\n        \n        // Rejoin all channels with a small delay to ensure connection is stable\n        setTimeout(() => {\n          console.log('Rejoining channels after connection:', Array.from(this.channels));\n          this.channels.forEach(channelId => {\n            console.log('Rejoining channel:', channelId);\n            this.joinChannel(channelId);\n          });\n        }, 1000);\n      };\n\n      this.ws.onmessage = (event) => {\n        console.log('Raw WebSocket message received:', event.data);\n        this.handleMessage(event);\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('WebSocket disconnected with code:', event.code, 'reason:', event.reason);\n        this.stopPingInterval();\n        this.handleReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n    }\n  }\n\n  private handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      \n      // Store current channels before reconnecting\n      const currentChannels = new Set(this.channels);\n      \n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n        \n        // After reconnection, verify channels are rejoined\n        setTimeout(() => {\n          currentChannels.forEach(channelId => {\n            if (!this.channels.has(channelId)) {\n              console.log('Rejoining channel after reconnect:', channelId);\n              this.joinChannel(channelId);\n            }\n          });\n        }, 2000);\n      }, 5000);\n    }\n  }\n\n  private startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({ type: 'PING' }));\n      }\n    }, 30000);\n  }\n\n  private stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n  }\n\n  public disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    this.stopPingInterval();\n  }\n\n  private handleMessage(event: MessageEvent) {\n    try {\n      const data = JSON.parse(event.data) as WebSocketMessage;\n      console.log('WebSocket received message:', data);\n\n      switch (data.type) {\n        case 'reaction_added':\n          if (isReactionAddedMessage(data)) {\n            console.log('Handling reaction_added:', data.payload);\n            if (this.store) {\n              const { channelId, messageId, reaction } = data.payload;\n              this.store.dispatch(addReaction({ channelId, messageId, reaction }));\n            }\n          }\n          break;\n\n        case 'reaction_removed':\n          if (isReactionRemovedMessage(data)) {\n            console.log('Handling reaction_removed:', data.payload);\n            if (this.store) {\n              const { channelId, messageId, userId, emoji } = data.payload;\n              this.store.dispatch(removeReaction({ channelId, messageId, userId, emoji }));\n            }\n          }\n          break;\n\n        case 'new_message':\n          if (isNewMessageMessage(data)) {\n            if (this.store) {\n              if (data.isReply && data.parentId) {\n                this.store.dispatch(addMessage({ \n                  channelId: data.channelId, \n                  message: { ...data.message, parentId: data.parentId } \n                }));\n              } else {\n                this.store.dispatch(addMessage({ \n                  channelId: data.channelId, \n                  message: data.message \n                }));\n              }\n            }\n          }\n          break;\n\n        case 'update_message':\n          if (isUpdateMessageMessage(data)) {\n            if (this.store) {\n              this.store.dispatch(updateMessage({ \n                channelId: data.channelId,\n                messageId: data.id,\n                message: data.updates\n              }));\n            }\n          }\n          break;\n\n        case 'user_status':\n          if (isUserStatusMessage(data)) {\n            if (this.store) {\n              this.store.dispatch(updateUserStatus({\n                userId: data.userId,\n                status: data.status\n              }));\n            }\n          }\n          break;\n\n        case 'pong':\n          break;\n\n        default:\n          console.warn('Unknown message type:', data.type);\n      }\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n    }\n  }\n\n  public joinChannel(channelId: string) {\n    console.log('Joining channel:', channelId);\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'join_channel',\n        channelId\n      }));\n      this.channels.add(channelId);\n      console.log('Current channels:', Array.from(this.channels));\n    } else {\n      console.warn('WebSocket not connected, queueing channel join for:', channelId);\n      // Add to channels set anyway, will be joined when connection is established\n      this.channels.add(channelId);\n      // Try to reconnect if not already connected\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        this.connect();\n      }\n    }\n  }\n\n  public leaveChannel(channelId: string) {\n    console.log('Leaving channel:', channelId);\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'leave_channel',\n        channelId\n      }));\n    } else {\n      console.warn('WebSocket not connected, skipping leave message for channel:', channelId);\n    }\n    // Always remove from channels set\n    this.channels.delete(channelId);\n    console.log('Current channels:', Array.from(this.channels));\n  }\n}\n\nexport default new WebSocketService(store); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}