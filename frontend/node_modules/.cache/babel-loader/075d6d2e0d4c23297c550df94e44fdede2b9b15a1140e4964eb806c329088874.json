{"ast":null,"code":"import { getAuthToken } from '../api/auth';\n\n// Add WebSocket message types\n\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.currentChannelId = null;\n    this.joinedChannels = new Set();\n    this.messageQueue = [];\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.isReconnecting = false;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.lastMessageId = null;\n    this.processingQueue = false;\n    this.heartbeatInterval = null;\n    this.lastHeartbeatResponse = Date.now();\n    this.handleClose = event => {\n      console.log('[DEBUG] WebSocket closed:', event.code, event.reason);\n      if (this.socket === null) return;\n      const wasConnected = this.socket.readyState === WebSocket.OPEN;\n      this.socket = null;\n      this.joinedChannels.clear();\n      if (event.code !== 1000 && wasConnected) {\n        if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\n          console.log('[DEBUG] Attempting reconnect after close');\n          this.attemptReconnect();\n        }\n      }\n    };\n    // Update message handler to track last message ID\n    this.handleWebSocketMessage = event => {\n      try {\n        var _messageData$channel_;\n        const data = JSON.parse(event.data);\n        console.log('[DEBUG] Raw WebSocket message received:', event.data);\n        console.log('[DEBUG] Parsed WebSocket message:', data);\n\n        // Update heartbeat timestamp for any message\n        this.lastHeartbeatResponse = Date.now();\n\n        // Handle message based on its structure\n        const messageData = data.data || data;\n        const channelId = messageData.channelId || ((_messageData$channel_ = messageData.channel_id) === null || _messageData$channel_ === void 0 ? void 0 : _messageData$channel_.toString());\n        switch (data.type) {\n          case 'new_message':\n            console.log('[DEBUG] Broadcasting new message to handlers:', messageData);\n            this.messageHandlers.forEach(handler => handler({\n              type: 'new_message',\n              data: {\n                message: messageData.message,\n                channelId: channelId\n              }\n            }));\n            break;\n          case 'message_updated':\n            console.log('[DEBUG] Broadcasting updated message to handlers:', messageData);\n            this.messageHandlers.forEach(handler => handler({\n              type: 'message_updated',\n              data: {\n                message: messageData.message,\n                channelId: channelId\n              }\n            }));\n            break;\n          case 'message_deleted':\n            console.log('[DEBUG] Broadcasting deleted message to handlers:', messageData);\n            this.messageHandlers.forEach(handler => handler({\n              type: 'message_deleted',\n              data: {\n                messageId: messageData.messageId || messageData.message_id,\n                channelId: channelId\n              }\n            }));\n            break;\n          case 'new_reply':\n            console.log('[DEBUG] Broadcasting new reply to handlers:', messageData);\n            this.messageHandlers.forEach(handler => handler({\n              type: 'new_reply',\n              data: {\n                reply: messageData.reply,\n                parentMessageId: messageData.parentMessageId || messageData.parent_id,\n                channelId: channelId\n              }\n            }));\n            break;\n          case 'channel_joined':\n            console.log('[DEBUG] Channel joined confirmation:', messageData);\n            this.joinedChannels.add(channelId);\n            break;\n          case 'pong':\n            console.log('[DEBUG] Received heartbeat response');\n            break;\n          default:\n            console.log('[DEBUG] Unknown websocket message type:', data.type);\n        }\n      } catch (error) {\n        console.error('Error handling websocket message:', error);\n        this.handleError(error);\n      }\n    };\n  }\n  async connect(channelId) {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      console.log('Already connected to channel:', channelId);\n      return;\n    }\n\n    // Always disconnect before connecting to ensure clean state\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    try {\n      const token = getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      console.log('Connecting to WebSocket server...');\n      // Use port 8000 and correct path for WebSocket connection\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//localhost:8000/ws/chat?token=${token}`;\n      console.log('WebSocket URL:', wsUrl.replace(token, '[REDACTED]'));\n      this.socket = new WebSocket(wsUrl);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          console.error('WebSocket connection timeout');\n          reject(new Error('WebSocket connection timeout'));\n        }, 5000);\n        if (this.socket) {\n          this.socket.onopen = () => {\n            console.log('WebSocket connection opened successfully');\n            clearTimeout(timeout);\n            this.startHeartbeat();\n            resolve();\n          };\n          this.socket.onerror = error => {\n            console.error('WebSocket connection error:', error);\n            clearTimeout(timeout);\n            reject(error);\n          };\n          this.socket.onclose = event => {\n            console.log('WebSocket connection closed:', event.code, event.reason);\n            this.handleClose(event);\n          };\n          this.socket.onmessage = event => {\n            try {\n              console.log('Raw WebSocket message received:', event.data);\n              this.handleWebSocketMessage(event);\n            } catch (error) {\n              console.error('Error handling WebSocket message:', error);\n            }\n          };\n        }\n      });\n      if (this.socket) {\n        console.log('Joining channel:', channelId);\n        await this.joinChannel(channelId);\n        console.log('Successfully joined channel:', channelId);\n      }\n    } catch (error) {\n      console.error('WebSocket connection failed:', error);\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    }\n  }\n  startHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    this.heartbeatInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      // Check if we haven't received a heartbeat response in 30 seconds\n      if (Date.now() - this.lastHeartbeatResponse > 30000) {\n        console.warn('No heartbeat response received, reconnecting...');\n        this.reconnect();\n        return;\n      }\n      try {\n        var _this$socket;\n        (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.send(JSON.stringify({\n          type: 'ping'\n        }));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n        this.reconnect();\n      }\n    }, 15000); // Send heartbeat every 15 seconds\n  }\n  reconnect() {\n    if (this.currentChannelId) {\n      this.disconnect();\n      this.connect(this.currentChannelId).catch(console.error);\n    }\n  }\n  async joinChannel(channelId) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('Cannot join channel - socket not connected');\n      throw new Error('WebSocket not connected');\n    }\n    console.log('[DEBUG] Sending join channel message:', channelId);\n    const joinMessage = {\n      type: 'join_channel',\n      channel_id: parseInt(channelId, 10)\n    };\n    try {\n      this.socket.send(JSON.stringify(joinMessage));\n      console.log('[DEBUG] Join channel message sent');\n\n      // Wait for join confirmation\n      await new Promise((resolve, reject) => {\n        var _this$socket3;\n        const timeout = setTimeout(() => {\n          reject(new Error('Channel join timeout'));\n        }, 5000);\n        const joinHandler = event => {\n          try {\n            var _data$channel_id;\n            const data = JSON.parse(event.data);\n            console.log('[DEBUG] Received message while waiting for join:', data);\n            if (data.type === 'channel_joined' && ((_data$channel_id = data.channel_id) === null || _data$channel_id === void 0 ? void 0 : _data$channel_id.toString()) === channelId) {\n              var _this$socket2;\n              console.log('[DEBUG] Successfully joined channel:', channelId);\n              (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.removeEventListener('message', joinHandler);\n              clearTimeout(timeout);\n              this.joinedChannels.add(channelId);\n              resolve();\n            }\n          } catch (error) {\n            console.error('Error handling join response:', error);\n          }\n        };\n        (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.addEventListener('message', joinHandler);\n      });\n    } catch (error) {\n      console.error('Error joining channel:', error);\n      throw error;\n    }\n  }\n  handleError(error) {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n  isConnected() {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n  isConnectedToChannel(channelId) {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onError(handler) {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n  disconnect() {\n    console.log('[DEBUG] Disconnecting WebSocket...');\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.currentChannelId = null;\n    console.log('[DEBUG] WebSocket disconnected and state cleared');\n  }\n  async processMessageQueue() {\n    if (this.processingQueue || this.messageQueue.length === 0) return;\n    this.processingQueue = true;\n    console.log(`Processing message queue (${this.messageQueue.length} messages)`);\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue[0];\n      try {\n        if (this.isConnectedToChannel(message.channelId)) {\n          await this.sendMessage(message.channelId, message.content);\n          this.messageQueue.shift(); // Remove the successfully sent message\n        } else {\n          // If we're not connected to the channel, try to connect\n          try {\n            await this.connect(message.channelId);\n          } catch (error) {\n            console.error('Failed to connect while processing queue:', error);\n            break; // Stop processing if we can't connect\n          }\n        }\n      } catch (error) {\n        console.error('Failed to send queued message:', error);\n        // If sending fails, leave the message in the queue and try again later\n        break;\n      }\n    }\n    this.processingQueue = false;\n  }\n  async sendMessage(channelId, content) {\n    console.log('Attempting to send message:', {\n      channelId,\n      content\n    });\n    if (!this.isConnectedToChannel(channelId)) {\n      console.log('Not connected to channel, attempting to connect...');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('Failed to connect:', error);\n        throw error;\n      }\n    }\n    const message = {\n      type: 'message',\n      data: {\n        channel_id: parseInt(channelId),\n        content: content\n      }\n    };\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      throw new Error('WebSocket is not connected');\n    }\n    try {\n      console.log('Sending WebSocket message:', message);\n      this.socket.send(JSON.stringify(message));\n      console.log('Message sent successfully');\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n  async attemptReconnect() {\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\n      return;\n    }\n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n    if (this.currentChannelId) {\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n      this.reconnectTimeout = setTimeout(async () => {\n        try {\n          await this.connect(this.currentChannelId);\n          this.isReconnecting = false;\n          // Process any queued messages after successful reconnection\n          await this.processMessageQueue();\n        } catch (error) {\n          console.error('Reconnection failed:', error);\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.isReconnecting = false; // Reset flag to allow next attempt\n            this.attemptReconnect();\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.isReconnecting = false;\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\n          }\n        }\n      }, backoffTime);\n    } else {\n      this.isReconnecting = false;\n    }\n  }\n  getChatSocketState() {\n    var _this$socket4;\n    return ((_this$socket4 = this.socket) === null || _this$socket4 === void 0 ? void 0 : _this$socket4.readyState) || WebSocket.CLOSED;\n  }\n  offMessage(handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n  offError(handler) {\n    this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WebSocketService","constructor","socket","messageHandlers","errorHandlers","currentChannelId","joinedChannels","Set","messageQueue","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","isReconnecting","connectionPromise","joinPromise","lastMessageId","processingQueue","heartbeatInterval","lastHeartbeatResponse","Date","now","handleClose","event","console","log","code","reason","wasConnected","readyState","WebSocket","OPEN","clear","attemptReconnect","handleWebSocketMessage","_messageData$channel_","data","JSON","parse","messageData","channelId","channel_id","toString","type","forEach","handler","message","messageId","message_id","reply","parentMessageId","parent_id","add","error","handleError","connect","isConnected","isConnectedToChannel","disconnect","token","Error","wsProtocol","window","location","protocol","wsUrl","replace","Promise","resolve","reject","timeout","setTimeout","onopen","clearTimeout","startHeartbeat","onerror","onclose","onmessage","joinChannel","clearInterval","setInterval","warn","reconnect","_this$socket","send","stringify","catch","joinMessage","parseInt","_this$socket3","joinHandler","_data$channel_id","_this$socket2","removeEventListener","addEventListener","has","onMessage","push","filter","h","onError","close","processMessageQueue","length","sendMessage","content","shift","backoffTime","Math","min","pow","getChatSocketState","_this$socket4","CLOSED","offMessage","offError","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage, Message } from '../../types';\nimport { getAuthToken } from '../api/auth';\nimport { store } from '../../store';\nimport { addMessage, setReplies } from '../../store/messages/messagesSlice';\n\n// Add WebSocket message types\ninterface WebSocketJoinMessage {\n  type: 'join_channel';\n  channel_id: string;\n}\n\ninterface WebSocketJoinResponse {\n  type: 'channel_joined' | 'channel_join_error';\n  channelId: string;\n  error?: string;\n}\n\nclass WebSocketService {\n  private socket: WebSocket | null = null;\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\n  private errorHandlers: ((error: Error) => void)[] = [];\n  private currentChannelId: string | null = null;\n  private joinedChannels: Set<string> = new Set();\n  private messageQueue: { channelId: string; content: string }[] = [];\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private isReconnecting = false;\n  private connectionPromise: Promise<void> | null = null;\n  private joinPromise: Promise<void> | null = null;\n  private lastMessageId: string | null = null;\n  private processingQueue = false;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private lastHeartbeatResponse: number = Date.now();\n\n  public async connect(channelId: string): Promise<void> {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      console.log('Already connected to channel:', channelId);\n      return;\n    }\n\n    // Always disconnect before connecting to ensure clean state\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    \n    try {\n      const token = getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      console.log('Connecting to WebSocket server...');\n      // Use port 8000 and correct path for WebSocket connection\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//localhost:8000/ws/chat?token=${token}`;\n      console.log('WebSocket URL:', wsUrl.replace(token, '[REDACTED]'));\n      \n      this.socket = new WebSocket(wsUrl);\n\n      await new Promise<void>((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          console.error('WebSocket connection timeout');\n          reject(new Error('WebSocket connection timeout'));\n        }, 5000);\n\n        if (this.socket) {\n          this.socket.onopen = () => {\n            console.log('WebSocket connection opened successfully');\n            clearTimeout(timeout);\n            this.startHeartbeat();\n            resolve();\n          };\n\n          this.socket.onerror = (error) => {\n            console.error('WebSocket connection error:', error);\n            clearTimeout(timeout);\n            reject(error);\n          };\n\n          this.socket.onclose = (event) => {\n            console.log('WebSocket connection closed:', event.code, event.reason);\n            this.handleClose(event);\n          };\n\n          this.socket.onmessage = (event) => {\n            try {\n              console.log('Raw WebSocket message received:', event.data);\n              this.handleWebSocketMessage(event);\n            } catch (error) {\n              console.error('Error handling WebSocket message:', error);\n            }\n          };\n        }\n      });\n\n      if (this.socket) {\n        console.log('Joining channel:', channelId);\n        await this.joinChannel(channelId);\n        console.log('Successfully joined channel:', channelId);\n      }\n      \n    } catch (error) {\n      console.error('WebSocket connection failed:', error);\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    }\n  }\n\n  private startHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n\n    this.heartbeatInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      // Check if we haven't received a heartbeat response in 30 seconds\n      if (Date.now() - this.lastHeartbeatResponse > 30000) {\n        console.warn('No heartbeat response received, reconnecting...');\n        this.reconnect();\n        return;\n      }\n\n      try {\n        this.socket?.send(JSON.stringify({ type: 'ping' }));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n        this.reconnect();\n      }\n    }, 15000); // Send heartbeat every 15 seconds\n  }\n\n  private reconnect(): void {\n    if (this.currentChannelId) {\n      this.disconnect();\n      this.connect(this.currentChannelId).catch(console.error);\n    }\n  }\n\n  private handleClose = (event: CloseEvent) => {\n    console.log('[DEBUG] WebSocket closed:', event.code, event.reason);\n    if (this.socket === null) return;\n    \n    const wasConnected = this.socket.readyState === WebSocket.OPEN;\n    this.socket = null;\n    this.joinedChannels.clear();\n\n    if (event.code !== 1000 && wasConnected) {\n      if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\n        console.log('[DEBUG] Attempting reconnect after close');\n        this.attemptReconnect();\n      }\n    }\n  };\n\n  public async joinChannel(channelId: string): Promise<void> {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('Cannot join channel - socket not connected');\n      throw new Error('WebSocket not connected');\n    }\n\n    console.log('[DEBUG] Sending join channel message:', channelId);\n    const joinMessage = {\n      type: 'join_channel',\n      channel_id: parseInt(channelId, 10)\n    };\n    \n    try {\n      this.socket.send(JSON.stringify(joinMessage));\n      console.log('[DEBUG] Join channel message sent');\n      \n      // Wait for join confirmation\n      await new Promise<void>((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('Channel join timeout'));\n        }, 5000);\n\n        const joinHandler = (event: MessageEvent) => {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('[DEBUG] Received message while waiting for join:', data);\n            \n            if (data.type === 'channel_joined' && data.channel_id?.toString() === channelId) {\n              console.log('[DEBUG] Successfully joined channel:', channelId);\n              this.socket?.removeEventListener('message', joinHandler);\n              clearTimeout(timeout);\n              this.joinedChannels.add(channelId);\n              resolve();\n            }\n          } catch (error) {\n            console.error('Error handling join response:', error);\n          }\n        };\n\n        this.socket?.addEventListener('message', joinHandler);\n      });\n    } catch (error) {\n      console.error('Error joining channel:', error);\n      throw error;\n    }\n  }\n\n  private handleError(error: Error): void {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n\n  public isConnected(): boolean {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n\n  private isConnectedToChannel(channelId: string): boolean {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n\n  public onMessage(handler: (message: WebSocketMessage) => void): () => void {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n\n  public onError(handler: (error: Error) => void): () => void {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n\n  public disconnect(): void {\n    console.log('[DEBUG] Disconnecting WebSocket...');\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.currentChannelId = null;\n    console.log('[DEBUG] WebSocket disconnected and state cleared');\n  }\n\n  private async processMessageQueue(): Promise<void> {\n    if (this.processingQueue || this.messageQueue.length === 0) return;\n\n    this.processingQueue = true;\n    console.log(`Processing message queue (${this.messageQueue.length} messages)`);\n\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue[0];\n      \n      try {\n        if (this.isConnectedToChannel(message.channelId)) {\n          await this.sendMessage(message.channelId, message.content);\n          this.messageQueue.shift(); // Remove the successfully sent message\n        } else {\n          // If we're not connected to the channel, try to connect\n          try {\n            await this.connect(message.channelId);\n          } catch (error) {\n            console.error('Failed to connect while processing queue:', error);\n            break; // Stop processing if we can't connect\n          }\n        }\n      } catch (error) {\n        console.error('Failed to send queued message:', error);\n        // If sending fails, leave the message in the queue and try again later\n        break;\n      }\n    }\n\n    this.processingQueue = false;\n  }\n\n  public async sendMessage(channelId: string, content: string): Promise<void> {\n    console.log('Attempting to send message:', { channelId, content });\n\n    if (!this.isConnectedToChannel(channelId)) {\n      console.log('Not connected to channel, attempting to connect...');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('Failed to connect:', error);\n        throw error;\n      }\n    }\n\n    const message = {\n      type: 'message',\n      data: {\n        channel_id: parseInt(channelId),\n        content: content\n      }\n    };\n\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      throw new Error('WebSocket is not connected');\n    }\n\n    try {\n      console.log('Sending WebSocket message:', message);\n      this.socket.send(JSON.stringify(message));\n      console.log('Message sent successfully');\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  private async attemptReconnect(): Promise<void> {\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\n      return;\n    }\n\n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n\n    if (this.currentChannelId) {\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n      \n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n\n      this.reconnectTimeout = setTimeout(async () => {\n        try {\n          await this.connect(this.currentChannelId!);\n          this.isReconnecting = false;\n          // Process any queued messages after successful reconnection\n          await this.processMessageQueue();\n        } catch (error) {\n          console.error('Reconnection failed:', error);\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.isReconnecting = false; // Reset flag to allow next attempt\n            this.attemptReconnect();\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.isReconnecting = false;\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\n          }\n        }\n      }, backoffTime);\n    } else {\n      this.isReconnecting = false;\n    }\n  }\n\n  public getChatSocketState(): number {\n    return this.socket?.readyState || WebSocket.CLOSED;\n  }\n\n  // Update message handler to track last message ID\n  private handleWebSocketMessage = (event: MessageEvent) => {\n    try {\n      const data = JSON.parse(event.data) as WebSocketMessage;\n      console.log('[DEBUG] Raw WebSocket message received:', event.data);\n      console.log('[DEBUG] Parsed WebSocket message:', data);\n      \n      // Update heartbeat timestamp for any message\n      this.lastHeartbeatResponse = Date.now();\n\n      // Handle message based on its structure\n      const messageData = data.data || data;\n      const channelId = messageData.channelId || messageData.channel_id?.toString();\n      \n      switch (data.type) {\n        case 'new_message':\n          console.log('[DEBUG] Broadcasting new message to handlers:', messageData);\n          this.messageHandlers.forEach(handler => handler({\n            type: 'new_message',\n            data: {\n              message: messageData.message as Message,\n              channelId: channelId as string\n            }\n          }));\n          break;\n          \n        case 'message_updated':\n          console.log('[DEBUG] Broadcasting updated message to handlers:', messageData);\n          this.messageHandlers.forEach(handler => handler({\n            type: 'message_updated',\n            data: {\n              message: messageData.message as Message,\n              channelId: channelId as string\n            }\n          }));\n          break;\n          \n        case 'message_deleted':\n          console.log('[DEBUG] Broadcasting deleted message to handlers:', messageData);\n          this.messageHandlers.forEach(handler => handler({\n            type: 'message_deleted',\n            data: {\n              messageId: messageData.messageId || messageData.message_id as string,\n              channelId: channelId as string\n            }\n          }));\n          break;\n          \n        case 'new_reply':\n          console.log('[DEBUG] Broadcasting new reply to handlers:', messageData);\n          this.messageHandlers.forEach(handler => handler({\n            type: 'new_reply',\n            data: {\n              reply: messageData.reply as Message,\n              parentMessageId: messageData.parentMessageId || messageData.parent_id as string,\n              channelId: channelId as string\n            }\n          }));\n          break;\n\n        case 'channel_joined':\n          console.log('[DEBUG] Channel joined confirmation:', messageData);\n          this.joinedChannels.add(channelId as string);\n          break;\n\n        case 'pong':\n          console.log('[DEBUG] Received heartbeat response');\n          break;\n\n        default:\n          console.log('[DEBUG] Unknown websocket message type:', data.type);\n      }\n    } catch (error) {\n      console.error('Error handling websocket message:', error);\n      this.handleError(error as Error);\n    }\n  };\n\n  public offMessage(handler: (message: WebSocketMessage) => void): void {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n\n  public offError(handler: (error: Error) => void): void {\n    this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n  }\n}\n\nconst wsService = new WebSocketService();\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}