{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatMessage from '../../common/ChatMessage';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { fetchMessagesSuccess } from '../../../store/messages/messagesSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column-reverse; // Makes messages start from bottom\n  padding: 16px;\n  gap: 2px;\n`;\n_c = MessageListContainer;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n_c2 = LoadingMessage;\nconst NoMessagesMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = NoMessagesMessage;\nconst MESSAGES_PER_PAGE = 30;\n\n// Transform API message to store message format\nconst transformMessage = msg => ({\n  id: String(msg.id),\n  content: msg.content,\n  channelId: String(msg.channel_id),\n  userId: String(msg.sender_id),\n  reactions: [],\n  createdAt: msg.created_at,\n  updatedAt: msg.created_at,\n  isSystem: msg.is_system || false\n});\nconst MessageList = ({\n  channelId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  console.log('MessageList render:', {\n    channelId,\n    isLoadingMore,\n    hasMoreMessages\n  });\n  const messages = useSelector(state => {\n    var _state$messages;\n    if (!channelId || !((_state$messages = state.messages) !== null && _state$messages !== void 0 && _state$messages.messagesByChannel)) return [];\n    return state.messages.messagesByChannel[String(channelId)] || [];\n  });\n  const users = useSelector(state => {\n    var _state$chat;\n    return ((_state$chat = state.chat) === null || _state$chat === void 0 ? void 0 : _state$chat.users) || {};\n  });\n  console.log('Current state:', {\n    channelId,\n    messagesCount: messages.length,\n    usersCount: Object.keys(users).length,\n    messages,\n    users\n  });\n\n  // Initial message load\n  useEffect(() => {\n    console.log('MessageList useEffect triggered:', {\n      channelId\n    });\n    if (channelId) {\n      console.log('Starting to fetch messages for channel:', channelId);\n      setIsLoadingMore(true);\n      setHasMoreMessages(true);\n      getChannelMessages(channelId, MESSAGES_PER_PAGE).then(apiMessages => {\n        console.log('Received messages from API:', apiMessages);\n        if (apiMessages.length < MESSAGES_PER_PAGE) {\n          console.log('No more messages available');\n          setHasMoreMessages(false);\n        }\n        const storeMessages = apiMessages.map(transformMessage);\n        console.log('Transformed messages:', storeMessages);\n        dispatch(fetchMessagesSuccess({\n          channelId: String(channelId),\n          messages: storeMessages\n        }));\n      }).catch(error => {\n        console.error('Failed to fetch messages:', error);\n      }).finally(() => {\n        console.log('Finished fetching messages');\n        setIsLoadingMore(false);\n      });\n    }\n  }, [channelId, dispatch]);\n  if (!channelId) {\n    console.log('No channel selected');\n    return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n      children: /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n        children: \"Select a channel to view messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n  if (isLoadingMore && messages.length === 0) {\n    console.log('Loading initial messages...');\n    return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n      children: /*#__PURE__*/_jsxDEV(LoadingMessage, {\n        children: \"Loading messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isLoadingMore && messages.length === 0) {\n    console.log('No messages found');\n    return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n      children: /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n        children: \"No messages yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n  console.log('Rendering messages:', messages);\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: messages.map(message => {\n      const user = users[Number(message.userId)];\n      console.log('Rendering message:', {\n        message,\n        user\n      });\n      return /*#__PURE__*/_jsxDEV(ChatMessage, {\n        content: message.content,\n        sender: (user === null || user === void 0 ? void 0 : user.username) || 'Unknown User',\n        timestamp: message.createdAt,\n        isSystem: false\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"YHagrVrIbcEXZr9lxxneAvZAf3M=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c4 = MessageList;\nexport default MessageList;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"LoadingMessage\");\n$RefreshReg$(_c3, \"NoMessagesMessage\");\n$RefreshReg$(_c4, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","ChatMessage","getChannelMessages","fetchMessagesSuccess","jsxDEV","_jsxDEV","MessageListContainer","div","_c","LoadingMessage","props","theme","colors","textSecondary","_c2","NoMessagesMessage","secondary","_c3","MESSAGES_PER_PAGE","transformMessage","msg","id","String","content","channelId","channel_id","userId","sender_id","reactions","createdAt","created_at","updatedAt","isSystem","is_system","MessageList","_s","dispatch","containerRef","isLoadingMore","setIsLoadingMore","hasMoreMessages","setHasMoreMessages","console","log","messages","state","_state$messages","messagesByChannel","users","_state$chat","chat","messagesCount","length","usersCount","Object","keys","then","apiMessages","storeMessages","map","catch","error","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","message","user","Number","sender","username","timestamp","_c4","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ChatMessage from '../../common/ChatMessage';\r\nimport { getChannelMessages } from '../../../services/api/chat';\r\nimport { fetchMessagesSuccess } from '../../../store/messages/messagesSlice';\r\nimport { Message as ApiMessage } from '../../../types';\r\nimport { Message as StoreMessage } from '../../../store/types';\r\nimport { RootState } from '../../../store/rootReducer';\r\n\r\nconst MessageListContainer = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column-reverse; // Makes messages start from bottom\r\n  padding: 16px;\r\n  gap: 2px;\r\n`;\r\n\r\nconst LoadingMessage = styled.div`\r\n  text-align: center;\r\n  padding: 8px;\r\n  color: ${props => props.theme.colors.textSecondary};\r\n  font-family: 'Courier New', monospace;\r\n  font-style: italic;\r\n`;\r\n\r\nconst NoMessagesMessage = styled.div`\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: ${props => props.theme.colors.secondary};\r\n  font-family: 'Courier New', monospace;\r\n`;\r\n\r\ninterface MessageListProps {\r\n  channelId: number | null;\r\n}\r\n\r\nconst MESSAGES_PER_PAGE = 30;\r\n\r\n// Transform API message to store message format\r\nconst transformMessage = (msg: ApiMessage): StoreMessage => ({\r\n  id: String(msg.id),\r\n  content: msg.content,\r\n  channelId: String(msg.channel_id),\r\n  userId: String(msg.sender_id),\r\n  reactions: [],\r\n  createdAt: msg.created_at,\r\n  updatedAt: msg.created_at,\r\n  isSystem: msg.is_system || false\r\n});\r\n\r\nconst MessageList: React.FC<MessageListProps> = ({ channelId }) => {\r\n  const dispatch = useDispatch();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\r\n\r\n  console.log('MessageList render:', { channelId, isLoadingMore, hasMoreMessages });\r\n\r\n  const messages = useSelector((state: RootState) => {\r\n    if (!channelId || !state.messages?.messagesByChannel) return [];\r\n    return state.messages.messagesByChannel[String(channelId)] || [];\r\n  });\r\n  \r\n  const users = useSelector((state: RootState) => state.chat?.users || {});\r\n\r\n  console.log('Current state:', { \r\n    channelId, \r\n    messagesCount: messages.length,\r\n    usersCount: Object.keys(users).length,\r\n    messages,\r\n    users \r\n  });\r\n\r\n  // Initial message load\r\n  useEffect(() => {\r\n    console.log('MessageList useEffect triggered:', { channelId });\r\n    \r\n    if (channelId) {\r\n      console.log('Starting to fetch messages for channel:', channelId);\r\n      setIsLoadingMore(true);\r\n      setHasMoreMessages(true);\r\n      \r\n      getChannelMessages(channelId, MESSAGES_PER_PAGE)\r\n        .then(apiMessages => {\r\n          console.log('Received messages from API:', apiMessages);\r\n          if (apiMessages.length < MESSAGES_PER_PAGE) {\r\n            console.log('No more messages available');\r\n            setHasMoreMessages(false);\r\n          }\r\n          const storeMessages = apiMessages.map(transformMessage);\r\n          console.log('Transformed messages:', storeMessages);\r\n          dispatch(fetchMessagesSuccess({ \r\n            channelId: String(channelId), \r\n            messages: storeMessages \r\n          }));\r\n        })\r\n        .catch(error => {\r\n          console.error('Failed to fetch messages:', error);\r\n        })\r\n        .finally(() => {\r\n          console.log('Finished fetching messages');\r\n          setIsLoadingMore(false);\r\n        });\r\n    }\r\n  }, [channelId, dispatch]);\r\n\r\n  if (!channelId) {\r\n    console.log('No channel selected');\r\n    return (\r\n      <MessageListContainer>\r\n        <NoMessagesMessage>Select a channel to view messages</NoMessagesMessage>\r\n      </MessageListContainer>\r\n    );\r\n  }\r\n\r\n  if (isLoadingMore && messages.length === 0) {\r\n    console.log('Loading initial messages...');\r\n    return (\r\n      <MessageListContainer>\r\n        <LoadingMessage>Loading messages...</LoadingMessage>\r\n      </MessageListContainer>\r\n    );\r\n  }\r\n\r\n  if (!isLoadingMore && messages.length === 0) {\r\n    console.log('No messages found');\r\n    return (\r\n      <MessageListContainer>\r\n        <NoMessagesMessage>No messages yet</NoMessagesMessage>\r\n      </MessageListContainer>\r\n    );\r\n  }\r\n\r\n  console.log('Rendering messages:', messages);\r\n\r\n  return (\r\n    <MessageListContainer ref={containerRef}>\r\n      {messages.map(message => {\r\n        const user = users[Number(message.userId)];\r\n        console.log('Rendering message:', { message, user });\r\n        return (\r\n          <ChatMessage\r\n            key={message.id}\r\n            content={message.content}\r\n            sender={user?.username || 'Unknown User'}\r\n            timestamp={message.createdAt}\r\n            isSystem={false}\r\n          />\r\n        );\r\n      })}\r\n    </MessageListContainer>\r\n  );\r\n};\r\n\r\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}