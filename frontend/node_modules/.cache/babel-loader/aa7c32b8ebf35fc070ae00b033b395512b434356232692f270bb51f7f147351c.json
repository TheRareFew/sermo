{"ast":null,"code":"import { getAuthToken } from '../api/auth';\nimport { store } from '../../store';\nimport { addMessage } from '../../store/messages/messagesSlice';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.currentChannelId = null;\n    this.processedMessageIds = new Set();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.isReconnecting = false;\n    this.messageQueue = [];\n    this.joinChannelResolvers = new Map();\n    this.handleMessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('WebSocket message received:', message);\n\n        // Handle join channel response\n        if (message.type === 'channel_joined') {\n          const resolvers = this.joinChannelResolvers.get(String(message.channel_id));\n          if (resolvers) {\n            resolvers.resolve();\n            this.joinChannelResolvers.delete(String(message.channel_id));\n            // Process any queued messages after successful join\n            this.processMessageQueue();\n          }\n          return;\n        }\n\n        // Handle join channel error\n        if (message.type === 'channel_join_error') {\n          const resolvers = this.joinChannelResolvers.get(String(message.channel_id));\n          if (resolvers) {\n            resolvers.reject(new Error(message.message || 'Failed to join channel'));\n            this.joinChannelResolvers.delete(String(message.channel_id));\n          }\n          return;\n        }\n\n        // Handle error messages\n        if (message.type === 'error') {\n          console.error('WebSocket error message:', message);\n          this.handleError({\n            code: message.code,\n            message: message.content\n          });\n          return;\n        }\n\n        // Handle channel access errors\n        if (message.type === 'channel_access_denied') {\n          console.error('Channel access denied:', message);\n          this.handleError({\n            code: 'CHANNEL_ACCESS_DENIED',\n            message: message.message || 'Access to this channel was denied'\n          });\n          return;\n        }\n\n        // Filter out message_sent confirmations\n        if (message.type === 'message_sent') {\n          console.log('Message sent confirmation received');\n          return;\n        }\n\n        // Handle new messages\n        if (message.type === 'message' && 'message' in message) {\n          const {\n            message: chatMessage\n          } = message;\n          if (!chatMessage || typeof chatMessage === 'string') {\n            console.error('Invalid message format:', message);\n            return;\n          }\n          const messageId = chatMessage.id;\n          if (messageId) {\n            if (this.processedMessageIds.has(messageId)) {\n              console.log('Ignoring duplicate message:', messageId);\n              return;\n            }\n            this.processedMessageIds.add(messageId);\n\n            // Limit the size of the Set to prevent memory growth\n            if (this.processedMessageIds.size > 1000) {\n              const idsArray = Array.from(this.processedMessageIds);\n              this.processedMessageIds = new Set(idsArray.slice(-500));\n            }\n\n            // Transform and dispatch the message to Redux store\n            const storeMessage = {\n              id: String(chatMessage.id),\n              content: chatMessage.content,\n              channelId: String(chatMessage.channel_id),\n              userId: String(chatMessage.sender_id),\n              reactions: [],\n              attachments: [],\n              createdAt: chatMessage.created_at,\n              updatedAt: chatMessage.created_at\n            };\n            store.dispatch(addMessage(storeMessage));\n          }\n        }\n\n        // Handle successful messages\n        this.messageHandlers.forEach(handler => handler(message));\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n  }\n  getReconnectDelay() {\n    // Exponential backoff: 1s, 2s, 4s, 8s, 16s\n    return Math.min(1000 * Math.pow(2, this.reconnectAttempts), 16000);\n  }\n  async attemptReconnect(channelId) {\n    if (this.isReconnecting) {\n      console.log('Already attempting to reconnect...');\n      return;\n    }\n    this.isReconnecting = true;\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      this.errorHandlers.forEach(handler => handler({\n        code: 'MAX_RECONNECT_ATTEMPTS',\n        message: 'Unable to reconnect after multiple attempts. Please refresh the page.'\n      }));\n      this.isReconnecting = false;\n      return;\n    }\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})...`);\n    try {\n      // Add a small delay before reconnecting\n      await new Promise(resolve => setTimeout(resolve, this.getReconnectDelay()));\n      await this.connect(channelId);\n      this.reconnectAttempts = 0;\n      this.isReconnecting = false;\n    } catch (error) {\n      this.reconnectAttempts++;\n      this.isReconnecting = false;\n\n      // Schedule next reconnection attempt\n      const delay = this.getReconnectDelay();\n      console.log(`Scheduling next reconnection attempt in ${delay}ms`);\n      this.reconnectTimeout = setTimeout(() => {\n        this.attemptReconnect(channelId);\n      }, delay);\n    }\n  }\n  handleError(error) {\n    let errorMessage = 'WebSocket connection error';\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler({\n      code: 'WEBSOCKET_ERROR',\n      message: errorMessage\n    }));\n  }\n  connect(channelId) {\n    return new Promise((resolve, reject) => {\n      var _this$socket, _this$socket2;\n      // Clear any existing reconnection timeout\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n        this.reconnectTimeout = null;\n      }\n\n      // If already connected to this channel, do nothing\n      if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN && this.currentChannelId === channelId) {\n        console.log('WebSocket already connected to channel', channelId);\n        resolve();\n        return;\n      }\n\n      // If connected to a different channel, disconnect first\n      if (((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.readyState) === WebSocket.OPEN && this.currentChannelId !== channelId) {\n        console.log('Disconnecting from channel', this.currentChannelId);\n        this.disconnect();\n      }\n      const token = getAuthToken();\n      if (!token) {\n        const error = new Error('No auth token available for WebSocket connection');\n        this.handleError(error);\n        reject(error);\n        return;\n      }\n      const baseWsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n      const wsUrl = `${baseWsUrl}/chat?token=${token}`;\n      console.log('Connecting to WebSocket:', wsUrl);\n      try {\n        this.socket = new WebSocket(wsUrl);\n        this.currentChannelId = channelId;\n        this.processedMessageIds.clear();\n        let hasResolved = false;\n        let connectionTimeout;\n\n        // Set a connection timeout\n        connectionTimeout = setTimeout(() => {\n          if (!hasResolved) {\n            var _this$socket3;\n            console.error('WebSocket connection timeout');\n            this.handleError('Connection timeout. Attempting to reconnect...');\n            (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.close();\n            // Instead of rejecting, attempt to reconnect\n            this.attemptReconnect(channelId);\n          }\n        }, 10000);\n        this.socket.onopen = () => {\n          clearTimeout(connectionTimeout);\n          console.log('WebSocket connection opened');\n          this.joinChannel(channelId).then(() => {\n            hasResolved = true;\n            resolve();\n          }).catch(error => {\n            console.error('Failed to join channel:', error);\n            this.handleError('Failed to join channel. Attempting to reconnect...');\n            // Instead of rejecting, attempt to reconnect\n            this.attemptReconnect(channelId);\n          });\n        };\n        this.socket.onmessage = this.handleMessage;\n        this.socket.onerror = event => {\n          console.error('WebSocket error:', event);\n          // Don't reject here, let onclose handle the reconnection\n          this.handleError('Connection error. Attempting to reconnect...');\n        };\n        this.socket.onclose = event => {\n          clearTimeout(connectionTimeout);\n          console.log('WebSocket disconnected with code:', event.code);\n          this.socket = null;\n\n          // Handle specific close codes\n          switch (event.code) {\n            case 1000:\n              // Normal closure\n              this.currentChannelId = null;\n              if (!hasResolved) {\n                resolve(); // Resolve for normal closures\n              }\n              break;\n            case 1003:\n              // Unsupported\n              this.handleError('WebSocket connection not supported');\n              if (!hasResolved) {\n                reject(new Error('WebSocket connection not supported'));\n              }\n              break;\n            case 4001:\n              // Channel access denied\n              this.handleError('Access to the channel was denied');\n              if (!hasResolved) {\n                reject(new Error('Access to the channel was denied'));\n              }\n              break;\n            case 4002:\n              // Authentication failed\n              this.handleError('Authentication failed');\n              if (!hasResolved) {\n                reject(new Error('Authentication failed'));\n              }\n              break;\n            default:\n              // For unexpected closures, attempt to reconnect\n              if (this.currentChannelId && !hasResolved) {\n                this.attemptReconnect(channelId);\n              }\n          }\n        };\n      } catch (error) {\n        console.error('Error creating WebSocket:', error);\n        this.handleError(error);\n        // Instead of rejecting immediately, attempt to reconnect\n        this.attemptReconnect(channelId);\n      }\n    });\n  }\n  disconnect() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.socket) {\n      if (this.currentChannelId && this.socket.readyState === WebSocket.OPEN) {\n        const message = {\n          type: 'leave_channel',\n          channel_id: this.currentChannelId\n        };\n        this.socket.send(JSON.stringify(message));\n      }\n      this.socket.close(1000); // Normal closure\n      this.socket = null;\n      this.currentChannelId = null;\n      this.reconnectAttempts = 0;\n      this.isReconnecting = false;\n    }\n  }\n  async processMessageQueue() {\n    while (this.messageQueue.length > 0 && ((_this$socket4 = this.socket) === null || _this$socket4 === void 0 ? void 0 : _this$socket4.readyState) === WebSocket.OPEN) {\n      var _this$socket4;\n      const message = this.messageQueue.shift();\n      if (message) {\n        try {\n          await this.sendMessageImmediate(message.channelId, message.content);\n        } catch (error) {\n          console.error('Failed to send queued message:', error);\n        }\n      }\n    }\n  }\n  sendMessageImmediate(channelId, content) {\n    var _this$socket5;\n    if (((_this$socket5 = this.socket) === null || _this$socket5 === void 0 ? void 0 : _this$socket5.readyState) !== WebSocket.OPEN) {\n      throw new Error('WebSocket is not connected');\n    }\n    const message = {\n      type: 'message',\n      channel_id: channelId,\n      content: content\n    };\n    this.socket.send(JSON.stringify(message));\n  }\n  async sendMessage(channelId, content) {\n    var _this$socket6;\n    // If not connected to the right channel, connect first\n    if (this.currentChannelId !== channelId) {\n      console.log('Connecting to channel before sending message');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('Failed to connect to channel:', error);\n        this.handleError('Failed to send message: Could not connect to channel');\n        return;\n      }\n    }\n    if (((_this$socket6 = this.socket) === null || _this$socket6 === void 0 ? void 0 : _this$socket6.readyState) === WebSocket.OPEN) {\n      try {\n        await this.sendMessageImmediate(channelId, content);\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        // Queue the message for retry\n        this.messageQueue.push({\n          channelId,\n          content\n        });\n        this.handleError('Message will be sent when connection is restored');\n      }\n    } else {\n      // Queue the message for later\n      this.messageQueue.push({\n        channelId,\n        content\n      });\n      this.handleError('Message will be sent when connection is restored');\n    }\n  }\n  async joinChannel(channelId) {\n    return new Promise((resolve, reject) => {\n      var _this$socket7;\n      if (((_this$socket7 = this.socket) === null || _this$socket7 === void 0 ? void 0 : _this$socket7.readyState) !== WebSocket.OPEN) {\n        reject(new Error('WebSocket is not connected'));\n        return;\n      }\n\n      // Store the promise resolvers\n      this.joinChannelResolvers.set(channelId, {\n        resolve,\n        reject\n      });\n      console.log('Joining channel:', channelId);\n      const message = {\n        type: 'join_channel',\n        channel_id: parseInt(channelId)\n      };\n      try {\n        this.socket.send(JSON.stringify(message));\n      } catch (error) {\n        this.joinChannelResolvers.delete(channelId);\n        reject(error);\n      }\n    });\n  }\n  leaveChannel(channelId) {\n    var _this$socket8;\n    if (((_this$socket8 = this.socket) === null || _this$socket8 === void 0 ? void 0 : _this$socket8.readyState) === WebSocket.OPEN && this.currentChannelId === channelId) {\n      const message = {\n        type: 'leave_channel',\n        channel_id: channelId\n      };\n      this.socket.send(JSON.stringify(message));\n      this.disconnect();\n    }\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onError(handler) {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n  getChatSocketState() {\n    var _this$socket9;\n    return ((_this$socket9 = this.socket) === null || _this$socket9 === void 0 ? void 0 : _this$socket9.readyState) || WebSocket.CLOSED;\n  }\n  getCurrentChannelId() {\n    return this.currentChannelId;\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","store","addMessage","WebSocketService","constructor","socket","messageHandlers","errorHandlers","currentChannelId","processedMessageIds","Set","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","isReconnecting","messageQueue","joinChannelResolvers","Map","handleMessage","event","message","JSON","parse","data","console","log","type","resolvers","get","String","channel_id","resolve","delete","processMessageQueue","reject","Error","error","handleError","code","content","chatMessage","messageId","id","has","add","size","idsArray","Array","from","slice","storeMessage","channelId","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","dispatch","forEach","handler","getReconnectDelay","Math","min","pow","attemptReconnect","Promise","setTimeout","connect","delay","errorMessage","_this$socket","_this$socket2","clearTimeout","readyState","WebSocket","OPEN","disconnect","token","baseWsUrl","process","env","REACT_APP_WS_URL","wsUrl","clear","hasResolved","connectionTimeout","_this$socket3","close","onopen","joinChannel","then","catch","onmessage","onerror","onclose","send","stringify","length","_this$socket4","shift","sendMessageImmediate","_this$socket5","sendMessage","_this$socket6","push","_this$socket7","set","parseInt","leaveChannel","_this$socket8","onMessage","filter","h","onError","getChatSocketState","_this$socket9","CLOSED","getCurrentChannelId","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage } from '../../types';\r\nimport { getAuthToken } from '../api/auth';\r\nimport { store } from '../../store';\r\nimport { addMessage } from '../../store/messages/messagesSlice';\r\n\r\nclass WebSocketService {\r\n  private socket: WebSocket | null = null;\r\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private errorHandlers: ((error: { code: string; message: string }) => void)[] = [];\r\n  private currentChannelId: string | null = null;\r\n  private processedMessageIds: Set<string> = new Set();\r\n  private reconnectAttempts: number = 0;\r\n  private maxReconnectAttempts: number = 5;\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private isReconnecting: boolean = false;\r\n  private messageQueue: { channelId: string; content: string }[] = [];\r\n  private joinChannelResolvers: Map<string, { resolve: () => void; reject: (error: Error) => void }> = new Map();\r\n\r\n  private getReconnectDelay(): number {\r\n    // Exponential backoff: 1s, 2s, 4s, 8s, 16s\r\n    return Math.min(1000 * Math.pow(2, this.reconnectAttempts), 16000);\r\n  }\r\n\r\n  private async attemptReconnect(channelId: string) {\r\n    if (this.isReconnecting) {\r\n      console.log('Already attempting to reconnect...');\r\n      return;\r\n    }\r\n\r\n    this.isReconnecting = true;\r\n    \r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.error('Max reconnection attempts reached');\r\n      this.errorHandlers.forEach(handler => handler({\r\n        code: 'MAX_RECONNECT_ATTEMPTS',\r\n        message: 'Unable to reconnect after multiple attempts. Please refresh the page.'\r\n      }));\r\n      this.isReconnecting = false;\r\n      return;\r\n    }\r\n\r\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})...`);\r\n    \r\n    try {\r\n      // Add a small delay before reconnecting\r\n      await new Promise(resolve => setTimeout(resolve, this.getReconnectDelay()));\r\n      await this.connect(channelId);\r\n      this.reconnectAttempts = 0;\r\n      this.isReconnecting = false;\r\n    } catch (error) {\r\n      this.reconnectAttempts++;\r\n      this.isReconnecting = false;\r\n      \r\n      // Schedule next reconnection attempt\r\n      const delay = this.getReconnectDelay();\r\n      console.log(`Scheduling next reconnection attempt in ${delay}ms`);\r\n      this.reconnectTimeout = setTimeout(() => {\r\n        this.attemptReconnect(channelId);\r\n      }, delay);\r\n    }\r\n  }\r\n\r\n  private handleError(error: Event | Error | string | unknown) {\r\n    let errorMessage = 'WebSocket connection error';\r\n    if (error instanceof Error) {\r\n      errorMessage = error.message;\r\n    } else if (typeof error === 'string') {\r\n      errorMessage = error;\r\n    }\r\n    console.error('WebSocket error:', error);\r\n    this.errorHandlers.forEach(handler => handler({\r\n      code: 'WEBSOCKET_ERROR',\r\n      message: errorMessage\r\n    }));\r\n  }\r\n\r\n  connect(channelId: string) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      // Clear any existing reconnection timeout\r\n      if (this.reconnectTimeout) {\r\n        clearTimeout(this.reconnectTimeout);\r\n        this.reconnectTimeout = null;\r\n      }\r\n\r\n      // If already connected to this channel, do nothing\r\n      if (this.socket?.readyState === WebSocket.OPEN && this.currentChannelId === channelId) {\r\n        console.log('WebSocket already connected to channel', channelId);\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      // If connected to a different channel, disconnect first\r\n      if (this.socket?.readyState === WebSocket.OPEN && this.currentChannelId !== channelId) {\r\n        console.log('Disconnecting from channel', this.currentChannelId);\r\n        this.disconnect();\r\n      }\r\n\r\n      const token = getAuthToken();\r\n      if (!token) {\r\n        const error = new Error('No auth token available for WebSocket connection');\r\n        this.handleError(error);\r\n        reject(error);\r\n        return;\r\n      }\r\n\r\n      const baseWsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\r\n      const wsUrl = `${baseWsUrl}/chat?token=${token}`;\r\n      console.log('Connecting to WebSocket:', wsUrl);\r\n      \r\n      try {\r\n        this.socket = new WebSocket(wsUrl);\r\n        this.currentChannelId = channelId;\r\n        this.processedMessageIds.clear();\r\n\r\n        let hasResolved = false;\r\n        let connectionTimeout: NodeJS.Timeout;\r\n\r\n        // Set a connection timeout\r\n        connectionTimeout = setTimeout(() => {\r\n          if (!hasResolved) {\r\n            console.error('WebSocket connection timeout');\r\n            this.handleError('Connection timeout. Attempting to reconnect...');\r\n            this.socket?.close();\r\n            // Instead of rejecting, attempt to reconnect\r\n            this.attemptReconnect(channelId);\r\n          }\r\n        }, 10000);\r\n\r\n        this.socket.onopen = () => {\r\n          clearTimeout(connectionTimeout);\r\n          console.log('WebSocket connection opened');\r\n          this.joinChannel(channelId)\r\n            .then(() => {\r\n              hasResolved = true;\r\n              resolve();\r\n            })\r\n            .catch(error => {\r\n              console.error('Failed to join channel:', error);\r\n              this.handleError('Failed to join channel. Attempting to reconnect...');\r\n              // Instead of rejecting, attempt to reconnect\r\n              this.attemptReconnect(channelId);\r\n            });\r\n        };\r\n\r\n        this.socket.onmessage = this.handleMessage;\r\n\r\n        this.socket.onerror = (event: Event) => {\r\n          console.error('WebSocket error:', event);\r\n          // Don't reject here, let onclose handle the reconnection\r\n          this.handleError('Connection error. Attempting to reconnect...');\r\n        };\r\n\r\n        this.socket.onclose = (event: CloseEvent) => {\r\n          clearTimeout(connectionTimeout);\r\n          console.log('WebSocket disconnected with code:', event.code);\r\n          this.socket = null;\r\n\r\n          // Handle specific close codes\r\n          switch (event.code) {\r\n            case 1000: // Normal closure\r\n              this.currentChannelId = null;\r\n              if (!hasResolved) {\r\n                resolve(); // Resolve for normal closures\r\n              }\r\n              break;\r\n            case 1003: // Unsupported\r\n              this.handleError('WebSocket connection not supported');\r\n              if (!hasResolved) {\r\n                reject(new Error('WebSocket connection not supported'));\r\n              }\r\n              break;\r\n            case 4001: // Channel access denied\r\n              this.handleError('Access to the channel was denied');\r\n              if (!hasResolved) {\r\n                reject(new Error('Access to the channel was denied'));\r\n              }\r\n              break;\r\n            case 4002: // Authentication failed\r\n              this.handleError('Authentication failed');\r\n              if (!hasResolved) {\r\n                reject(new Error('Authentication failed'));\r\n              }\r\n              break;\r\n            default:\r\n              // For unexpected closures, attempt to reconnect\r\n              if (this.currentChannelId && !hasResolved) {\r\n                this.attemptReconnect(channelId);\r\n              }\r\n          }\r\n        };\r\n      } catch (error) {\r\n        console.error('Error creating WebSocket:', error);\r\n        this.handleError(error);\r\n        // Instead of rejecting immediately, attempt to reconnect\r\n        this.attemptReconnect(channelId);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n    \r\n    if (this.socket) {\r\n      if (this.currentChannelId && this.socket.readyState === WebSocket.OPEN) {\r\n        const message = {\r\n          type: 'leave_channel',\r\n          channel_id: this.currentChannelId\r\n        };\r\n        this.socket.send(JSON.stringify(message));\r\n      }\r\n      this.socket.close(1000); // Normal closure\r\n      this.socket = null;\r\n      this.currentChannelId = null;\r\n      this.reconnectAttempts = 0;\r\n      this.isReconnecting = false;\r\n    }\r\n  }\r\n\r\n  private async processMessageQueue() {\r\n    while (this.messageQueue.length > 0 && this.socket?.readyState === WebSocket.OPEN) {\r\n      const message = this.messageQueue.shift();\r\n      if (message) {\r\n        try {\r\n          await this.sendMessageImmediate(message.channelId, message.content);\r\n        } catch (error) {\r\n          console.error('Failed to send queued message:', error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private sendMessageImmediate(channelId: string, content: string) {\r\n    if (this.socket?.readyState !== WebSocket.OPEN) {\r\n      throw new Error('WebSocket is not connected');\r\n    }\r\n\r\n    const message = {\r\n      type: 'message',\r\n      channel_id: channelId,\r\n      content: content\r\n    };\r\n    this.socket.send(JSON.stringify(message));\r\n  }\r\n\r\n  async sendMessage(channelId: string, content: string) {\r\n    // If not connected to the right channel, connect first\r\n    if (this.currentChannelId !== channelId) {\r\n      console.log('Connecting to channel before sending message');\r\n      try {\r\n        await this.connect(channelId);\r\n      } catch (error) {\r\n        console.error('Failed to connect to channel:', error);\r\n        this.handleError('Failed to send message: Could not connect to channel');\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      try {\r\n        await this.sendMessageImmediate(channelId, content);\r\n      } catch (error) {\r\n        console.error('Failed to send message:', error);\r\n        // Queue the message for retry\r\n        this.messageQueue.push({ channelId, content });\r\n        this.handleError('Message will be sent when connection is restored');\r\n      }\r\n    } else {\r\n      // Queue the message for later\r\n      this.messageQueue.push({ channelId, content });\r\n      this.handleError('Message will be sent when connection is restored');\r\n    }\r\n  }\r\n\r\n  async joinChannel(channelId: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.socket?.readyState !== WebSocket.OPEN) {\r\n        reject(new Error('WebSocket is not connected'));\r\n        return;\r\n      }\r\n\r\n      // Store the promise resolvers\r\n      this.joinChannelResolvers.set(channelId, { resolve, reject });\r\n\r\n      console.log('Joining channel:', channelId);\r\n      const message = {\r\n        type: 'join_channel',\r\n        channel_id: parseInt(channelId)\r\n      };\r\n      \r\n      try {\r\n        this.socket.send(JSON.stringify(message));\r\n      } catch (error) {\r\n        this.joinChannelResolvers.delete(channelId);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  leaveChannel(channelId: string) {\r\n    if (this.socket?.readyState === WebSocket.OPEN && this.currentChannelId === channelId) {\r\n      const message = {\r\n        type: 'leave_channel',\r\n        channel_id: channelId\r\n      };\r\n      this.socket.send(JSON.stringify(message));\r\n      this.disconnect();\r\n    }\r\n  }\r\n\r\n  onMessage(handler: (message: WebSocketMessage) => void) {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  onError(handler: (error: { code: string; message: string }) => void) {\r\n    this.errorHandlers.push(handler);\r\n    return () => {\r\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  getChatSocketState() {\r\n    return this.socket?.readyState || WebSocket.CLOSED;\r\n  }\r\n\r\n  getCurrentChannelId() {\r\n    return this.currentChannelId;\r\n  }\r\n\r\n  private handleMessage = (event: MessageEvent) => {\r\n    try {\r\n      const message = JSON.parse(event.data) as WebSocketMessage;\r\n      console.log('WebSocket message received:', message);\r\n\r\n      // Handle join channel response\r\n      if (message.type === 'channel_joined') {\r\n        const resolvers = this.joinChannelResolvers.get(String(message.channel_id));\r\n        if (resolvers) {\r\n          resolvers.resolve();\r\n          this.joinChannelResolvers.delete(String(message.channel_id));\r\n          // Process any queued messages after successful join\r\n          this.processMessageQueue();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Handle join channel error\r\n      if (message.type === 'channel_join_error') {\r\n        const resolvers = this.joinChannelResolvers.get(String(message.channel_id));\r\n        if (resolvers) {\r\n          resolvers.reject(new Error(message.message || 'Failed to join channel'));\r\n          this.joinChannelResolvers.delete(String(message.channel_id));\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Handle error messages\r\n      if (message.type === 'error') {\r\n        console.error('WebSocket error message:', message);\r\n        this.handleError({\r\n          code: message.code,\r\n          message: message.content\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Handle channel access errors\r\n      if (message.type === 'channel_access_denied') {\r\n        console.error('Channel access denied:', message);\r\n        this.handleError({\r\n          code: 'CHANNEL_ACCESS_DENIED',\r\n          message: message.message || 'Access to this channel was denied'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Filter out message_sent confirmations\r\n      if (message.type === 'message_sent') {\r\n        console.log('Message sent confirmation received');\r\n        return;\r\n      }\r\n\r\n      // Handle new messages\r\n      if (message.type === 'message' && 'message' in message) {\r\n        const { message: chatMessage } = message;\r\n        if (!chatMessage || typeof chatMessage === 'string') {\r\n          console.error('Invalid message format:', message);\r\n          return;\r\n        }\r\n\r\n        const messageId = chatMessage.id;\r\n        if (messageId) {\r\n          if (this.processedMessageIds.has(messageId)) {\r\n            console.log('Ignoring duplicate message:', messageId);\r\n            return;\r\n          }\r\n          this.processedMessageIds.add(messageId);\r\n\r\n          // Limit the size of the Set to prevent memory growth\r\n          if (this.processedMessageIds.size > 1000) {\r\n            const idsArray = Array.from(this.processedMessageIds);\r\n            this.processedMessageIds = new Set(idsArray.slice(-500));\r\n          }\r\n\r\n          // Transform and dispatch the message to Redux store\r\n          const storeMessage: StoreMessage = {\r\n            id: String(chatMessage.id),\r\n            content: chatMessage.content,\r\n            channelId: String(chatMessage.channel_id),\r\n            userId: String(chatMessage.sender_id),\r\n            reactions: [],\r\n            attachments: [],\r\n            createdAt: chatMessage.created_at,\r\n            updatedAt: chatMessage.created_at\r\n          };\r\n          store.dispatch(addMessage(storeMessage));\r\n        }\r\n      }\r\n\r\n      // Handle successful messages\r\n      this.messageHandlers.forEach(handler => handler(message));\r\n    } catch (error) {\r\n      console.error('Error parsing WebSocket message:', error);\r\n    }\r\n  };\r\n}\r\n\r\nconst wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}