{"ast":null,"code":"import { getAuthToken } from '../api/auth';\n\n// Add WebSocket message types\n\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.currentChannelId = null;\n    this.joinedChannels = new Set();\n    this.messageQueue = [];\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.isReconnecting = false;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n  }\n  async connect(channelId) {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      return;\n    }\n    if (this.connectionPromise) {\n      await this.connectionPromise;\n      if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n        return;\n      }\n    }\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    try {\n      this.connectionPromise = new Promise((resolve, reject) => {\n        const token = getAuthToken();\n        if (!token) {\n          reject(new Error('No authentication token found'));\n          return;\n        }\n        this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\n        let resolved = false;\n        const connectionTimeout = setTimeout(() => {\n          if (!resolved) {\n            var _this$socket;\n            (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.close();\n            reject(new Error('WebSocket connection timeout'));\n          }\n        }, 5000);\n        this.socket.onopen = () => {\n          var _this$socket2;\n          if (((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.readyState) === WebSocket.OPEN) {\n            clearTimeout(connectionTimeout);\n            this.reconnectAttempts = 0;\n            this.isReconnecting = false;\n            resolved = true;\n            resolve();\n          }\n        };\n        this.socket.onclose = event => {\n          if (!resolved) {\n            clearTimeout(connectionTimeout);\n            reject(new Error('WebSocket closed before connection established'));\n            return;\n          }\n          if (this.socket === null) return;\n          const wasConnected = this.socket.readyState === WebSocket.OPEN;\n          this.socket = null;\n          this.joinedChannels.clear();\n          if (event.code !== 1000 && wasConnected) {\n            if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\n              this.attemptReconnect();\n            }\n          }\n        };\n        this.socket.onerror = error => {\n          if (!resolved) {\n            clearTimeout(connectionTimeout);\n            reject(error);\n            return;\n          }\n          this.handleError(new Error('WebSocket connection error'));\n        };\n        this.socket.onmessage = event => {\n          try {\n            const message = JSON.parse(event.data);\n            this.messageHandlers.forEach(handler => handler(message));\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n      });\n      await this.connectionPromise;\n      await this.joinChannel(channelId);\n    } catch (error) {\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    } finally {\n      this.connectionPromise = null;\n    }\n  }\n  async joinChannel(channelId) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Cannot join channel: WebSocket is not connected');\n    }\n    if (this.isConnectedToChannel(channelId)) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      const joinMessage = {\n        type: 'join_channel',\n        channel_id: channelId\n      };\n      const joinTimeout = setTimeout(() => reject(new Error('Channel join timeout')), 5000);\n      const handleJoinResponse = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'channel_joined' && data.channel_id === channelId) {\n            var _this$socket3;\n            (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.removeEventListener('message', handleJoinResponse);\n            clearTimeout(joinTimeout);\n            this.joinedChannels.add(channelId);\n            resolve();\n          }\n        } catch (error) {}\n      };\n      this.socket.addEventListener('message', handleJoinResponse);\n      this.socket.send(JSON.stringify(joinMessage));\n    });\n  }\n  handleError(error) {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n  isConnected() {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n  isConnectedToChannel(channelId) {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onError(handler) {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n  disconnect() {\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n  }\n  attemptReconnect() {\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\n      return;\n    }\n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n    if (this.currentChannelId) {\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n      this.reconnectTimeout = setTimeout(async () => {\n        try {\n          await this.connect(this.currentChannelId);\n          this.isReconnecting = false;\n        } catch (error) {\n          console.error('Reconnection failed:', error);\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.isReconnecting = false; // Reset flag to allow next attempt\n            this.attemptReconnect();\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.isReconnecting = false;\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\n          }\n        }\n      }, backoffTime);\n    } else {\n      this.isReconnecting = false;\n    }\n  }\n  getChatSocketState() {\n    var _this$socket4;\n    return ((_this$socket4 = this.socket) === null || _this$socket4 === void 0 ? void 0 : _this$socket4.readyState) || WebSocket.CLOSED;\n  }\n  async sendMessage(channelId, content) {\n    // Ensure we're connected to the right channel\n    if (!this.isConnectedToChannel(channelId)) {\n      console.log('Not connected to the right channel, attempting to connect...');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('Failed to connect to channel:', error);\n        throw new Error('Failed to send message: Could not connect to channel');\n      }\n    }\n\n    // Double check connection state after potential reconnection\n    if (!this.isConnected()) {\n      console.error('WebSocket is still not connected after reconnection attempt');\n      throw new Error('WebSocket is not connected');\n    }\n    if (!this.isConnectedToChannel(channelId)) {\n      console.error('Still not connected to the correct channel after reconnection attempt');\n      throw new Error('Not connected to the correct channel');\n    }\n    const message = {\n      type: 'message',\n      channel_id: channelId,\n      content: content\n    };\n    try {\n      console.log('Sending message:', message);\n      this.socket.send(JSON.stringify(message));\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      throw new Error('Failed to send message: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WebSocketService","constructor","socket","messageHandlers","errorHandlers","currentChannelId","joinedChannels","Set","messageQueue","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","isReconnecting","connectionPromise","joinPromise","connect","channelId","isConnected","isConnectedToChannel","disconnect","Promise","resolve","reject","token","Error","WebSocket","resolved","connectionTimeout","setTimeout","_this$socket","close","onopen","_this$socket2","readyState","OPEN","clearTimeout","onclose","event","wasConnected","clear","code","attemptReconnect","onerror","error","handleError","onmessage","message","JSON","parse","data","forEach","handler","console","joinChannel","joinMessage","type","channel_id","joinTimeout","handleJoinResponse","_this$socket3","removeEventListener","add","addEventListener","send","stringify","has","onMessage","push","filter","h","onError","log","backoffTime","Math","min","pow","getChatSocketState","_this$socket4","CLOSED","sendMessage","content","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage, WebSocketChannelJoinMessage, WebSocketChannelMessage, StoreMessage } from '../../types';\r\nimport { getAuthToken } from '../api/auth';\r\nimport { store } from '../../store';\r\nimport { addMessage, setReplies } from '../../store/messages/messagesSlice';\r\n\r\n// Add WebSocket message types\r\ninterface WebSocketJoinMessage {\r\n  type: 'join_channel';\r\n  channel_id: string;\r\n}\r\n\r\ninterface WebSocketJoinResponse {\r\n  type: 'channel_joined' | 'channel_join_error';\r\n  channelId: string;\r\n  error?: string;\r\n}\r\n\r\nclass WebSocketService {\r\n  private socket: WebSocket | null = null;\r\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private errorHandlers: ((error: Error) => void)[] = [];\r\n  private currentChannelId: string | null = null;\r\n  private joinedChannels: Set<string> = new Set();\r\n  private messageQueue: WebSocketMessage[] = [];\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private isReconnecting = false;\r\n  private connectionPromise: Promise<void> | null = null;\r\n  private joinPromise: Promise<void> | null = null;\r\n\r\n  public async connect(channelId: string): Promise<void> {\r\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\r\n      return;\r\n    }\r\n\r\n    if (this.connectionPromise) {\r\n      await this.connectionPromise;\r\n      if (this.isConnected() && this.isConnectedToChannel(channelId)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.disconnect();\r\n    this.currentChannelId = channelId;\r\n    this.isReconnecting = false;\r\n    this.reconnectAttempts = 0;\r\n    \r\n    try {\r\n      this.connectionPromise = new Promise((resolve, reject) => {\r\n        const token = getAuthToken();\r\n        if (!token) {\r\n          reject(new Error('No authentication token found'));\r\n          return;\r\n        }\r\n\r\n        this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\r\n        let resolved = false;\r\n\r\n        const connectionTimeout = setTimeout(() => {\r\n          if (!resolved) {\r\n            this.socket?.close();\r\n            reject(new Error('WebSocket connection timeout'));\r\n          }\r\n        }, 5000);\r\n\r\n        this.socket.onopen = () => {\r\n          if (this.socket?.readyState === WebSocket.OPEN) {\r\n            clearTimeout(connectionTimeout);\r\n            this.reconnectAttempts = 0;\r\n            this.isReconnecting = false;\r\n            resolved = true;\r\n            resolve();\r\n          }\r\n        };\r\n\r\n        this.socket.onclose = (event) => {\r\n          if (!resolved) {\r\n            clearTimeout(connectionTimeout);\r\n            reject(new Error('WebSocket closed before connection established'));\r\n            return;\r\n          }\r\n\r\n          if (this.socket === null) return;\r\n          \r\n          const wasConnected = this.socket.readyState === WebSocket.OPEN;\r\n          this.socket = null;\r\n          this.joinedChannels.clear();\r\n\r\n          if (event.code !== 1000 && wasConnected) {\r\n            if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\r\n              this.attemptReconnect();\r\n            }\r\n          }\r\n        };\r\n\r\n        this.socket.onerror = (error) => {\r\n          if (!resolved) {\r\n            clearTimeout(connectionTimeout);\r\n            reject(error);\r\n            return;\r\n          }\r\n          this.handleError(new Error('WebSocket connection error'));\r\n        };\r\n\r\n        this.socket.onmessage = (event) => {\r\n          try {\r\n            const message = JSON.parse(event.data) as WebSocketMessage;\r\n            this.messageHandlers.forEach(handler => handler(message));\r\n          } catch (error) {\r\n            console.error('Error parsing WebSocket message:', error);\r\n          }\r\n        };\r\n      });\r\n\r\n      await this.connectionPromise;\r\n      await this.joinChannel(channelId);\r\n      \r\n    } catch (error) {\r\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\r\n      throw error;\r\n    } finally {\r\n      this.connectionPromise = null;\r\n    }\r\n  }\r\n\r\n  public async joinChannel(channelId: string): Promise<void> {\r\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n      throw new Error('Cannot join channel: WebSocket is not connected');\r\n    }\r\n\r\n    if (this.isConnectedToChannel(channelId)) {\r\n      return;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const joinMessage = { type: 'join_channel', channel_id: channelId };\r\n      const joinTimeout = setTimeout(() => reject(new Error('Channel join timeout')), 5000);\r\n      \r\n      const handleJoinResponse = (event: MessageEvent) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          if (data.type === 'channel_joined' && data.channel_id === channelId) {\r\n            this.socket?.removeEventListener('message', handleJoinResponse);\r\n            clearTimeout(joinTimeout);\r\n            this.joinedChannels.add(channelId);\r\n            resolve();\r\n          }\r\n        } catch (error) {}\r\n      };\r\n\r\n      this.socket.addEventListener('message', handleJoinResponse);\r\n      this.socket.send(JSON.stringify(joinMessage));\r\n    });\r\n  }\r\n\r\n  private handleError(error: Error): void {\r\n    console.error('WebSocket error:', error);\r\n    this.errorHandlers.forEach(handler => handler(error));\r\n  }\r\n\r\n  public isConnected(): boolean {\r\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\r\n  }\r\n\r\n  private isConnectedToChannel(channelId: string): boolean {\r\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\r\n  }\r\n\r\n  public onMessage(handler: (message: WebSocketMessage) => void): () => void {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  public onError(handler: (error: Error) => void): () => void {\r\n    this.errorHandlers.push(handler);\r\n    return () => {\r\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  public disconnect(): void {\r\n    this.isReconnecting = false;\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      this.socket.close(1000);\r\n    }\r\n    this.socket = null;\r\n    this.joinedChannels.clear();\r\n    this.messageHandlers = [];\r\n    this.errorHandlers = [];\r\n    this.reconnectAttempts = 0;\r\n    this.connectionPromise = null;\r\n    this.joinPromise = null;\r\n  }\r\n\r\n  private attemptReconnect(): void {\r\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\r\n      return;\r\n    }\r\n\r\n    this.isReconnecting = true;\r\n    this.reconnectAttempts++;\r\n\r\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\r\n\r\n    if (this.currentChannelId) {\r\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\r\n      \r\n      if (this.reconnectTimeout) {\r\n        clearTimeout(this.reconnectTimeout);\r\n      }\r\n\r\n      this.reconnectTimeout = setTimeout(async () => {\r\n        try {\r\n          await this.connect(this.currentChannelId!);\r\n          this.isReconnecting = false;\r\n        } catch (error) {\r\n          console.error('Reconnection failed:', error);\r\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n            this.isReconnecting = false; // Reset flag to allow next attempt\r\n            this.attemptReconnect();\r\n          } else {\r\n            console.log('Max reconnection attempts reached');\r\n            this.isReconnecting = false;\r\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\r\n          }\r\n        }\r\n      }, backoffTime);\r\n    } else {\r\n      this.isReconnecting = false;\r\n    }\r\n  }\r\n\r\n  public getChatSocketState(): number {\r\n    return this.socket?.readyState || WebSocket.CLOSED;\r\n  }\r\n\r\n  public async sendMessage(channelId: string, content: string): Promise<void> {\r\n    // Ensure we're connected to the right channel\r\n    if (!this.isConnectedToChannel(channelId)) {\r\n      console.log('Not connected to the right channel, attempting to connect...');\r\n      try {\r\n        await this.connect(channelId);\r\n      } catch (error) {\r\n        console.error('Failed to connect to channel:', error);\r\n        throw new Error('Failed to send message: Could not connect to channel');\r\n      }\r\n    }\r\n\r\n    // Double check connection state after potential reconnection\r\n    if (!this.isConnected()) {\r\n      console.error('WebSocket is still not connected after reconnection attempt');\r\n      throw new Error('WebSocket is not connected');\r\n    }\r\n\r\n    if (!this.isConnectedToChannel(channelId)) {\r\n      console.error('Still not connected to the correct channel after reconnection attempt');\r\n      throw new Error('Not connected to the correct channel');\r\n    }\r\n\r\n    const message = {\r\n      type: 'message',\r\n      channel_id: channelId,\r\n      content: content\r\n    };\r\n\r\n    try {\r\n      console.log('Sending message:', message);\r\n      this.socket!.send(JSON.stringify(message));\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n      throw new Error('Failed to send message: ' + (error instanceof Error ? error.message : 'Unknown error'));\r\n    }\r\n  }\r\n}\r\n\r\nconst wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}