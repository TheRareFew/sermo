{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const login = async credentials => {\n  const response = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'Failed to login');\n  }\n  return response.json();\n};\nexport const signup = async credentials => {\n  const response = await fetch(`${API_URL}/auth/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'Failed to sign up');\n  }\n  return response.json();\n};\nexport const forgotPassword = async email => {\n  const response = await fetch(`${API_URL}/auth/forgot-password`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'Failed to send password reset email');\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","message","signup","forgotPassword","email"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/auth.ts"],"sourcesContent":["import { User } from '../../store/types';\r\n\r\ninterface LoginCredentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupCredentials {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface AuthResponse {\r\n  user: User;\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nexport const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'Failed to login');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const signup = async (credentials: SignupCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/auth/signup`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'Failed to sign up');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const forgotPassword = async (email: string): Promise<void> => {\r\n  const response = await fetch(`${API_URL}/auth/forgot-password`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'Failed to send password reset email');\r\n  }\r\n}; "],"mappings":"AAiBA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAA6B,IAA4B;EACnF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,EAAE;IACpDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;EAClC,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,IAAI,iBAAiB,CAAC;EACrD;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,MAAM,GAAG,MAAOb,WAA8B,IAA4B;EACrF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,cAAc,EAAE;IACrDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;EAClC,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,IAAI,mBAAmB,CAAC;EACvD;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMI,cAAc,GAAG,MAAOC,KAAa,IAAoB;EACpE,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,uBAAuB,EAAE;IAC9DQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEQ;IAAM,CAAC;EAChC,CAAC,CAAC;EAEF,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,IAAI,qCAAqC,CAAC;EACzE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}