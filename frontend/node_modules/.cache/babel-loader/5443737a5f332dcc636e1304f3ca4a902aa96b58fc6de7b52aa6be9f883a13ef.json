{"ast":null,"code":"export const transformMessage = message => {\n  console.log('Transforming message:', message);\n\n  // Ensure reactions is an array\n  const reactions = Array.isArray(message.reactions) ? message.reactions : [];\n  console.log('Transformed reactions:', reactions);\n\n  // Transform attachments\n  const transformAttachments = attachments => {\n    return attachments.map(attachment => ({\n      id: attachment.id,\n      filename: attachment.filename,\n      file_type: attachment.file_type,\n      file_path: attachment.file_path,\n      message_id: attachment.message_id,\n      file_size: attachment.file_size || 0,\n      created_at: attachment.created_at || new Date().toISOString(),\n      updated_at: attachment.updated_at || new Date().toISOString()\n    }));\n  };\n\n  // Handle both Message and RawMessage types with proper type guards\n  const getChannelId = () => {\n    if ('channel_id' in message && message.channel_id) return message.channel_id;\n    if ('channelId' in message && message.channelId) return message.channelId;\n    return '';\n  };\n  const getUserId = () => {\n    if ('sender_id' in message && message.sender_id) return message.sender_id;\n    if ('userId' in message && message.userId) return message.userId;\n    return '';\n  };\n  const getCreatedAt = () => {\n    if ('created_at' in message && message.created_at) return message.created_at;\n    if ('createdAt' in message && message.createdAt) return message.createdAt;\n    return new Date().toISOString();\n  };\n  const getUpdatedAt = createdAt => {\n    if ('updated_at' in message && message.updated_at) return message.updated_at;\n    if ('updatedAt' in message && message.updatedAt) return message.updatedAt;\n    return createdAt;\n  };\n  const getParentId = () => {\n    if ('parent_id' in message && message.parent_id) return message.parent_id;\n    if ('parentId' in message && message.parentId) return message.parentId;\n    return undefined;\n  };\n  const getReplyCount = () => {\n    if ('reply_count' in message && typeof message.reply_count === 'number') return message.reply_count;\n    if ('replyCount' in message && typeof message.replyCount === 'number') return message.replyCount;\n    return 0;\n  };\n  const createdAt = getCreatedAt();\n  return {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: getChannelId().toString(),\n    userId: getUserId().toString(),\n    createdAt,\n    updatedAt: getUpdatedAt(createdAt),\n    parentId: getParentId(),\n    replyCount: getReplyCount(),\n    isExpanded: 'isExpanded' in message ? !!message.isExpanded : false,\n    repliesLoaded: 'repliesLoaded' in message ? !!message.repliesLoaded : false,\n    replies: 'replies' in message && Array.isArray(message.replies) ? message.replies : [],\n    reactions,\n    attachments: Array.isArray(message.attachments) ? transformAttachments(message.attachments) : []\n  };\n};","map":{"version":3,"names":["transformMessage","message","console","log","reactions","Array","isArray","transformAttachments","attachments","map","attachment","id","filename","file_type","file_path","message_id","file_size","created_at","Date","toISOString","updated_at","getChannelId","channel_id","channelId","getUserId","sender_id","userId","getCreatedAt","createdAt","getUpdatedAt","updatedAt","getParentId","parent_id","parentId","undefined","getReplyCount","reply_count","replyCount","toString","content","isExpanded","repliesLoaded","replies"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { RawMessage, StoreMessage, Reaction, Message, Attachment } from '../types';\n\nexport const transformMessage = (message: RawMessage | Message): StoreMessage => {\n  console.log('Transforming message:', message);\n  \n  // Ensure reactions is an array\n  const reactions = Array.isArray(message.reactions) ? message.reactions : [];\n  console.log('Transformed reactions:', reactions);\n\n  // Transform attachments\n  const transformAttachments = (attachments: any[]): Attachment[] => {\n    return attachments.map(attachment => ({\n      id: attachment.id,\n      filename: attachment.filename,\n      file_type: attachment.file_type,\n      file_path: attachment.file_path,\n      message_id: attachment.message_id,\n      file_size: attachment.file_size || 0,\n      created_at: attachment.created_at || new Date().toISOString(),\n      updated_at: attachment.updated_at || new Date().toISOString()\n    }));\n  };\n  \n  // Handle both Message and RawMessage types with proper type guards\n  const getChannelId = (): string => {\n    if ('channel_id' in message && message.channel_id) return message.channel_id;\n    if ('channelId' in message && message.channelId) return message.channelId;\n    return '';\n  };\n  \n  const getUserId = (): string => {\n    if ('sender_id' in message && message.sender_id) return message.sender_id;\n    if ('userId' in message && message.userId) return message.userId;\n    return '';\n  };\n  \n  const getCreatedAt = (): string => {\n    if ('created_at' in message && message.created_at) return message.created_at;\n    if ('createdAt' in message && message.createdAt) return message.createdAt;\n    return new Date().toISOString();\n  };\n  \n  const getUpdatedAt = (createdAt: string): string => {\n    if ('updated_at' in message && message.updated_at) return message.updated_at;\n    if ('updatedAt' in message && message.updatedAt) return message.updatedAt;\n    return createdAt;\n  };\n  \n  const getParentId = (): string | undefined => {\n    if ('parent_id' in message && message.parent_id) return message.parent_id;\n    if ('parentId' in message && message.parentId) return message.parentId;\n    return undefined;\n  };\n  \n  const getReplyCount = (): number => {\n    if ('reply_count' in message && typeof message.reply_count === 'number') return message.reply_count;\n    if ('replyCount' in message && typeof message.replyCount === 'number') return message.replyCount;\n    return 0;\n  };\n  \n  const createdAt = getCreatedAt();\n  \n  return {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: getChannelId().toString(),\n    userId: getUserId().toString(),\n    createdAt,\n    updatedAt: getUpdatedAt(createdAt),\n    parentId: getParentId(),\n    replyCount: getReplyCount(),\n    isExpanded: 'isExpanded' in message ? !!message.isExpanded : false,\n    repliesLoaded: 'repliesLoaded' in message ? !!message.repliesLoaded : false,\n    replies: 'replies' in message && Array.isArray(message.replies) ? message.replies : [],\n    reactions,\n    attachments: Array.isArray(message.attachments) ? transformAttachments(message.attachments) : []\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}