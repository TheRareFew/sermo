{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, addChannel, removeChannel, updateChannelUnreadCount } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const messages = useSelector(state => {\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    return channelMessages;\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? {\n        parentId: msg.parent_id.toString()\n      } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback(msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  }), []);\n\n  // Handle channel selection\n  const handleChannelClick = useCallback(async channelId => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n    try {\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // First set the active channel\n      dispatch(setActiveChannel(channelId));\n\n      // Clear existing messages for the channel\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n\n      // Fetch initial messages\n      const messages = await getChannelMessages(channelId);\n      const transformedMessages = transformMessagesInChunks(messages);\n      dispatch(setMessages({\n        channelId,\n        messages: transformedMessages\n      }));\n\n      // Connect to WebSocket after setting up the channel\n      await wsService.connect(channelId);\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n      // Don't revert the channel switch, just log the error\n    } finally {\n      setIsConnecting(false);\n      isChannelSwitching.current = false;\n    }\n  }, [activeChannelId, channels, dispatch]);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n\n          // Connect to the first channel\n          await handleChannelClick(fetchedChannels[0].id);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch, handleChannelClick]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n\n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply' || message.type === 'message_sent') {\n        // Type guard to ensure we have a channel message with parentId\n        const isReplyMessage = msg => {\n          return msg.type === 'new_reply' && 'parentId' in msg && typeof msg.parentId === 'string';\n        };\n        const isChannelMessage = msg => {\n          return (msg.type === 'message' || msg.type === 'new_reply' || msg.type === 'message_sent') && 'message' in msg;\n        };\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n        try {\n          // Ensure the message has the correct timezone handling\n          const wsMessage = {\n            ...message.message,\n            created_at: new Date(message.message.created_at).toISOString(),\n            updated_at: message.message.updated_at ? new Date(message.message.updated_at).toISOString() : undefined\n          };\n          const transformedMessage = {\n            id: wsMessage.id.toString(),\n            content: wsMessage.content,\n            channelId: wsMessage.channel_id.toString(),\n            userId: wsMessage.sender_id.toString(),\n            createdAt: wsMessage.created_at,\n            updatedAt: wsMessage.updated_at || wsMessage.created_at,\n            reactions: [],\n            attachments: [],\n            replyCount: typeof wsMessage.reply_count === 'number' ? wsMessage.reply_count : 0,\n            isExpanded: false,\n            ...(isReplyMessage(message) ? {\n              parentId: message.parentId\n            } : {})\n          };\n          if (isReplyMessage(message)) {\n            dispatch(setReplies({\n              channelId: transformedMessage.channelId,\n              messageId: message.parentId,\n              replies: [transformedMessage]\n            }));\n          } else {\n            dispatch(addMessage(transformedMessage));\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = msg => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch]);\n\n  // Add WebSocket handlers for channel events\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      switch (message.type) {\n        case 'channel_created':\n          if (message.channel) {\n            dispatch(addChannel(message.channel));\n          }\n          break;\n        case 'channel_deleted':\n          if (message.channelId) {\n            dispatch(removeChannel(message.channelId.toString()));\n          }\n          break;\n        case 'channel_updated':\n          if (message.channel) {\n            // Update the channel in the store\n            dispatch(setChannels(channels.map(ch => ch.id === message.channel.id ? message.channel : ch)));\n          }\n          break;\n        case 'unread_count_updated':\n          if (message.channelId && typeof message.count === 'number') {\n            dispatch(updateChannelUnreadCount({\n              channelId: message.channelId.toString(),\n              count: message.count\n            }));\n          }\n          break;\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, channels]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: messages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 491,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"XhDFFD+YUG7ysxRSlyDPmyUdR5w=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addChannel","removeChannel","updateChannelUnreadCount","addMessage","setMessages","setReplies","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","messages","channelMessages","messagesByChannel","transformMessagesInChunks","map","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","transformToStoreMessage","handleChannelClick","current","c","console","transformedMessages","connect","fetchInitialData","log","fetchedChannels","length","channelUsers","usersObject","reduce","acc","user","disconnect","handleWebSocketMessage","message","type","isReplyMessage","isChannelMessage","wsMessage","Date","toISOString","updated_at","undefined","transformedMessage","messageId","replies","isStatusMessage","user_id","status","unsubscribe","onMessage","ch","count","handleSearch","query","trim","results","handleSelectMessage","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","setTimeout","remove","requestAnimationFrame","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount\n} from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult, Message } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const messages = useSelector((state: RootState) => {\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    return channelMessages;\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n    } as StoreMessage));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback((msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  }), []);\n\n  // Handle channel selection\n  const handleChannelClick = useCallback(async (channelId: string) => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n\n    try {\n      const channel = channels.find((c: Channel) => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // First set the active channel\n      dispatch(setActiveChannel(channelId));\n\n      // Clear existing messages for the channel\n      dispatch(setMessages({ channelId, messages: [] }));\n\n      // Fetch initial messages\n      const messages = await getChannelMessages(channelId);\n      const transformedMessages = transformMessagesInChunks(messages);\n      dispatch(setMessages({ channelId, messages: transformedMessages }));\n\n      // Connect to WebSocket after setting up the channel\n      await wsService.connect(channelId);\n\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n      // Don't revert the channel switch, just log the error\n    } finally {\n      setIsConnecting(false);\n      isChannelSwitching.current = false;\n    }\n  }, [activeChannelId, channels, dispatch]);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          \n          // Connect to the first channel\n          await handleChannelClick(fetchedChannels[0].id);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    \n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch, handleChannelClick]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply' || message.type === 'message_sent') {\n        // Type guard to ensure we have a channel message with parentId\n        const isReplyMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage & { parentId: string } => {\n          return msg.type === 'new_reply' && 'parentId' in msg && typeof msg.parentId === 'string';\n        };\n\n        const isChannelMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage => {\n          return (msg.type === 'message' || msg.type === 'new_reply' || msg.type === 'message_sent') && 'message' in msg;\n        };\n\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n\n        try {\n          // Ensure the message has the correct timezone handling\n          const wsMessage = {\n            ...message.message,\n            created_at: new Date(message.message.created_at).toISOString(),\n            updated_at: message.message.updated_at \n              ? new Date(message.message.updated_at).toISOString()\n              : undefined\n          };\n\n          const transformedMessage = {\n            id: wsMessage.id.toString(),\n            content: wsMessage.content,\n            channelId: wsMessage.channel_id.toString(),\n            userId: wsMessage.sender_id.toString(),\n            createdAt: wsMessage.created_at,\n            updatedAt: wsMessage.updated_at || wsMessage.created_at,\n            reactions: [],\n            attachments: [],\n            replyCount: typeof wsMessage.reply_count === 'number' ? wsMessage.reply_count : 0,\n            isExpanded: false,\n            ...(isReplyMessage(message) ? { parentId: message.parentId } : {})\n          };\n\n          if (isReplyMessage(message)) {\n            dispatch(setReplies({\n              channelId: transformedMessage.channelId,\n              messageId: message.parentId,\n              replies: [transformedMessage]\n            }));\n          } else {\n            dispatch(addMessage(transformedMessage));\n          }\n\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = (msg: WebSocketMessage): msg is WebSocketStatusMessage => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch]);\n\n  // Add WebSocket handlers for channel events\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      switch (message.type) {\n        case 'channel_created':\n          if (message.channel) {\n            dispatch(addChannel(message.channel));\n          }\n          break;\n\n        case 'channel_deleted':\n          if (message.channelId) {\n            dispatch(removeChannel(message.channelId.toString()));\n          }\n          break;\n\n        case 'channel_updated':\n          if (message.channel) {\n            // Update the channel in the store\n            dispatch(setChannels(\n              channels.map(ch => \n                ch.id === message.channel.id ? message.channel : ch\n              )\n            ));\n          }\n          break;\n\n        case 'unread_count_updated':\n          if (message.channelId && typeof message.count === 'number') {\n            dispatch(updateChannelUnreadCount({\n              channelId: message.channelId.toString(),\n              count: message.count\n            }));\n          }\n          break;\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, channels]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={messages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}