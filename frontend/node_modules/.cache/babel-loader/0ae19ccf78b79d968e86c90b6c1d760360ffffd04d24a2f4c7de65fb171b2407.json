{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useMemo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport MessageList from '../../chat/MessageList';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { prependMessages } from '../../../store/messages/messagesSlice';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n`;\n_c = MainContainer;\nconst MessagesContainer = styled.div`\n  flex: 1;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = MessagesContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const currentUser = useSelector(state => state.auth.user);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const userMap = useSelector(state => state.chat.users);\n  const channelMessages = useSelector(state => state.messages.messagesByChannel[activeChannelId || ''] || []);\n\n  // Transform StoreMessages to ExtendedMessages\n  const transformedMessages = useMemo(() => {\n    return channelMessages.map(message => {\n      const user = userMap[message.userId];\n      return {\n        id: message.id,\n        content: message.content,\n        sender: (user === null || user === void 0 ? void 0 : user.username) || message.userId,\n        timestamp: message.createdAt,\n        userId: message.userId,\n        replyCount: message.replyCount,\n        isExpanded: !!message.isExpanded,\n        parentId: message.parentId,\n        reactions: message.reactions,\n        sender_id: message.userId,\n        channel_id: message.channelId,\n        created_at: message.createdAt,\n        updated_at: message.updatedAt,\n        attachments: message.attachments,\n        is_system: false\n      };\n    });\n  }, [channelMessages, userMap]);\n  const handleLoadMore = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore) return;\n    try {\n      setIsLoadingMore(true);\n      const olderMessages = await getChannelMessages(activeChannelId, 50,\n      // limit\n      channelMessages.length // skip\n      );\n      if (olderMessages.length > 0) {\n        const transformedOlderMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: transformedOlderMessages\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to load more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, channelMessages.length, dispatch, isLoadingMore]);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: /*#__PURE__*/_jsxDEV(MessagesContainer, {\n      children: /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: transformedMessages,\n        selectedMessageId: selectedMessageId || undefined,\n        currentUser: currentUser,\n        isLoadingMore: isLoadingMore,\n        onLoadMore: handleLoadMore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"Co9hkTv7d792kWJP60JbWf4Ax4A=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c3 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"MessagesContainer\");\n$RefreshReg$(_c3, \"MainLayout\");","map":{"version":3,"names":["React","useRef","useState","useMemo","useCallback","useSelector","useDispatch","styled","MessageList","transformMessage","prependMessages","getChannelMessages","jsxDEV","_jsxDEV","MainContainer","div","_c","MessagesContainer","_c2","MainLayout","_s","dispatch","messageListRef","selectedMessageId","setSelectedMessageId","isLoadingMore","setIsLoadingMore","currentUser","state","auth","user","activeChannelId","chat","userMap","users","channelMessages","messages","messagesByChannel","transformedMessages","map","message","userId","id","content","sender","username","timestamp","createdAt","replyCount","isExpanded","parentId","reactions","sender_id","channel_id","channelId","created_at","updated_at","updatedAt","attachments","is_system","handleLoadMore","olderMessages","length","transformedOlderMessages","error","console","children","ref","undefined","onLoadMore","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { RootState, StoreMessage, ExtendedMessage } from '../../../types';\nimport MessageList from '../../chat/MessageList';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { prependMessages } from '../../../store/messages/messagesSlice';\nimport { getChannelMessages } from '../../../services/api/chat';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n`;\n\nconst MessagesContainer = styled.div`\n  flex: 1;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const currentUser = useSelector((state: RootState) => state.auth.user);\n  const activeChannelId = useSelector((state: RootState) => state.chat.activeChannelId);\n  const userMap = useSelector((state: RootState) => state.chat.users);\n  const channelMessages = useSelector((state: RootState) => \n    state.messages.messagesByChannel[activeChannelId || ''] || []\n  );\n\n  // Transform StoreMessages to ExtendedMessages\n  const transformedMessages = useMemo(() => {\n    return channelMessages.map((message: StoreMessage): ExtendedMessage => {\n      const user = userMap[message.userId];\n      return {\n        id: message.id,\n        content: message.content,\n        sender: user?.username || message.userId,\n        timestamp: message.createdAt,\n        userId: message.userId,\n        replyCount: message.replyCount,\n        isExpanded: !!message.isExpanded,\n        parentId: message.parentId,\n        reactions: message.reactions,\n        sender_id: message.userId,\n        channel_id: message.channelId,\n        created_at: message.createdAt,\n        updated_at: message.updatedAt,\n        attachments: message.attachments,\n        is_system: false\n      };\n    });\n  }, [channelMessages, userMap]);\n\n  const handleLoadMore = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      const olderMessages = await getChannelMessages(\n        activeChannelId,\n        50, // limit\n        channelMessages.length // skip\n      );\n\n      if (olderMessages.length > 0) {\n        const transformedOlderMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: transformedOlderMessages\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to load more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, channelMessages.length, dispatch, isLoadingMore]);\n\n  return (\n    <MainContainer>\n      <MessagesContainer>\n        <MessageList\n          ref={messageListRef}\n          messages={transformedMessages}\n          selectedMessageId={selectedMessageId || undefined}\n          currentUser={currentUser}\n          isLoadingMore={isLoadingMore}\n          onLoadMore={handleLoadMore}\n        />\n      </MessagesContainer>\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}