{"ast":null,"code":"import { getAuthToken } from './auth';\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nexport async function apiRequest(endpoint, options = {}) {\n  const {\n    requiresAuth = true,\n    headers = {},\n    ...rest\n  } = options;\n  const requestHeaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    ...headers\n  };\n  if (requiresAuth) {\n    const token = getAuthToken();\n    if (!token) {\n      console.error('No auth token available');\n      throw new Error('No auth token available');\n    }\n    requestHeaders['Authorization'] = `Bearer ${token}`;\n  }\n  const cleanEndpoint = endpoint.replace(/^\\/+/, '');\n  const url = `${API_URL}/${cleanEndpoint}`;\n  console.log(`Making API request to ${url}`, {\n    method: rest.method || 'GET',\n    headers: requestHeaders\n  });\n  try {\n    const response = await fetch(url, {\n      headers: requestHeaders,\n      credentials: 'include',\n      ...rest\n    });\n    console.log(`Response status for ${endpoint}:`, response.status);\n    console.log(`Response headers for ${endpoint}:`, Object.fromEntries(response.headers.entries()));\n    let data;\n    const contentType = response.headers.get('content-type');\n    try {\n      if (contentType && contentType.includes('application/json')) {\n        data = await response.json();\n        console.log(`Response data for ${endpoint}:`, JSON.stringify(data, null, 2));\n      } else {\n        data = await response.text();\n        console.log(`Response text for ${endpoint}:`, data);\n        // Try to parse as JSON anyway in case the content-type header is wrong\n        try {\n          data = JSON.parse(data);\n          console.log(`Parsed text response as JSON for ${endpoint}:`, data);\n        } catch {\n          // Not JSON, keep as text\n        }\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error(`Error parsing response for ${endpoint}:`, error);\n      throw new Error(`Failed to parse response: ${errorMessage}`);\n    }\n    if (!response.ok) {\n      console.error(`API error for ${endpoint}:`, data);\n      throw new Error(typeof data === 'object' ? JSON.stringify(data) : data || 'An error occurred');\n    }\n    return data;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    console.error(`Request failed for ${endpoint}:`, error);\n    throw new Error(`API request failed: ${errorMessage}`);\n  }\n}\nexport function getAuthHeaders() {\n  const token = getAuthToken();\n  if (!token) {\n    throw new Error('No auth token available');\n  }\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n}","map":{"version":3,"names":["getAuthToken","API_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","requiresAuth","headers","rest","requestHeaders","token","console","error","Error","cleanEndpoint","replace","url","log","method","response","fetch","credentials","status","Object","fromEntries","entries","data","contentType","get","includes","json","JSON","stringify","text","parse","errorMessage","message","ok","getAuthHeaders"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/utils.ts"],"sourcesContent":["import { getAuthToken } from './auth';\r\n\r\nexport interface ApiRequestOptions extends Omit<RequestInit, 'headers'> {\r\n  requiresAuth?: boolean;\r\n  headers?: Record<string, string>;\r\n}\r\n\r\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\nexport async function apiRequest<T>(\r\n  endpoint: string,\r\n  options: ApiRequestOptions = {}\r\n): Promise<T> {\r\n  const { requiresAuth = true, headers = {}, ...rest } = options;\r\n  \r\n  const requestHeaders: Record<string, string> = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    ...headers,\r\n  };\r\n\r\n  if (requiresAuth) {\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      console.error('No auth token available');\r\n      throw new Error('No auth token available');\r\n    }\r\n    requestHeaders['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const cleanEndpoint = endpoint.replace(/^\\/+/, '');\r\n  const url = `${API_URL}/${cleanEndpoint}`;\r\n  \r\n  console.log(`Making API request to ${url}`, {\r\n    method: rest.method || 'GET',\r\n    headers: requestHeaders,\r\n  });\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: requestHeaders,\r\n      credentials: 'include',\r\n      ...rest,\r\n    });\r\n\r\n    console.log(`Response status for ${endpoint}:`, response.status);\r\n    console.log(`Response headers for ${endpoint}:`, Object.fromEntries(response.headers.entries()));\r\n\r\n    let data;\r\n    const contentType = response.headers.get('content-type');\r\n    \r\n    try {\r\n      if (contentType && contentType.includes('application/json')) {\r\n        data = await response.json();\r\n        console.log(`Response data for ${endpoint}:`, JSON.stringify(data, null, 2));\r\n      } else {\r\n        data = await response.text();\r\n        console.log(`Response text for ${endpoint}:`, data);\r\n        // Try to parse as JSON anyway in case the content-type header is wrong\r\n        try {\r\n          data = JSON.parse(data);\r\n          console.log(`Parsed text response as JSON for ${endpoint}:`, data);\r\n        } catch {\r\n          // Not JSON, keep as text\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      console.error(`Error parsing response for ${endpoint}:`, error);\r\n      throw new Error(`Failed to parse response: ${errorMessage}`);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      console.error(`API error for ${endpoint}:`, data);\r\n      throw new Error(typeof data === 'object' ? JSON.stringify(data) : data || 'An error occurred');\r\n    }\r\n\r\n    return data;\r\n  } catch (error: unknown) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n    console.error(`Request failed for ${endpoint}:`, error);\r\n    throw new Error(`API request failed: ${errorMessage}`);\r\n  }\r\n}\r\n\r\nexport function getAuthHeaders(): Record<string, string> {\r\n  const token = getAuthToken();\r\n  if (!token) {\r\n    throw new Error('No auth token available');\r\n  }\r\n  \r\n  return {\r\n    'Authorization': `Bearer ${token}`,\r\n    'Content-Type': 'application/json',\r\n  };\r\n} "],"mappings":"AAAA,SAASA,YAAY,QAAQ,QAAQ;AAOrC,OAAO,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEnF,OAAO,eAAeC,UAAUA,CAC9BC,QAAgB,EAChBC,OAA0B,GAAG,CAAC,CAAC,EACnB;EACZ,MAAM;IAAEC,YAAY,GAAG,IAAI;IAAEC,OAAO,GAAG,CAAC,CAAC;IAAE,GAAGC;EAAK,CAAC,GAAGH,OAAO;EAE9D,MAAMI,cAAsC,GAAG;IAC7C,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE,kBAAkB;IAC5B,GAAGF;EACL,CAAC;EAED,IAAID,YAAY,EAAE;IAChB,MAAMI,KAAK,GAAGZ,YAAY,CAAC,CAAC;IAC5B,IAAI,CAACY,KAAK,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACxC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACAJ,cAAc,CAAC,eAAe,CAAC,GAAG,UAAUC,KAAK,EAAE;EACrD;EAEA,MAAMI,aAAa,GAAGV,QAAQ,CAACW,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAClD,MAAMC,GAAG,GAAG,GAAGjB,OAAO,IAAIe,aAAa,EAAE;EAEzCH,OAAO,CAACM,GAAG,CAAC,yBAAyBD,GAAG,EAAE,EAAE;IAC1CE,MAAM,EAAEV,IAAI,CAACU,MAAM,IAAI,KAAK;IAC5BX,OAAO,EAAEE;EACX,CAAC,CAAC;EAEF,IAAI;IACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;MAChCT,OAAO,EAAEE,cAAc;MACvBY,WAAW,EAAE,SAAS;MACtB,GAAGb;IACL,CAAC,CAAC;IAEFG,OAAO,CAACM,GAAG,CAAC,uBAAuBb,QAAQ,GAAG,EAAEe,QAAQ,CAACG,MAAM,CAAC;IAChEX,OAAO,CAACM,GAAG,CAAC,wBAAwBb,QAAQ,GAAG,EAAEmB,MAAM,CAACC,WAAW,CAACL,QAAQ,CAACZ,OAAO,CAACkB,OAAO,CAAC,CAAC,CAAC,CAAC;IAEhG,IAAIC,IAAI;IACR,MAAMC,WAAW,GAAGR,QAAQ,CAACZ,OAAO,CAACqB,GAAG,CAAC,cAAc,CAAC;IAExD,IAAI;MACF,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC3DH,IAAI,GAAG,MAAMP,QAAQ,CAACW,IAAI,CAAC,CAAC;QAC5BnB,OAAO,CAACM,GAAG,CAAC,qBAAqBb,QAAQ,GAAG,EAAE2B,IAAI,CAACC,SAAS,CAACN,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAC9E,CAAC,MAAM;QACLA,IAAI,GAAG,MAAMP,QAAQ,CAACc,IAAI,CAAC,CAAC;QAC5BtB,OAAO,CAACM,GAAG,CAAC,qBAAqBb,QAAQ,GAAG,EAAEsB,IAAI,CAAC;QACnD;QACA,IAAI;UACFA,IAAI,GAAGK,IAAI,CAACG,KAAK,CAACR,IAAI,CAAC;UACvBf,OAAO,CAACM,GAAG,CAAC,oCAAoCb,QAAQ,GAAG,EAAEsB,IAAI,CAAC;QACpE,CAAC,CAAC,MAAM;UACN;QAAA;MAEJ;IACF,CAAC,CAAC,OAAOd,KAAc,EAAE;MACvB,MAAMuB,YAAY,GAAGvB,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAACwB,OAAO,GAAG,wBAAwB;MACtFzB,OAAO,CAACC,KAAK,CAAC,8BAA8BR,QAAQ,GAAG,EAAEQ,KAAK,CAAC;MAC/D,MAAM,IAAIC,KAAK,CAAC,6BAA6BsB,YAAY,EAAE,CAAC;IAC9D;IAEA,IAAI,CAAChB,QAAQ,CAACkB,EAAE,EAAE;MAChB1B,OAAO,CAACC,KAAK,CAAC,iBAAiBR,QAAQ,GAAG,EAAEsB,IAAI,CAAC;MACjD,MAAM,IAAIb,KAAK,CAAC,OAAOa,IAAI,KAAK,QAAQ,GAAGK,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,GAAGA,IAAI,IAAI,mBAAmB,CAAC;IAChG;IAEA,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOd,KAAc,EAAE;IACvB,MAAMuB,YAAY,GAAGvB,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAACwB,OAAO,GAAG,wBAAwB;IACtFzB,OAAO,CAACC,KAAK,CAAC,sBAAsBR,QAAQ,GAAG,EAAEQ,KAAK,CAAC;IACvD,MAAM,IAAIC,KAAK,CAAC,uBAAuBsB,YAAY,EAAE,CAAC;EACxD;AACF;AAEA,OAAO,SAASG,cAAcA,CAAA,EAA2B;EACvD,MAAM5B,KAAK,GAAGZ,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACY,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,OAAO;IACL,eAAe,EAAE,UAAUH,KAAK,EAAE;IAClC,cAAc,EAAE;EAClB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}