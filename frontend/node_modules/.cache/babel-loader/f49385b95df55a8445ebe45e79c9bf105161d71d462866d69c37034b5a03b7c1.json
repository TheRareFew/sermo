{"ast":null,"code":"import { apiRequest } from './utils';\nexport class FileUploadError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.name = 'FileUploadError';\n  }\n}\n\n/**\r\n * Uploads a file to the server\r\n * @param file The file to upload\r\n * @param messageId Optional message ID to attach the file to\r\n * @returns Promise<FileResponse>\r\n * @throws {FileUploadError} When upload fails with specific error details\r\n */\nexport const uploadFile = async (file, messageId) => {\n  console.log(`Uploading file ${file.name}...`);\n\n  // Validate file size\n  if (file.size > 50 * 1024 * 1024) {\n    throw new FileUploadError('File size exceeds 50MB limit', 'FILE_TOO_LARGE');\n  }\n\n  // Validate file type\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\n  if (!allowedTypes.includes(file.type)) {\n    throw new FileUploadError('File type not supported. Allowed types: jpg, png, gif, pdf, txt', 'INVALID_FILE_TYPE');\n  }\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (messageId) {\n      formData.append('message_id', messageId);\n    }\n\n    // Use apiRequest but override Content-Type header since we're sending FormData\n    const response = await apiRequest('/files/upload', {\n      method: 'POST',\n      headers: {\n        // Remove Content-Type to let browser set it with boundary\n      },\n      body: formData\n    });\n    console.log('File uploaded successfully:', response);\n    return response;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n\n    // Handle specific error cases\n    if (error instanceof Error) {\n      if (error.message.includes('Network')) {\n        throw new FileUploadError('Network error occurred while uploading file. Please check your connection.', 'NETWORK_ERROR');\n      }\n      if (error.message.includes('413')) {\n        throw new FileUploadError('File size too large for server. Maximum size: 50MB', 'SERVER_FILE_TOO_LARGE');\n      }\n      if (error.message.includes('415')) {\n        throw new FileUploadError('File type not accepted by server', 'SERVER_INVALID_TYPE');\n      }\n      if (error.message.includes('401')) {\n        throw new FileUploadError('Authentication error. Please try logging in again.', 'AUTH_ERROR');\n      }\n      if (error.message.includes('503')) {\n        throw new FileUploadError('Server is temporarily unavailable. Please try again later.', 'SERVER_ERROR');\n      }\n    }\n\n    // Generic error case\n    throw new FileUploadError('Failed to upload file. Please try again.', 'UPLOAD_FAILED');\n  }\n};","map":{"version":3,"names":["apiRequest","FileUploadError","Error","constructor","message","code","name","uploadFile","file","messageId","console","log","size","allowedTypes","includes","type","formData","FormData","append","response","method","headers","body","error"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/files.ts"],"sourcesContent":["import { apiRequest } from './utils';\r\n\r\nexport interface FileResponse {\r\n  id: string;\r\n  filename: string;\r\n  file_type: string;\r\n  file_path: string;\r\n  message_id?: string;\r\n  created_at: string;\r\n}\r\n\r\nexport class FileUploadError extends Error {\r\n  constructor(message: string, public code: string) {\r\n    super(message);\r\n    this.name = 'FileUploadError';\r\n  }\r\n}\r\n\r\n/**\r\n * Uploads a file to the server\r\n * @param file The file to upload\r\n * @param messageId Optional message ID to attach the file to\r\n * @returns Promise<FileResponse>\r\n * @throws {FileUploadError} When upload fails with specific error details\r\n */\r\nexport const uploadFile = async (file: File, messageId?: string): Promise<FileResponse> => {\r\n  console.log(`Uploading file ${file.name}...`);\r\n  \r\n  // Validate file size\r\n  if (file.size > 50 * 1024 * 1024) {\r\n    throw new FileUploadError(\r\n      'File size exceeds 50MB limit',\r\n      'FILE_TOO_LARGE'\r\n    );\r\n  }\r\n\r\n  // Validate file type\r\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\r\n  if (!allowedTypes.includes(file.type)) {\r\n    throw new FileUploadError(\r\n      'File type not supported. Allowed types: jpg, png, gif, pdf, txt',\r\n      'INVALID_FILE_TYPE'\r\n    );\r\n  }\r\n\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    if (messageId) {\r\n      formData.append('message_id', messageId);\r\n    }\r\n\r\n    // Use apiRequest but override Content-Type header since we're sending FormData\r\n    const response = await apiRequest<FileResponse>('/files/upload', {\r\n      method: 'POST',\r\n      headers: {\r\n        // Remove Content-Type to let browser set it with boundary\r\n      } as Record<string, string>,\r\n      body: formData,\r\n    });\r\n\r\n    console.log('File uploaded successfully:', response);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    \r\n    // Handle specific error cases\r\n    if (error instanceof Error) {\r\n      if (error.message.includes('Network')) {\r\n        throw new FileUploadError(\r\n          'Network error occurred while uploading file. Please check your connection.',\r\n          'NETWORK_ERROR'\r\n        );\r\n      }\r\n      if (error.message.includes('413')) {\r\n        throw new FileUploadError(\r\n          'File size too large for server. Maximum size: 50MB',\r\n          'SERVER_FILE_TOO_LARGE'\r\n        );\r\n      }\r\n      if (error.message.includes('415')) {\r\n        throw new FileUploadError(\r\n          'File type not accepted by server',\r\n          'SERVER_INVALID_TYPE'\r\n        );\r\n      }\r\n      if (error.message.includes('401')) {\r\n        throw new FileUploadError(\r\n          'Authentication error. Please try logging in again.',\r\n          'AUTH_ERROR'\r\n        );\r\n      }\r\n      if (error.message.includes('503')) {\r\n        throw new FileUploadError(\r\n          'Server is temporarily unavailable. Please try again later.',\r\n          'SERVER_ERROR'\r\n        );\r\n      }\r\n    }\r\n\r\n    // Generic error case\r\n    throw new FileUploadError(\r\n      'Failed to upload file. Please try again.',\r\n      'UPLOAD_FAILED'\r\n    );\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,UAAU,QAAQ,SAAS;AAWpC,OAAO,MAAMC,eAAe,SAASC,KAAK,CAAC;EACzCC,WAAWA,CAACC,OAAe,EAASC,IAAY,EAAE;IAChD,KAAK,CAACD,OAAO,CAAC;IAAC,KADmBC,IAAY,GAAZA,IAAY;IAE9C,IAAI,CAACC,IAAI,GAAG,iBAAiB;EAC/B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAU,EAAEC,SAAkB,KAA4B;EACzFC,OAAO,CAACC,GAAG,CAAC,kBAAkBH,IAAI,CAACF,IAAI,KAAK,CAAC;;EAE7C;EACA,IAAIE,IAAI,CAACI,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE;IAChC,MAAM,IAAIX,eAAe,CACvB,8BAA8B,EAC9B,gBACF,CAAC;EACH;;EAEA;EACA,MAAMY,YAAY,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,iBAAiB,EAAE,YAAY,CAAC;EAC9F,IAAI,CAACA,YAAY,CAACC,QAAQ,CAACN,IAAI,CAACO,IAAI,CAAC,EAAE;IACrC,MAAM,IAAId,eAAe,CACvB,iEAAiE,EACjE,mBACF,CAAC;EACH;EAEA,IAAI;IACF,MAAMe,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEV,IAAI,CAAC;IAC7B,IAAIC,SAAS,EAAE;MACbO,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAET,SAAS,CAAC;IAC1C;;IAEA;IACA,MAAMU,QAAQ,GAAG,MAAMnB,UAAU,CAAe,eAAe,EAAE;MAC/DoB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP;MAAA,CACyB;MAC3BC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEFN,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEQ,QAAQ,CAAC;IACpD,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;;IAE7C;IACA,IAAIA,KAAK,YAAYrB,KAAK,EAAE;MAC1B,IAAIqB,KAAK,CAACnB,OAAO,CAACU,QAAQ,CAAC,SAAS,CAAC,EAAE;QACrC,MAAM,IAAIb,eAAe,CACvB,4EAA4E,EAC5E,eACF,CAAC;MACH;MACA,IAAIsB,KAAK,CAACnB,OAAO,CAACU,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,IAAIb,eAAe,CACvB,oDAAoD,EACpD,uBACF,CAAC;MACH;MACA,IAAIsB,KAAK,CAACnB,OAAO,CAACU,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,IAAIb,eAAe,CACvB,kCAAkC,EAClC,qBACF,CAAC;MACH;MACA,IAAIsB,KAAK,CAACnB,OAAO,CAACU,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,IAAIb,eAAe,CACvB,oDAAoD,EACpD,YACF,CAAC;MACH;MACA,IAAIsB,KAAK,CAACnB,OAAO,CAACU,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,IAAIb,eAAe,CACvB,4DAA4D,EAC5D,cACF,CAAC;MACH;IACF;;IAEA;IACA,MAAM,IAAIA,eAAe,CACvB,0CAA0C,EAC1C,eACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}