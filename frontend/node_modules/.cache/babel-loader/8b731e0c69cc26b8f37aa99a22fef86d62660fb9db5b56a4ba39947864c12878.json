{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, addMessage, setMessages, setUsers, setLoading, setError } from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n_c7 = ChatMessages;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c8 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c9 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c10 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c11 = CreateChannelButton;\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\nconst transformMessage = (msg, users) => {\n  return {\n    id: msg.id,\n    content: msg.content,\n    sender: users[msg.sender_id.toString()] || {\n      id: msg.sender_id,\n      username: 'Unknown User',\n      email: '',\n      full_name: 'Unknown User',\n      status: 'offline',\n      last_seen: msg.created_at\n    },\n    channel_id: msg.channel_id,\n    created_at: msg.created_at,\n    updated_at: msg.created_at\n  };\n};\nconst validateMessage = msg => {\n  const isValid = typeof msg === 'object' && msg !== null && typeof msg.id === 'number' && typeof msg.content === 'string' && typeof msg.channel_id === 'number' && typeof msg.created_at === 'string' && msg.sender && typeof msg.sender === 'object';\n  if (!isValid) {\n    console.error('Invalid message format:', msg);\n  }\n  return isValid;\n};\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const channels = useSelector(state => state.chat.channels);\n  const users = useSelector(state => state.chat.users);\n  const messages = useSelector(state => {\n    const channelMessages = state.chat.messages[(activeChannelId === null || activeChannelId === void 0 ? void 0 : activeChannelId.toString()) || ''] || [];\n    return channelMessages.filter(validateMessage);\n  });\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    const messageHandler = data => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id) {\n        const rawMessage = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at || new Date().toISOString(),\n          is_system: data.is_system\n        };\n        const transformedMessage = transformMessage(rawMessage, users);\n        dispatch(addMessage({\n          channelId: rawMessage.channel_id.toString(),\n          message: transformedMessage\n        }));\n        if (rawMessage.channel_id === activeChannelId) {\n          scrollToBottom();\n        }\n      }\n    };\n    wsService.on('message', messageHandler);\n    return () => {\n      wsService.off('message', messageHandler);\n    };\n  }, [dispatch, users, activeChannelId]);\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        dispatch(setLoading(true));\n        const channelsData = await getChannels();\n        dispatch(setChannels(channelsData));\n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          dispatch(setActiveChannel(firstChannelId));\n          const [messagesData, usersData] = await Promise.all([getChannelMessages(firstChannelId), getChannelUsers(firstChannelId)]);\n          const userMap = usersData.reduce((acc, user) => {\n            acc[user.id.toString()] = user;\n            return acc;\n          }, {});\n          dispatch(setUsers(userMap));\n          dispatch(setMessages({\n            channelId: firstChannelId.toString(),\n            messages: messagesData.map(msg => transformMessage(msg, userMap))\n          }));\n        }\n      } catch (error) {\n        dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch initial data'));\n      } finally {\n        dispatch(setLoading(false));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]);\n  const handleChannelClick = async channelId => {\n    try {\n      dispatch(setLoading(true));\n      dispatch(setActiveChannel(channelId));\n      const [messagesData, usersData] = await Promise.all([getChannelMessages(channelId), getChannelUsers(channelId)]);\n      const userMap = usersData.reduce((acc, user) => {\n        acc[user.id.toString()] = user;\n        return acc;\n      }, {});\n      dispatch(setUsers(userMap));\n      dispatch(setMessages({\n        channelId: channelId.toString(),\n        messages: messagesData.map(msg => transformMessage(msg, userMap))\n      }));\n      scrollToBottom();\n    } catch (error) {\n      dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch channel data'));\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n          channel: channel,\n          isActive: channel.id === activeChannelId,\n          onClick: () => handleChannelClick(channel.id)\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          user: user\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sermo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        children: [messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `message-${msg.id}`,\n          children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n            content: msg.content,\n            sender: msg.sender.username,\n            timestamp: msg.created_at\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), activeChannelId && /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"xB9mRrRXhtZCoq1juQOtITdp6fI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c12 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatMessages\");\n$RefreshReg$(_c8, \"ChatInput\");\n$RefreshReg$(_c9, \"LogoutButton\");\n$RefreshReg$(_c10, \"ChannelHeader\");\n$RefreshReg$(_c11, \"CreateChannelButton\");\n$RefreshReg$(_c12, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","addMessage","setMessages","setUsers","setLoading","setError","Button","ChatMessage","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","wsService","getChannels","getChannelMessages","getChannelUsers","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatMessages","_c7","ChatInput","_c8","LogoutButton","button","error","_c9","ChannelHeader","_c10","CreateChannelButton","_c11","NoChannelMessage","secondary","LoadingMessage","textSecondary","transformMessage","msg","users","id","content","sender","sender_id","toString","username","email","full_name","status","last_seen","created_at","channel_id","updated_at","validateMessage","isValid","console","MainLayout","_s","dispatch","messagesEndRef","isCreateModalOpen","setIsCreateModalOpen","activeChannelId","state","chat","channels","messages","channelMessages","filter","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","messageHandler","data","type","rawMessage","Date","toISOString","is_system","transformedMessage","channelId","message","on","off","fetchInitialData","channelsData","length","firstChannelId","messagesData","usersData","Promise","all","userMap","reduce","acc","user","map","Error","handleChannelClick","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","channel","isActive","Object","values","timestamp","ref","onClose","_c12","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  addMessage,\n  setMessages,\n  setUsers,\n  updateUserStatus,\n  setLoading,\n  setError\n} from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { Message, WebSocketMessage, User, RootState } from '../../../types';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n\ninterface RawMessage {\n  id: number;\n  content: string;\n  sender_id: number;\n  channel_id: number;\n  created_at: string;\n  is_system?: boolean;\n}\n\nconst transformMessage = (msg: RawMessage, users: { [key: string]: User }): Message => {\n  return {\n    id: msg.id,\n    content: msg.content,\n    sender: users[msg.sender_id.toString()] || {\n      id: msg.sender_id,\n      username: 'Unknown User',\n      email: '',\n      full_name: 'Unknown User',\n      status: 'offline',\n      last_seen: msg.created_at\n    },\n    channel_id: msg.channel_id,\n    created_at: msg.created_at,\n    updated_at: msg.created_at\n  };\n};\n\nconst validateMessage = (msg: any): msg is Message => {\n  const isValid = (\n    typeof msg === 'object' &&\n    msg !== null &&\n    typeof msg.id === 'number' &&\n    typeof msg.content === 'string' &&\n    typeof msg.channel_id === 'number' &&\n    typeof msg.created_at === 'string' &&\n    msg.sender && typeof msg.sender === 'object'\n  );\n\n  if (!isValid) {\n    console.error('Invalid message format:', msg);\n  }\n\n  return isValid;\n};\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  const activeChannelId = useSelector((state: RootState) => state.chat.activeChannelId);\n  const channels = useSelector((state: RootState) => state.chat.channels);\n  const users = useSelector((state: RootState) => state.chat.users);\n  const messages = useSelector((state: RootState) => {\n    const channelMessages = state.chat.messages[activeChannelId?.toString() || ''] || [];\n    return channelMessages.filter(validateMessage);\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    const messageHandler = (data: WebSocketMessage) => {\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id) {\n        const rawMessage: RawMessage = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at || new Date().toISOString(),\n          is_system: data.is_system\n        };\n        \n        const transformedMessage = transformMessage(rawMessage, users);\n        dispatch(addMessage({ \n          channelId: rawMessage.channel_id.toString(), \n          message: transformedMessage \n        }));\n        \n        if (rawMessage.channel_id === activeChannelId) {\n          scrollToBottom();\n        }\n      }\n    };\n\n    wsService.on('message', messageHandler);\n    return () => {\n      wsService.off('message', messageHandler);\n    };\n  }, [dispatch, users, activeChannelId]);\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        dispatch(setLoading(true));\n        const channelsData = await getChannels();\n        dispatch(setChannels(channelsData));\n        \n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          dispatch(setActiveChannel(firstChannelId));\n          \n          const [messagesData, usersData] = await Promise.all([\n            getChannelMessages(firstChannelId),\n            getChannelUsers(firstChannelId)\n          ]);\n          \n          const userMap = usersData.reduce((acc: { [key: string]: User }, user: User) => {\n            acc[user.id.toString()] = user;\n            return acc;\n          }, {});\n          \n          dispatch(setUsers(userMap));\n          dispatch(setMessages({ \n            channelId: firstChannelId.toString(), \n            messages: messagesData.map(msg => transformMessage(msg as RawMessage, userMap))\n          }));\n        }\n      } catch (error) {\n        dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch initial data'));\n      } finally {\n        dispatch(setLoading(false));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]);\n\n  const handleChannelClick = async (channelId: number) => {\n    try {\n      dispatch(setLoading(true));\n      dispatch(setActiveChannel(channelId));\n      \n      const [messagesData, usersData] = await Promise.all([\n        getChannelMessages(channelId),\n        getChannelUsers(channelId)\n      ]);\n      \n      const userMap = usersData.reduce((acc: { [key: string]: User }, user: User) => {\n        acc[user.id.toString()] = user;\n        return acc;\n      }, {});\n      \n      dispatch(setUsers(userMap));\n      dispatch(setMessages({ \n        channelId: channelId.toString(), \n        messages: messagesData.map(msg => transformMessage(msg as RawMessage, userMap))\n      }));\n      \n      scrollToBottom();\n    } catch (error) {\n      dispatch(setError(error instanceof Error ? error.message : 'Failed to fetch channel data'));\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton onClick={() => setIsCreateModalOpen(true)}>\n              +\n            </CreateChannelButton>\n          </ChannelHeader>\n          {channels.map(channel => (\n            <ChannelListItem\n              key={channel.id}\n              channel={channel}\n              isActive={channel.id === activeChannelId}\n              onClick={() => handleChannelClick(channel.id)}\n            />\n          ))}\n        </ChannelList>\n        <UserList>\n          <h2>Users</h2>\n          {Object.values(users).map(user => (\n            <UserListItem key={user.id} user={user} />\n          ))}\n        </UserList>\n      </Sidebar>\n      \n      <ChatArea>\n        <ChatHeader>\n          <h1>Sermo</h1>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </ChatHeader>\n        \n        <ChatMessages>\n          {messages.map((msg: Message) => (\n            <div key={msg.id} id={`message-${msg.id}`}>\n              <ChatMessage\n                content={msg.content}\n                sender={msg.sender.username}\n                timestamp={msg.created_at}\n              />\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </ChatMessages>\n        \n        {activeChannelId && (\n          <ChatInput>\n            <MessageInput channelId={activeChannelId} />\n          </ChatInput>\n        )}\n      </ChatArea>\n      \n      {isCreateModalOpen && (\n        <CreateChannelModal onClose={() => setIsCreateModalOpen(false)} />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}