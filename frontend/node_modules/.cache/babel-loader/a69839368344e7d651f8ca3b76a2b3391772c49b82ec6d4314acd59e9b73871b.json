{"ast":null,"code":"import { API_URL } from './utils';\nimport { getAuthToken } from './auth';\nexport class FileUploadError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.name = 'FileUploadError';\n  }\n}\n\n/**\r\n * Uploads a file to the server\r\n * @param file The file to upload\r\n * @param messageId Optional message ID to attach the file to\r\n * @returns Promise<FileResponse>\r\n * @throws {FileUploadError} When upload fails with specific error details\r\n */\nexport const uploadFile = async (file, messageId) => {\n  console.log(`Uploading file ${file.name}...`);\n\n  // Validate file size\n  if (file.size > 50 * 1024 * 1024) {\n    throw new FileUploadError('File size exceeds 50MB limit', 'FILE_TOO_LARGE');\n  }\n\n  // Validate file type\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\n  if (!allowedTypes.includes(file.type)) {\n    throw new FileUploadError('File type not supported. Allowed types: jpg, png, gif, pdf, txt', 'INVALID_FILE_TYPE');\n  }\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (messageId) {\n      // Convert messageId to integer and validate\n      const messageIdInt = parseInt(messageId, 10);\n      if (isNaN(messageIdInt)) {\n        throw new FileUploadError('Invalid message ID format', 'INVALID_MESSAGE_ID');\n      }\n      formData.append('message_id', messageIdInt.toString());\n    }\n    const token = getAuthToken();\n    if (!token) {\n      throw new FileUploadError('Authentication required. Please log in.', 'AUTH_ERROR');\n    }\n\n    // First, send a preflight request\n    const preflightResponse = await fetch(`${API_URL}/files/upload`, {\n      method: 'OPTIONS',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Access-Control-Request-Method': 'POST',\n        'Access-Control-Request-Headers': 'authorization,content-type'\n      },\n      credentials: 'include',\n      mode: 'cors'\n    });\n    if (!preflightResponse.ok && preflightResponse.status !== 204) {\n      throw new FileUploadError('Server configuration error. Please try again later.', 'CORS_ERROR');\n    }\n\n    // Then send the actual upload request\n    const response = await fetch(`${API_URL}/files/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: formData\n    });\n    if (!response.ok) {\n      let errorMessage;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.detail || 'Unknown error occurred';\n      } catch {\n        errorMessage = (await response.text()) || 'Unknown error occurred';\n      }\n      console.error('Upload failed:', errorMessage);\n      if (response.status === 413) {\n        throw new FileUploadError('File size too large for server. Maximum size: 50MB', 'SERVER_FILE_TOO_LARGE');\n      }\n      if (response.status === 415) {\n        throw new FileUploadError('File type not accepted by server', 'SERVER_INVALID_TYPE');\n      }\n      if (response.status === 401) {\n        throw new FileUploadError('Authentication error. Please try logging in again.', 'AUTH_ERROR');\n      }\n      if (response.status === 503) {\n        throw new FileUploadError('Server is temporarily unavailable. Please try again later.', 'SERVER_ERROR');\n      }\n      if (response.status === 500) {\n        throw new FileUploadError(`Server error: ${errorMessage}`, 'SERVER_ERROR');\n      }\n      throw new FileUploadError(`Upload failed: ${errorMessage}`, 'UPLOAD_FAILED');\n    }\n    const responseData = await response.json();\n    console.log('File uploaded successfully:', responseData);\n    return responseData;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    if (error instanceof FileUploadError) {\n      throw error;\n    }\n    if (error instanceof TypeError && error.message.includes('NetworkError')) {\n      throw new FileUploadError('Network error occurred. Please check your connection and try again.', 'NETWORK_ERROR');\n    }\n\n    // Generic error case\n    throw new FileUploadError('Failed to upload file. Please try again.', 'UPLOAD_FAILED');\n  }\n};","map":{"version":3,"names":["API_URL","getAuthToken","FileUploadError","Error","constructor","message","code","name","uploadFile","file","messageId","console","log","size","allowedTypes","includes","type","formData","FormData","append","messageIdInt","parseInt","isNaN","toString","token","preflightResponse","fetch","method","headers","credentials","mode","ok","status","response","body","errorMessage","errorData","json","detail","text","error","responseData","TypeError"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/files.ts"],"sourcesContent":["import { apiRequest, API_URL } from './utils';\r\nimport { getAuthToken } from './auth';\r\n\r\nexport interface FileResponse {\r\n  id: string;\r\n  filename: string;\r\n  file_type: string;\r\n  file_path: string;\r\n  message_id?: number;\r\n  created_at: string;\r\n}\r\n\r\nexport class FileUploadError extends Error {\r\n  constructor(message: string, public code: string) {\r\n    super(message);\r\n    this.name = 'FileUploadError';\r\n  }\r\n}\r\n\r\n/**\r\n * Uploads a file to the server\r\n * @param file The file to upload\r\n * @param messageId Optional message ID to attach the file to\r\n * @returns Promise<FileResponse>\r\n * @throws {FileUploadError} When upload fails with specific error details\r\n */\r\nexport const uploadFile = async (file: File, messageId?: string): Promise<FileResponse> => {\r\n  console.log(`Uploading file ${file.name}...`);\r\n  \r\n  // Validate file size\r\n  if (file.size > 50 * 1024 * 1024) {\r\n    throw new FileUploadError(\r\n      'File size exceeds 50MB limit',\r\n      'FILE_TOO_LARGE'\r\n    );\r\n  }\r\n\r\n  // Validate file type\r\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\r\n  if (!allowedTypes.includes(file.type)) {\r\n    throw new FileUploadError(\r\n      'File type not supported. Allowed types: jpg, png, gif, pdf, txt',\r\n      'INVALID_FILE_TYPE'\r\n    );\r\n  }\r\n\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    if (messageId) {\r\n      // Convert messageId to integer and validate\r\n      const messageIdInt = parseInt(messageId, 10);\r\n      if (isNaN(messageIdInt)) {\r\n        throw new FileUploadError(\r\n          'Invalid message ID format',\r\n          'INVALID_MESSAGE_ID'\r\n        );\r\n      }\r\n      formData.append('message_id', messageIdInt.toString());\r\n    }\r\n\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      throw new FileUploadError(\r\n        'Authentication required. Please log in.',\r\n        'AUTH_ERROR'\r\n      );\r\n    }\r\n\r\n    // First, send a preflight request\r\n    const preflightResponse = await fetch(`${API_URL}/files/upload`, {\r\n      method: 'OPTIONS',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Access-Control-Request-Method': 'POST',\r\n        'Access-Control-Request-Headers': 'authorization,content-type',\r\n      },\r\n      credentials: 'include',\r\n      mode: 'cors',\r\n    });\r\n\r\n    if (!preflightResponse.ok && preflightResponse.status !== 204) {\r\n      throw new FileUploadError(\r\n        'Server configuration error. Please try again later.',\r\n        'CORS_ERROR'\r\n      );\r\n    }\r\n\r\n    // Then send the actual upload request\r\n    const response = await fetch(`${API_URL}/files/upload`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      credentials: 'include',\r\n      mode: 'cors',\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      let errorMessage: string;\r\n      try {\r\n        const errorData = await response.json();\r\n        errorMessage = errorData.detail || 'Unknown error occurred';\r\n      } catch {\r\n        errorMessage = await response.text() || 'Unknown error occurred';\r\n      }\r\n      console.error('Upload failed:', errorMessage);\r\n      \r\n      if (response.status === 413) {\r\n        throw new FileUploadError(\r\n          'File size too large for server. Maximum size: 50MB',\r\n          'SERVER_FILE_TOO_LARGE'\r\n        );\r\n      }\r\n      if (response.status === 415) {\r\n        throw new FileUploadError(\r\n          'File type not accepted by server',\r\n          'SERVER_INVALID_TYPE'\r\n        );\r\n      }\r\n      if (response.status === 401) {\r\n        throw new FileUploadError(\r\n          'Authentication error. Please try logging in again.',\r\n          'AUTH_ERROR'\r\n        );\r\n      }\r\n      if (response.status === 503) {\r\n        throw new FileUploadError(\r\n          'Server is temporarily unavailable. Please try again later.',\r\n          'SERVER_ERROR'\r\n        );\r\n      }\r\n      if (response.status === 500) {\r\n        throw new FileUploadError(\r\n          `Server error: ${errorMessage}`,\r\n          'SERVER_ERROR'\r\n        );\r\n      }\r\n\r\n      throw new FileUploadError(\r\n        `Upload failed: ${errorMessage}`,\r\n        'UPLOAD_FAILED'\r\n      );\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    console.log('File uploaded successfully:', responseData);\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    \r\n    if (error instanceof FileUploadError) {\r\n      throw error;\r\n    }\r\n\r\n    if (error instanceof TypeError && error.message.includes('NetworkError')) {\r\n      throw new FileUploadError(\r\n        'Network error occurred. Please check your connection and try again.',\r\n        'NETWORK_ERROR'\r\n      );\r\n    }\r\n\r\n    // Generic error case\r\n    throw new FileUploadError(\r\n      'Failed to upload file. Please try again.',\r\n      'UPLOAD_FAILED'\r\n    );\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}