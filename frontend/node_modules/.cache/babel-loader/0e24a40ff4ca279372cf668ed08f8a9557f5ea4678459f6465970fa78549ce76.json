{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Important for sending cookies\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear token and redirect to login only if we're not already on the login page\n    if (!window.location.pathname.includes('/login')) {\n      localStorage.removeItem('auth_token');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","window","location","pathname","includes","removeItem","href"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/base.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nexport const api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Important for sending cookies\r\n});\r\n\r\n// Add request interceptor to include auth token\r\napi.interceptors.request.use((config: any) => {\r\n  const token = localStorage.getItem('auth_token');\r\n  if (token && config.headers) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Add response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error: any) => {\r\n    if (error?.response?.status === 401) {\r\n      // Clear token and redirect to login only if we're not already on the login page\r\n      if (!window.location.pathname.includes('/login')) {\r\n        localStorage.removeItem('auth_token');\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC9BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAW,IAAK;EAC5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIF,KAAK,IAAID,MAAM,CAACL,OAAO,EAAE;IAC3BK,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGK,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAU,IAAK;EAAA,IAAAI,eAAA;EACd,IAAI,CAAAJ,KAAK,aAALA,KAAK,wBAAAI,eAAA,GAALJ,KAAK,CAAEG,QAAQ,cAAAC,eAAA,uBAAfA,eAAA,CAAiBC,MAAM,MAAK,GAAG,EAAE;IACnC;IACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAChDZ,YAAY,CAACa,UAAU,CAAC,YAAY,CAAC;MACrCJ,MAAM,CAACC,QAAQ,CAACI,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}