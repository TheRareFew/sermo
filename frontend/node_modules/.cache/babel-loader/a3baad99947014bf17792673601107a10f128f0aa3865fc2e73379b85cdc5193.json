{"ast":null,"code":"import { apiRequest } from './utils';\n// Transform API user to our User type\nconst transformUser = apiUser => ({\n  ...apiUser,\n  email: '',\n  // Set default values for required fields that the channel API doesn't provide\n  full_name: apiUser.username // Use username as full_name if not provided\n});\nexport const getChannels = async () => {\n  console.log('Fetching channels...');\n  const channels = await apiRequest('/api/channels/');\n  console.log('Received channels:', channels);\n  return channels;\n};\nexport const getChannelMessages = async (channelId, limit = 50) => {\n  console.log(`Fetching messages for channel ${channelId} with limit ${limit}...`);\n  const messages = await apiRequest(`/api/channels/${channelId}/messages?limit=${limit}`);\n  console.log('Received messages:', messages);\n  return messages;\n};\nexport const getChannelUsers = async channelId => {\n  console.log(`Fetching users for channel ${channelId}...`);\n  const apiUsers = await apiRequest(`/api/channels/${channelId}/users`);\n  console.log('Received users:', apiUsers);\n  const users = apiUsers.map(transformUser);\n  console.log('Transformed users:', users);\n  return users;\n};\nexport const createChannel = async (name, description) => {\n  console.log('Creating channel:', {\n    name,\n    description\n  });\n  const channel = await apiRequest('/api/channels/', {\n    method: 'POST',\n    body: JSON.stringify({\n      name,\n      description\n    })\n  });\n  console.log('Created channel:', channel);\n  return channel;\n};\nexport const joinChannel = async channelId => {\n  console.log(`Joining channel ${channelId}...`);\n  await apiRequest(`/api/channels/${channelId}/join`, {\n    method: 'POST'\n  });\n  console.log(`Joined channel ${channelId}`);\n};\nexport const leaveChannel = async channelId => {\n  console.log(`Leaving channel ${channelId}...`);\n  await apiRequest(`/api/channels/${channelId}/leave`, {\n    method: 'POST'\n  });\n  console.log(`Left channel ${channelId}`);\n};","map":{"version":3,"names":["apiRequest","transformUser","apiUser","email","full_name","username","getChannels","console","log","channels","getChannelMessages","channelId","limit","messages","getChannelUsers","apiUsers","users","map","createChannel","name","description","channel","method","body","JSON","stringify","joinChannel","leaveChannel"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/chat.ts"],"sourcesContent":["import { Channel, Message, User } from '../../types';\r\nimport { apiRequest } from './utils';\r\n\r\ninterface ApiUser {\r\n  id: number;\r\n  username: string;\r\n  status: 'online' | 'offline' | 'away' | 'busy';\r\n  last_seen: string;\r\n}\r\n\r\n// Transform API user to our User type\r\nconst transformUser = (apiUser: ApiUser): User => ({\r\n  ...apiUser,\r\n  email: '', // Set default values for required fields that the channel API doesn't provide\r\n  full_name: apiUser.username, // Use username as full_name if not provided\r\n});\r\n\r\nexport const getChannels = async (): Promise<Channel[]> => {\r\n  console.log('Fetching channels...');\r\n  const channels = await apiRequest<Channel[]>('/api/channels/');\r\n  console.log('Received channels:', channels);\r\n  return channels;\r\n};\r\n\r\nexport const getChannelMessages = async (channelId: number, limit: number = 50): Promise<Message[]> => {\r\n  console.log(`Fetching messages for channel ${channelId} with limit ${limit}...`);\r\n  const messages = await apiRequest<Message[]>(`/api/channels/${channelId}/messages?limit=${limit}`);\r\n  console.log('Received messages:', messages);\r\n  return messages;\r\n};\r\n\r\nexport const getChannelUsers = async (channelId: number): Promise<User[]> => {\r\n  console.log(`Fetching users for channel ${channelId}...`);\r\n  const apiUsers = await apiRequest<ApiUser[]>(`/api/channels/${channelId}/users`);\r\n  console.log('Received users:', apiUsers);\r\n  const users = apiUsers.map(transformUser);\r\n  console.log('Transformed users:', users);\r\n  return users;\r\n};\r\n\r\nexport const createChannel = async (name: string, description?: string): Promise<Channel> => {\r\n  console.log('Creating channel:', { name, description });\r\n  const channel = await apiRequest<Channel>('/api/channels/', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ name, description }),\r\n  });\r\n  console.log('Created channel:', channel);\r\n  return channel;\r\n};\r\n\r\nexport const joinChannel = async (channelId: number): Promise<void> => {\r\n  console.log(`Joining channel ${channelId}...`);\r\n  await apiRequest(`/api/channels/${channelId}/join`, {\r\n    method: 'POST',\r\n  });\r\n  console.log(`Joined channel ${channelId}`);\r\n};\r\n\r\nexport const leaveChannel = async (channelId: number): Promise<void> => {\r\n  console.log(`Leaving channel ${channelId}...`);\r\n  await apiRequest(`/api/channels/${channelId}/leave`, {\r\n    method: 'POST',\r\n  });\r\n  console.log(`Left channel ${channelId}`);\r\n}; "],"mappings":"AACA,SAASA,UAAU,QAAQ,SAAS;AASpC;AACA,MAAMC,aAAa,GAAIC,OAAgB,KAAY;EACjD,GAAGA,OAAO;EACVC,KAAK,EAAE,EAAE;EAAE;EACXC,SAAS,EAAEF,OAAO,CAACG,QAAQ,CAAE;AAC/B,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAgC;EACzDC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACnC,MAAMC,QAAQ,GAAG,MAAMT,UAAU,CAAY,gBAAgB,CAAC;EAC9DO,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,QAAQ,CAAC;EAC3C,OAAOA,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,KAAa,GAAG,EAAE,KAAyB;EACrGL,OAAO,CAACC,GAAG,CAAC,iCAAiCG,SAAS,eAAeC,KAAK,KAAK,CAAC;EAChF,MAAMC,QAAQ,GAAG,MAAMb,UAAU,CAAY,iBAAiBW,SAAS,mBAAmBC,KAAK,EAAE,CAAC;EAClGL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,QAAQ,CAAC;EAC3C,OAAOA,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAOH,SAAiB,IAAsB;EAC3EJ,OAAO,CAACC,GAAG,CAAC,8BAA8BG,SAAS,KAAK,CAAC;EACzD,MAAMI,QAAQ,GAAG,MAAMf,UAAU,CAAY,iBAAiBW,SAAS,QAAQ,CAAC;EAChFJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEO,QAAQ,CAAC;EACxC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,GAAG,CAAChB,aAAa,CAAC;EACzCM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEQ,KAAK,CAAC;EACxC,OAAOA,KAAK;AACd,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,IAAY,EAAEC,WAAoB,KAAuB;EAC3Fb,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;IAAEW,IAAI;IAAEC;EAAY,CAAC,CAAC;EACvD,MAAMC,OAAO,GAAG,MAAMrB,UAAU,CAAU,gBAAgB,EAAE;IAC1DsB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,IAAI;MAAEC;IAAY,CAAC;EAC5C,CAAC,CAAC;EACFb,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEa,OAAO,CAAC;EACxC,OAAOA,OAAO;AAChB,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAOf,SAAiB,IAAoB;EACrEJ,OAAO,CAACC,GAAG,CAAC,mBAAmBG,SAAS,KAAK,CAAC;EAC9C,MAAMX,UAAU,CAAC,iBAAiBW,SAAS,OAAO,EAAE;IAClDW,MAAM,EAAE;EACV,CAAC,CAAC;EACFf,OAAO,CAACC,GAAG,CAAC,kBAAkBG,SAAS,EAAE,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMgB,YAAY,GAAG,MAAOhB,SAAiB,IAAoB;EACtEJ,OAAO,CAACC,GAAG,CAAC,mBAAmBG,SAAS,KAAK,CAAC;EAC9C,MAAMX,UAAU,CAAC,iBAAiBW,SAAS,QAAQ,EAAE;IACnDW,MAAM,EAAE;EACV,CAAC,CAAC;EACFf,OAAO,CAACC,GAAG,CAAC,gBAAgBG,SAAS,EAAE,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}