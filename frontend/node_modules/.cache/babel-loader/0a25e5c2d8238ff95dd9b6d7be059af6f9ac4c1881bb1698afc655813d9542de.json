{"ast":null,"code":"import { getAuthToken } from '../api/auth';\nimport messageQueue from './messageQueue';\n\n// Constants\nconst INITIAL_RECONNECT_DELAY = 1000;\nconst MAX_RECONNECT_DELAY = 30000;\nconst HEARTBEAT_INTERVAL = 15000;\nconst HEARTBEAT_TIMEOUT = 30000;\nconst CONNECTION_TIMEOUT = 5000;\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.currentChannelId = null;\n    this.joinedChannels = new Set();\n    this.reconnectAttempts = 0;\n    this.reconnectTimeout = null;\n    this.isReconnecting = false;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.lastMessageId = null;\n    this.processingQueue = false;\n    this.heartbeatInterval = null;\n    this.lastHeartbeatResponse = Date.now();\n    this.connectionStartTime = 0;\n    this.handleClose = event => {\n      var _this$socket;\n      console.log('[DEBUG] WebSocket closed:', event.code, event.reason);\n      const wasConnected = ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN;\n      this.socket = null;\n\n      // Don't clear joined channels on abnormal closure - we'll try to rejoin them\n      if (event.code === 1000) {\n        this.joinedChannels.clear();\n      }\n      if (event.code !== 1000 && wasConnected) {\n        this.reconnect();\n      }\n    };\n    this.handleWebSocketMessage = event => {\n      try {\n        var _message$data3;\n        const message = JSON.parse(event.data);\n        console.log('[DEBUG] WebSocket received message:', message);\n\n        // Update heartbeat timestamp for any message\n        this.lastHeartbeatResponse = Date.now();\n        if (message.type === 'pong') {\n          return;\n        }\n\n        // Handle message acknowledgments\n        if (message.type === 'message_sent') {\n          var _message$data, _message$data$channel, _message$data2, _message$data2$messag, _message$data2$messag2;\n          const channelId = (_message$data = message.data) === null || _message$data === void 0 ? void 0 : (_message$data$channel = _message$data.channel_id) === null || _message$data$channel === void 0 ? void 0 : _message$data$channel.toString();\n          const messageId = (_message$data2 = message.data) === null || _message$data2 === void 0 ? void 0 : (_message$data2$messag = _message$data2.message) === null || _message$data2$messag === void 0 ? void 0 : (_message$data2$messag2 = _message$data2$messag.id) === null || _message$data2$messag2 === void 0 ? void 0 : _message$data2$messag2.toString();\n          if (channelId && messageId) {\n            console.log('[DEBUG] Marking message as sent:', messageId);\n            messageQueue.markMessageSent(channelId, messageId);\n          }\n        } else if (message.type === 'error' && (_message$data3 = message.data) !== null && _message$data3 !== void 0 && _message$data3.error) {\n          // Handle error messages that might be related to message sending\n          console.error('[DEBUG] Message send error:', message.data.error);\n          // The message will be retried by the queue system\n        }\n\n        // Broadcast message to all handlers\n        this.messageHandlers.forEach(handler => {\n          try {\n            handler(message);\n          } catch (error) {\n            console.error('[DEBUG] Error in message handler:', error);\n          }\n        });\n      } catch (error) {\n        console.error('[DEBUG] Error handling WebSocket message:', error);\n      }\n    };\n  }\n  async connect(channelId) {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      console.log('[DEBUG] Already connected to channel:', channelId);\n      return;\n    }\n\n    // Always disconnect before connecting to ensure clean state\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    this.connectionStartTime = Date.now();\n    try {\n      const token = getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      console.log('[DEBUG] Connecting to WebSocket...');\n      this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\n      await this.waitForConnection();\n      if (this.socket) {\n        this.socket.onmessage = this.handleWebSocketMessage;\n        console.log('[DEBUG] Joining channel:', channelId);\n        await this.joinChannel(channelId);\n        console.log('[DEBUG] Successfully joined channel:', channelId);\n\n        // Process any queued messages after successful connection\n        await this.processMessageQueue();\n      }\n    } catch (error) {\n      console.error('[DEBUG] WebSocket connection failed:', error);\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    }\n  }\n  async waitForConnection() {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('WebSocket connection timeout'));\n      }, CONNECTION_TIMEOUT);\n      if (this.socket) {\n        this.socket.onopen = () => {\n          console.log('[DEBUG] WebSocket connection opened');\n          clearTimeout(timeout);\n          this.startHeartbeat();\n          resolve();\n        };\n        this.socket.onerror = error => {\n          console.error('[DEBUG] WebSocket connection error:', error);\n          clearTimeout(timeout);\n          reject(error);\n        };\n        this.socket.onclose = this.handleClose;\n      }\n    });\n  }\n  startHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    this.heartbeatInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      // Check if we haven't received a heartbeat response in HEARTBEAT_TIMEOUT\n      if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_TIMEOUT) {\n        console.warn('No heartbeat response received, reconnecting...');\n        this.reconnect();\n        return;\n      }\n      try {\n        var _this$socket2;\n        (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.send(JSON.stringify({\n          type: 'ping'\n        }));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n        this.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n  async processMessageQueue() {\n    if (this.processingQueue) return;\n    this.processingQueue = true;\n    console.log('[DEBUG] Processing message queue...');\n    try {\n      while (this.isConnected()) {\n        const channelId = this.currentChannelId;\n        if (!channelId) break;\n        const queuedMessage = messageQueue.getNextMessage(channelId);\n        if (!queuedMessage) break;\n        try {\n          var _this$socket3;\n          const message = {\n            type: 'message',\n            data: {\n              channel_id: parseInt(queuedMessage.channelId),\n              content: queuedMessage.content,\n              parent_id: queuedMessage.parentId || null\n            }\n          };\n          if (((_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.readyState) === WebSocket.OPEN) {\n            messageQueue.markMessageAttempted(channelId, queuedMessage.id);\n            console.log('[DEBUG] Sending message via WebSocket:', message);\n            this.socket.send(JSON.stringify(message));\n            messageQueue.markMessageSent(channelId, queuedMessage.id);\n          } else {\n            break;\n          }\n        } catch (error) {\n          console.error('[DEBUG] Error sending queued message:', error);\n          break;\n        }\n      }\n    } finally {\n      this.processingQueue = false;\n    }\n  }\n  async reconnect() {\n    if (this.isReconnecting) return;\n    this.isReconnecting = true;\n    const channelId = this.currentChannelId;\n    if (!channelId) {\n      this.isReconnecting = false;\n      return;\n    }\n    const backoffTime = Math.min(INITIAL_RECONNECT_DELAY * Math.pow(2, this.reconnectAttempts), MAX_RECONNECT_DELAY);\n    console.log(`[DEBUG] Attempting to reconnect in ${backoffTime}ms...`);\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n    this.reconnectTimeout = setTimeout(async () => {\n      try {\n        await this.connect(channelId);\n        this.isReconnecting = false;\n        this.reconnectAttempts = 0;\n\n        // Rejoin all previously joined channels\n        const channels = Array.from(this.joinedChannels);\n        for (const channel of channels) {\n          if (channel !== channelId) {\n            await this.joinChannel(channel);\n          }\n        }\n      } catch (error) {\n        console.error('[DEBUG] Reconnection failed:', error);\n        this.reconnectAttempts++;\n        this.isReconnecting = false;\n        this.reconnect();\n      }\n    }, backoffTime);\n  }\n  async sendMessage(channelId, content, parentId) {\n    var _this$socket4;\n    console.log('[DEBUG] Attempting to send message:', {\n      channelId,\n      content,\n      parentId\n    });\n\n    // Always queue the message first\n    const messageId = messageQueue.addMessage(channelId, content, parentId ? 'reply' : 'message', parentId);\n    if (!this.isConnectedToChannel(channelId)) {\n      console.log('[DEBUG] Not connected to channel, attempting to connect...');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('[DEBUG] Failed to connect:', error);\n        return; // Message is already queued, will be sent after reconnection\n      }\n    }\n\n    // Send message directly via WebSocket\n    if (((_this$socket4 = this.socket) === null || _this$socket4 === void 0 ? void 0 : _this$socket4.readyState) === WebSocket.OPEN) {\n      const message = {\n        type: 'message',\n        data: {\n          channel_id: parseInt(channelId),\n          content: content,\n          parent_id: parentId || null\n        }\n      };\n      console.log('[DEBUG] Sending message via WebSocket:', message);\n      this.socket.send(JSON.stringify(message));\n    }\n\n    // Try to process any queued messages\n    await this.processMessageQueue();\n  }\n  async joinChannel(channelId) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Cannot join channel: WebSocket is not connected');\n    }\n    if (this.isConnectedToChannel(channelId)) {\n      console.log('[DEBUG] Already joined channel:', channelId);\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      const joinMessage = {\n        type: 'join',\n        data: {\n          channel_id: parseInt(channelId)\n        }\n      };\n      const joinTimeout = setTimeout(() => {\n        var _this$socket5;\n        (_this$socket5 = this.socket) === null || _this$socket5 === void 0 ? void 0 : _this$socket5.removeEventListener('message', handleJoinResponse);\n        reject(new Error('Channel join timeout'));\n      }, 10000);\n      const handleJoinResponse = event => {\n        try {\n          var _data$data, _data$data$channel_id;\n          const data = JSON.parse(event.data);\n          console.log('[DEBUG] Received join response:', data);\n          if (data.type === 'joined' && ((_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$channel_id = _data$data.channel_id) === null || _data$data$channel_id === void 0 ? void 0 : _data$data$channel_id.toString()) === channelId) {\n            var _this$socket6;\n            clearTimeout(joinTimeout);\n            (_this$socket6 = this.socket) === null || _this$socket6 === void 0 ? void 0 : _this$socket6.removeEventListener('message', handleJoinResponse);\n            this.joinedChannels.add(channelId);\n            console.log('[DEBUG] Successfully joined channel:', channelId);\n            resolve();\n          } else if (data.type === 'error') {\n            var _this$socket7;\n            clearTimeout(joinTimeout);\n            (_this$socket7 = this.socket) === null || _this$socket7 === void 0 ? void 0 : _this$socket7.removeEventListener('message', handleJoinResponse);\n            console.error('[DEBUG] Error joining channel:', data.message);\n            reject(new Error(data.message));\n          }\n        } catch (error) {\n          console.error('[DEBUG] Error handling join response:', error);\n        }\n      };\n      if (this.socket) {\n        this.socket.addEventListener('message', handleJoinResponse);\n        console.log('[DEBUG] Sending join message:', joinMessage);\n        this.socket.send(JSON.stringify(joinMessage));\n      } else {\n        clearTimeout(joinTimeout);\n        reject(new Error('WebSocket not available'));\n      }\n    });\n  }\n  handleError(error) {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n  isConnected() {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n  isConnectedToChannel(channelId) {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onError(handler) {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n  disconnect() {\n    console.log('[DEBUG] Disconnecting WebSocket...');\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.currentChannelId = null;\n    console.log('[DEBUG] WebSocket disconnected and state cleared');\n  }\n  offMessage(handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n  offError(handler) {\n    this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n  }\n  getChatSocketState() {\n    var _this$socket8;\n    return ((_this$socket8 = this.socket) === null || _this$socket8 === void 0 ? void 0 : _this$socket8.readyState) || WebSocket.CLOSED;\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","messageQueue","INITIAL_RECONNECT_DELAY","MAX_RECONNECT_DELAY","HEARTBEAT_INTERVAL","HEARTBEAT_TIMEOUT","CONNECTION_TIMEOUT","WebSocketService","constructor","socket","messageHandlers","errorHandlers","currentChannelId","joinedChannels","Set","reconnectAttempts","reconnectTimeout","isReconnecting","connectionPromise","joinPromise","lastMessageId","processingQueue","heartbeatInterval","lastHeartbeatResponse","Date","now","connectionStartTime","handleClose","event","_this$socket","console","log","code","reason","wasConnected","readyState","WebSocket","OPEN","clear","reconnect","handleWebSocketMessage","_message$data3","message","JSON","parse","data","type","_message$data","_message$data$channel","_message$data2","_message$data2$messag","_message$data2$messag2","channelId","channel_id","toString","messageId","id","markMessageSent","error","forEach","handler","connect","isConnected","isConnectedToChannel","disconnect","token","Error","waitForConnection","onmessage","joinChannel","processMessageQueue","handleError","Promise","resolve","reject","timeout","setTimeout","onopen","clearTimeout","startHeartbeat","onerror","onclose","clearInterval","setInterval","warn","_this$socket2","send","stringify","queuedMessage","getNextMessage","_this$socket3","parseInt","content","parent_id","parentId","markMessageAttempted","backoffTime","Math","min","pow","channels","Array","from","channel","sendMessage","_this$socket4","addMessage","joinMessage","joinTimeout","_this$socket5","removeEventListener","handleJoinResponse","_data$data","_data$data$channel_id","_this$socket6","add","_this$socket7","addEventListener","has","onMessage","push","filter","h","onError","close","offMessage","offError","getChatSocketState","_this$socket8","CLOSED","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage } from '../../types';\nimport { getAuthToken } from '../api/auth';\nimport { store } from '../../store';\nimport { addMessage, setReplies } from '../../store/messages/messagesSlice';\nimport messageQueue from './messageQueue';\n\n// Constants\nconst INITIAL_RECONNECT_DELAY = 1000;\nconst MAX_RECONNECT_DELAY = 30000;\nconst HEARTBEAT_INTERVAL = 15000;\nconst HEARTBEAT_TIMEOUT = 30000;\nconst CONNECTION_TIMEOUT = 5000;\n\nclass WebSocketService {\n  private socket: WebSocket | null = null;\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\n  private errorHandlers: ((error: Error) => void)[] = [];\n  private currentChannelId: string | null = null;\n  private joinedChannels: Set<string> = new Set();\n  private reconnectAttempts = 0;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private isReconnecting = false;\n  private connectionPromise: Promise<void> | null = null;\n  private joinPromise: Promise<void> | null = null;\n  private lastMessageId: string | null = null;\n  private processingQueue = false;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private lastHeartbeatResponse: number = Date.now();\n  private connectionStartTime: number = 0;\n\n  public async connect(channelId: string): Promise<void> {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      console.log('[DEBUG] Already connected to channel:', channelId);\n      return;\n    }\n\n    // Always disconnect before connecting to ensure clean state\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    this.connectionStartTime = Date.now();\n    \n    try {\n      const token = getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      console.log('[DEBUG] Connecting to WebSocket...');\n      this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\n\n      await this.waitForConnection();\n\n      if (this.socket) {\n        this.socket.onmessage = this.handleWebSocketMessage;\n        console.log('[DEBUG] Joining channel:', channelId);\n        await this.joinChannel(channelId);\n        console.log('[DEBUG] Successfully joined channel:', channelId);\n        \n        // Process any queued messages after successful connection\n        await this.processMessageQueue();\n      }\n      \n    } catch (error) {\n      console.error('[DEBUG] WebSocket connection failed:', error);\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    }\n  }\n\n  private async waitForConnection(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('WebSocket connection timeout'));\n      }, CONNECTION_TIMEOUT);\n\n      if (this.socket) {\n        this.socket.onopen = () => {\n          console.log('[DEBUG] WebSocket connection opened');\n          clearTimeout(timeout);\n          this.startHeartbeat();\n          resolve();\n        };\n\n        this.socket.onerror = (error) => {\n          console.error('[DEBUG] WebSocket connection error:', error);\n          clearTimeout(timeout);\n          reject(error);\n        };\n\n        this.socket.onclose = this.handleClose;\n      }\n    });\n  }\n\n  private startHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n\n    this.heartbeatInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      // Check if we haven't received a heartbeat response in HEARTBEAT_TIMEOUT\n      if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_TIMEOUT) {\n        console.warn('No heartbeat response received, reconnecting...');\n        this.reconnect();\n        return;\n      }\n\n      try {\n        this.socket?.send(JSON.stringify({ type: 'ping' }));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n        this.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  private async processMessageQueue(): Promise<void> {\n    if (this.processingQueue) return;\n\n    this.processingQueue = true;\n    console.log('[DEBUG] Processing message queue...');\n\n    try {\n      while (this.isConnected()) {\n        const channelId = this.currentChannelId;\n        if (!channelId) break;\n\n        const queuedMessage = messageQueue.getNextMessage(channelId);\n        if (!queuedMessage) break;\n\n        try {\n          const message = {\n            type: 'message',\n            data: {\n              channel_id: parseInt(queuedMessage.channelId),\n              content: queuedMessage.content,\n              parent_id: queuedMessage.parentId || null\n            }\n          };\n\n          if (this.socket?.readyState === WebSocket.OPEN) {\n            messageQueue.markMessageAttempted(channelId, queuedMessage.id);\n            console.log('[DEBUG] Sending message via WebSocket:', message);\n            this.socket.send(JSON.stringify(message));\n            messageQueue.markMessageSent(channelId, queuedMessage.id);\n          } else {\n            break;\n          }\n        } catch (error) {\n          console.error('[DEBUG] Error sending queued message:', error);\n          break;\n        }\n      }\n    } finally {\n      this.processingQueue = false;\n    }\n  }\n\n  private async reconnect(): Promise<void> {\n    if (this.isReconnecting) return;\n\n    this.isReconnecting = true;\n    const channelId = this.currentChannelId;\n    \n    if (!channelId) {\n      this.isReconnecting = false;\n      return;\n    }\n\n    const backoffTime = Math.min(\n      INITIAL_RECONNECT_DELAY * Math.pow(2, this.reconnectAttempts),\n      MAX_RECONNECT_DELAY\n    );\n\n    console.log(`[DEBUG] Attempting to reconnect in ${backoffTime}ms...`);\n\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n\n    this.reconnectTimeout = setTimeout(async () => {\n      try {\n        await this.connect(channelId);\n        this.isReconnecting = false;\n        this.reconnectAttempts = 0;\n        \n        // Rejoin all previously joined channels\n        const channels = Array.from(this.joinedChannels);\n        for (const channel of channels) {\n          if (channel !== channelId) {\n            await this.joinChannel(channel);\n          }\n        }\n      } catch (error) {\n        console.error('[DEBUG] Reconnection failed:', error);\n        this.reconnectAttempts++;\n        this.isReconnecting = false;\n        this.reconnect();\n      }\n    }, backoffTime);\n  }\n\n  private handleClose = (event: CloseEvent) => {\n    console.log('[DEBUG] WebSocket closed:', event.code, event.reason);\n    \n    const wasConnected = this.socket?.readyState === WebSocket.OPEN;\n    this.socket = null;\n\n    // Don't clear joined channels on abnormal closure - we'll try to rejoin them\n    if (event.code === 1000) {\n      this.joinedChannels.clear();\n    }\n\n    if (event.code !== 1000 && wasConnected) {\n      this.reconnect();\n    }\n  };\n\n  public async sendMessage(channelId: string, content: string, parentId?: string): Promise<void> {\n    console.log('[DEBUG] Attempting to send message:', { channelId, content, parentId });\n\n    // Always queue the message first\n    const messageId = messageQueue.addMessage(channelId, content, parentId ? 'reply' : 'message', parentId);\n\n    if (!this.isConnectedToChannel(channelId)) {\n      console.log('[DEBUG] Not connected to channel, attempting to connect...');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('[DEBUG] Failed to connect:', error);\n        return; // Message is already queued, will be sent after reconnection\n      }\n    }\n\n    // Send message directly via WebSocket\n    if (this.socket?.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'message',\n        data: {\n          channel_id: parseInt(channelId),\n          content: content,\n          parent_id: parentId || null\n        }\n      };\n\n      console.log('[DEBUG] Sending message via WebSocket:', message);\n      this.socket.send(JSON.stringify(message));\n    }\n\n    // Try to process any queued messages\n    await this.processMessageQueue();\n  }\n\n  public async joinChannel(channelId: string): Promise<void> {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Cannot join channel: WebSocket is not connected');\n    }\n\n    if (this.isConnectedToChannel(channelId)) {\n      console.log('[DEBUG] Already joined channel:', channelId);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      const joinMessage = {\n        type: 'join',\n        data: {\n          channel_id: parseInt(channelId)\n        }\n      };\n      \n      const joinTimeout = setTimeout(() => {\n        this.socket?.removeEventListener('message', handleJoinResponse);\n        reject(new Error('Channel join timeout'));\n      }, 10000);\n      \n      const handleJoinResponse = (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('[DEBUG] Received join response:', data);\n          \n          if (data.type === 'joined' && data.data?.channel_id?.toString() === channelId) {\n            clearTimeout(joinTimeout);\n            this.socket?.removeEventListener('message', handleJoinResponse);\n            this.joinedChannels.add(channelId);\n            console.log('[DEBUG] Successfully joined channel:', channelId);\n            resolve();\n          } else if (data.type === 'error') {\n            clearTimeout(joinTimeout);\n            this.socket?.removeEventListener('message', handleJoinResponse);\n            console.error('[DEBUG] Error joining channel:', data.message);\n            reject(new Error(data.message));\n          }\n        } catch (error) {\n          console.error('[DEBUG] Error handling join response:', error);\n        }\n      };\n\n      if (this.socket) {\n        this.socket.addEventListener('message', handleJoinResponse);\n        console.log('[DEBUG] Sending join message:', joinMessage);\n        this.socket.send(JSON.stringify(joinMessage));\n      } else {\n        clearTimeout(joinTimeout);\n        reject(new Error('WebSocket not available'));\n      }\n    });\n  }\n\n  private handleError(error: Error): void {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n\n  public isConnected(): boolean {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n\n  private isConnectedToChannel(channelId: string): boolean {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n\n  public onMessage(handler: (message: WebSocketMessage) => void): () => void {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n\n  public onError(handler: (error: Error) => void): () => void {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n\n  public disconnect(): void {\n    console.log('[DEBUG] Disconnecting WebSocket...');\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.currentChannelId = null;\n    console.log('[DEBUG] WebSocket disconnected and state cleared');\n  }\n\n  private handleWebSocketMessage = (event: MessageEvent) => {\n    try {\n      const message = JSON.parse(event.data) as WebSocketMessage;\n      console.log('[DEBUG] WebSocket received message:', message);\n      \n      // Update heartbeat timestamp for any message\n      this.lastHeartbeatResponse = Date.now();\n\n      if (message.type === 'pong') {\n        return;\n      }\n\n      // Handle message acknowledgments\n      if (message.type === 'message_sent') {\n        const channelId = message.data?.channel_id?.toString();\n        const messageId = message.data?.message?.id?.toString();\n        \n        if (channelId && messageId) {\n          console.log('[DEBUG] Marking message as sent:', messageId);\n          messageQueue.markMessageSent(channelId, messageId);\n        }\n      } else if (message.type === 'error' && message.data?.error) {\n        // Handle error messages that might be related to message sending\n        console.error('[DEBUG] Message send error:', message.data.error);\n        // The message will be retried by the queue system\n      }\n\n      // Broadcast message to all handlers\n      this.messageHandlers.forEach(handler => {\n        try {\n          handler(message);\n        } catch (error) {\n          console.error('[DEBUG] Error in message handler:', error);\n        }\n      });\n    } catch (error) {\n      console.error('[DEBUG] Error handling WebSocket message:', error);\n    }\n  };\n\n  public offMessage(handler: (message: WebSocketMessage) => void): void {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n\n  public offError(handler: (error: Error) => void): void {\n    this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n  }\n\n  public getChatSocketState(): number {\n    return this.socket?.readyState || WebSocket.CLOSED;\n  }\n}\n\nconst wsService = new WebSocketService();\nexport default wsService; "],"mappings":"AACA,SAASA,YAAY,QAAQ,aAAa;AAG1C,OAAOC,YAAY,MAAM,gBAAgB;;AAEzC;AACA,MAAMC,uBAAuB,GAAG,IAAI;AACpC,MAAMC,mBAAmB,GAAG,KAAK;AACjC,MAAMC,kBAAkB,GAAG,KAAK;AAChC,MAAMC,iBAAiB,GAAG,KAAK;AAC/B,MAAMC,kBAAkB,GAAG,IAAI;AAE/B,MAAMC,gBAAgB,CAAC;EAAAC,YAAA;IAAA,KACbC,MAAM,GAAqB,IAAI;IAAA,KAC/BC,eAAe,GAA4C,EAAE;IAAA,KAC7DC,aAAa,GAA+B,EAAE;IAAA,KAC9CC,gBAAgB,GAAkB,IAAI;IAAA,KACtCC,cAAc,GAAgB,IAAIC,GAAG,CAAC,CAAC;IAAA,KACvCC,iBAAiB,GAAG,CAAC;IAAA,KACrBC,gBAAgB,GAA0B,IAAI;IAAA,KAC9CC,cAAc,GAAG,KAAK;IAAA,KACtBC,iBAAiB,GAAyB,IAAI;IAAA,KAC9CC,WAAW,GAAyB,IAAI;IAAA,KACxCC,aAAa,GAAkB,IAAI;IAAA,KACnCC,eAAe,GAAG,KAAK;IAAA,KACvBC,iBAAiB,GAA0B,IAAI;IAAA,KAC/CC,qBAAqB,GAAWC,IAAI,CAACC,GAAG,CAAC,CAAC;IAAA,KAC1CC,mBAAmB,GAAW,CAAC;IAAA,KAoL/BC,WAAW,GAAIC,KAAiB,IAAK;MAAA,IAAAC,YAAA;MAC3CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,KAAK,CAACI,IAAI,EAAEJ,KAAK,CAACK,MAAM,CAAC;MAElE,MAAMC,YAAY,GAAG,EAAAL,YAAA,OAAI,CAACpB,MAAM,cAAAoB,YAAA,uBAAXA,YAAA,CAAaM,UAAU,MAAKC,SAAS,CAACC,IAAI;MAC/D,IAAI,CAAC5B,MAAM,GAAG,IAAI;;MAElB;MACA,IAAImB,KAAK,CAACI,IAAI,KAAK,IAAI,EAAE;QACvB,IAAI,CAACnB,cAAc,CAACyB,KAAK,CAAC,CAAC;MAC7B;MAEA,IAAIV,KAAK,CAACI,IAAI,KAAK,IAAI,IAAIE,YAAY,EAAE;QACvC,IAAI,CAACK,SAAS,CAAC,CAAC;MAClB;IACF,CAAC;IAAA,KAiJOC,sBAAsB,GAAIZ,KAAmB,IAAK;MACxD,IAAI;QAAA,IAAAa,cAAA;QACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAChB,KAAK,CAACiB,IAAI,CAAqB;QAC1Df,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEW,OAAO,CAAC;;QAE3D;QACA,IAAI,CAACnB,qBAAqB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;QAEvC,IAAIiB,OAAO,CAACI,IAAI,KAAK,MAAM,EAAE;UAC3B;QACF;;QAEA;QACA,IAAIJ,OAAO,CAACI,IAAI,KAAK,cAAc,EAAE;UAAA,IAAAC,aAAA,EAAAC,qBAAA,EAAAC,cAAA,EAAAC,qBAAA,EAAAC,sBAAA;UACnC,MAAMC,SAAS,IAAAL,aAAA,GAAGL,OAAO,CAACG,IAAI,cAAAE,aAAA,wBAAAC,qBAAA,GAAZD,aAAA,CAAcM,UAAU,cAAAL,qBAAA,uBAAxBA,qBAAA,CAA0BM,QAAQ,CAAC,CAAC;UACtD,MAAMC,SAAS,IAAAN,cAAA,GAAGP,OAAO,CAACG,IAAI,cAAAI,cAAA,wBAAAC,qBAAA,GAAZD,cAAA,CAAcP,OAAO,cAAAQ,qBAAA,wBAAAC,sBAAA,GAArBD,qBAAA,CAAuBM,EAAE,cAAAL,sBAAA,uBAAzBA,sBAAA,CAA2BG,QAAQ,CAAC,CAAC;UAEvD,IAAIF,SAAS,IAAIG,SAAS,EAAE;YAC1BzB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEwB,SAAS,CAAC;YAC1DtD,YAAY,CAACwD,eAAe,CAACL,SAAS,EAAEG,SAAS,CAAC;UACpD;QACF,CAAC,MAAM,IAAIb,OAAO,CAACI,IAAI,KAAK,OAAO,KAAAL,cAAA,GAAIC,OAAO,CAACG,IAAI,cAAAJ,cAAA,eAAZA,cAAA,CAAciB,KAAK,EAAE;UAC1D;UACA5B,OAAO,CAAC4B,KAAK,CAAC,6BAA6B,EAAEhB,OAAO,CAACG,IAAI,CAACa,KAAK,CAAC;UAChE;QACF;;QAEA;QACA,IAAI,CAAChD,eAAe,CAACiD,OAAO,CAACC,OAAO,IAAI;UACtC,IAAI;YACFA,OAAO,CAAClB,OAAO,CAAC;UAClB,CAAC,CAAC,OAAOgB,KAAK,EAAE;YACd5B,OAAO,CAAC4B,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UAC3D;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACd5B,OAAO,CAAC4B,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE;IACF,CAAC;EAAA;EAvXD,MAAaG,OAAOA,CAACT,SAAiB,EAAiB;IACrD,IAAI,IAAI,CAACU,WAAW,CAAC,CAAC,IAAI,IAAI,CAACC,oBAAoB,CAACX,SAAS,CAAC,EAAE;MAC9DtB,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEqB,SAAS,CAAC;MAC/D;IACF;;IAEA;IACA,IAAI,CAACY,UAAU,CAAC,CAAC;IACjB,IAAI,CAACpD,gBAAgB,GAAGwC,SAAS;IACjC,IAAI,CAACnC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACF,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACW,mBAAmB,GAAGF,IAAI,CAACC,GAAG,CAAC,CAAC;IAErC,IAAI;MACF,MAAMwC,KAAK,GAAGjE,YAAY,CAAC,CAAC;MAC5B,IAAI,CAACiE,KAAK,EAAE;QACV,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEApC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD,IAAI,CAACtB,MAAM,GAAG,IAAI2B,SAAS,CAAC,qCAAqC6B,KAAK,EAAE,CAAC;MAEzE,MAAM,IAAI,CAACE,iBAAiB,CAAC,CAAC;MAE9B,IAAI,IAAI,CAAC1D,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAAC2D,SAAS,GAAG,IAAI,CAAC5B,sBAAsB;QACnDV,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEqB,SAAS,CAAC;QAClD,MAAM,IAAI,CAACiB,WAAW,CAACjB,SAAS,CAAC;QACjCtB,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEqB,SAAS,CAAC;;QAE9D;QACA,MAAM,IAAI,CAACkB,mBAAmB,CAAC,CAAC;MAClC;IAEF,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACd5B,OAAO,CAAC4B,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,IAAI,CAACa,WAAW,CAACb,KAAK,YAAYQ,KAAK,GAAGR,KAAK,GAAG,IAAIQ,KAAK,CAAC,6BAA6B,CAAC,CAAC;MAC3F,MAAMR,KAAK;IACb;EACF;EAEA,MAAcS,iBAAiBA,CAAA,EAAkB;IAC/C,OAAO,IAAIK,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAK;MAC5C,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/BF,MAAM,CAAC,IAAIR,KAAK,CAAC,8BAA8B,CAAC,CAAC;MACnD,CAAC,EAAE5D,kBAAkB,CAAC;MAEtB,IAAI,IAAI,CAACG,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAACoE,MAAM,GAAG,MAAM;UACzB/C,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;UAClD+C,YAAY,CAACH,OAAO,CAAC;UACrB,IAAI,CAACI,cAAc,CAAC,CAAC;UACrBN,OAAO,CAAC,CAAC;QACX,CAAC;QAED,IAAI,CAAChE,MAAM,CAACuE,OAAO,GAAItB,KAAK,IAAK;UAC/B5B,OAAO,CAAC4B,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;UAC3DoB,YAAY,CAACH,OAAO,CAAC;UACrBD,MAAM,CAAChB,KAAK,CAAC;QACf,CAAC;QAED,IAAI,CAACjD,MAAM,CAACwE,OAAO,GAAG,IAAI,CAACtD,WAAW;MACxC;IACF,CAAC,CAAC;EACJ;EAEQoD,cAAcA,CAAA,EAAS;IAC7B,IAAI,IAAI,CAACzD,iBAAiB,EAAE;MAC1B4D,aAAa,CAAC,IAAI,CAAC5D,iBAAiB,CAAC;IACvC;IAEA,IAAI,CAACA,iBAAiB,GAAG6D,WAAW,CAAC,MAAM;MACzC,IAAI,CAAC,IAAI,CAACrB,WAAW,CAAC,CAAC,EAAE;QACvB;MACF;;MAEA;MACA,IAAItC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACF,qBAAqB,GAAGlB,iBAAiB,EAAE;QAC/DyB,OAAO,CAACsD,IAAI,CAAC,iDAAiD,CAAC;QAC/D,IAAI,CAAC7C,SAAS,CAAC,CAAC;QAChB;MACF;MAEA,IAAI;QAAA,IAAA8C,aAAA;QACF,CAAAA,aAAA,OAAI,CAAC5E,MAAM,cAAA4E,aAAA,uBAAXA,aAAA,CAAaC,IAAI,CAAC3C,IAAI,CAAC4C,SAAS,CAAC;UAAEzC,IAAI,EAAE;QAAO,CAAC,CAAC,CAAC;MACrD,CAAC,CAAC,OAAOY,KAAK,EAAE;QACd5B,OAAO,CAAC4B,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACnB,SAAS,CAAC,CAAC;MAClB;IACF,CAAC,EAAEnC,kBAAkB,CAAC;EACxB;EAEA,MAAckE,mBAAmBA,CAAA,EAAkB;IACjD,IAAI,IAAI,CAACjD,eAAe,EAAE;IAE1B,IAAI,CAACA,eAAe,GAAG,IAAI;IAC3BS,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAElD,IAAI;MACF,OAAO,IAAI,CAAC+B,WAAW,CAAC,CAAC,EAAE;QACzB,MAAMV,SAAS,GAAG,IAAI,CAACxC,gBAAgB;QACvC,IAAI,CAACwC,SAAS,EAAE;QAEhB,MAAMoC,aAAa,GAAGvF,YAAY,CAACwF,cAAc,CAACrC,SAAS,CAAC;QAC5D,IAAI,CAACoC,aAAa,EAAE;QAEpB,IAAI;UAAA,IAAAE,aAAA;UACF,MAAMhD,OAAO,GAAG;YACdI,IAAI,EAAE,SAAS;YACfD,IAAI,EAAE;cACJQ,UAAU,EAAEsC,QAAQ,CAACH,aAAa,CAACpC,SAAS,CAAC;cAC7CwC,OAAO,EAAEJ,aAAa,CAACI,OAAO;cAC9BC,SAAS,EAAEL,aAAa,CAACM,QAAQ,IAAI;YACvC;UACF,CAAC;UAED,IAAI,EAAAJ,aAAA,OAAI,CAACjF,MAAM,cAAAiF,aAAA,uBAAXA,aAAA,CAAavD,UAAU,MAAKC,SAAS,CAACC,IAAI,EAAE;YAC9CpC,YAAY,CAAC8F,oBAAoB,CAAC3C,SAAS,EAAEoC,aAAa,CAAChC,EAAE,CAAC;YAC9D1B,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEW,OAAO,CAAC;YAC9D,IAAI,CAACjC,MAAM,CAAC6E,IAAI,CAAC3C,IAAI,CAAC4C,SAAS,CAAC7C,OAAO,CAAC,CAAC;YACzCzC,YAAY,CAACwD,eAAe,CAACL,SAAS,EAAEoC,aAAa,CAAChC,EAAE,CAAC;UAC3D,CAAC,MAAM;YACL;UACF;QACF,CAAC,CAAC,OAAOE,KAAK,EAAE;UACd5B,OAAO,CAAC4B,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;UAC7D;QACF;MACF;IACF,CAAC,SAAS;MACR,IAAI,CAACrC,eAAe,GAAG,KAAK;IAC9B;EACF;EAEA,MAAckB,SAASA,CAAA,EAAkB;IACvC,IAAI,IAAI,CAACtB,cAAc,EAAE;IAEzB,IAAI,CAACA,cAAc,GAAG,IAAI;IAC1B,MAAMmC,SAAS,GAAG,IAAI,CAACxC,gBAAgB;IAEvC,IAAI,CAACwC,SAAS,EAAE;MACd,IAAI,CAACnC,cAAc,GAAG,KAAK;MAC3B;IACF;IAEA,MAAM+E,WAAW,GAAGC,IAAI,CAACC,GAAG,CAC1BhG,uBAAuB,GAAG+F,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,IAAI,CAACpF,iBAAiB,CAAC,EAC7DZ,mBACF,CAAC;IAED2B,OAAO,CAACC,GAAG,CAAC,sCAAsCiE,WAAW,OAAO,CAAC;IAErE,IAAI,IAAI,CAAChF,gBAAgB,EAAE;MACzB8D,YAAY,CAAC,IAAI,CAAC9D,gBAAgB,CAAC;IACrC;IAEA,IAAI,CAACA,gBAAgB,GAAG4D,UAAU,CAAC,YAAY;MAC7C,IAAI;QACF,MAAM,IAAI,CAACf,OAAO,CAACT,SAAS,CAAC;QAC7B,IAAI,CAACnC,cAAc,GAAG,KAAK;QAC3B,IAAI,CAACF,iBAAiB,GAAG,CAAC;;QAE1B;QACA,MAAMqF,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACzF,cAAc,CAAC;QAChD,KAAK,MAAM0F,OAAO,IAAIH,QAAQ,EAAE;UAC9B,IAAIG,OAAO,KAAKnD,SAAS,EAAE;YACzB,MAAM,IAAI,CAACiB,WAAW,CAACkC,OAAO,CAAC;UACjC;QACF;MACF,CAAC,CAAC,OAAO7C,KAAK,EAAE;QACd5B,OAAO,CAAC4B,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,IAAI,CAAC3C,iBAAiB,EAAE;QACxB,IAAI,CAACE,cAAc,GAAG,KAAK;QAC3B,IAAI,CAACsB,SAAS,CAAC,CAAC;MAClB;IACF,CAAC,EAAEyD,WAAW,CAAC;EACjB;EAkBA,MAAaQ,WAAWA,CAACpD,SAAiB,EAAEwC,OAAe,EAAEE,QAAiB,EAAiB;IAAA,IAAAW,aAAA;IAC7F3E,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAE;MAAEqB,SAAS;MAAEwC,OAAO;MAAEE;IAAS,CAAC,CAAC;;IAEpF;IACA,MAAMvC,SAAS,GAAGtD,YAAY,CAACyG,UAAU,CAACtD,SAAS,EAAEwC,OAAO,EAAEE,QAAQ,GAAG,OAAO,GAAG,SAAS,EAAEA,QAAQ,CAAC;IAEvG,IAAI,CAAC,IAAI,CAAC/B,oBAAoB,CAACX,SAAS,CAAC,EAAE;MACzCtB,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;MACzE,IAAI;QACF,MAAM,IAAI,CAAC8B,OAAO,CAACT,SAAS,CAAC;MAC/B,CAAC,CAAC,OAAOM,KAAK,EAAE;QACd5B,OAAO,CAAC4B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,OAAO,CAAC;MACV;IACF;;IAEA;IACA,IAAI,EAAA+C,aAAA,OAAI,CAAChG,MAAM,cAAAgG,aAAA,uBAAXA,aAAA,CAAatE,UAAU,MAAKC,SAAS,CAACC,IAAI,EAAE;MAC9C,MAAMK,OAAO,GAAG;QACdI,IAAI,EAAE,SAAS;QACfD,IAAI,EAAE;UACJQ,UAAU,EAAEsC,QAAQ,CAACvC,SAAS,CAAC;UAC/BwC,OAAO,EAAEA,OAAO;UAChBC,SAAS,EAAEC,QAAQ,IAAI;QACzB;MACF,CAAC;MAEDhE,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEW,OAAO,CAAC;MAC9D,IAAI,CAACjC,MAAM,CAAC6E,IAAI,CAAC3C,IAAI,CAAC4C,SAAS,CAAC7C,OAAO,CAAC,CAAC;IAC3C;;IAEA;IACA,MAAM,IAAI,CAAC4B,mBAAmB,CAAC,CAAC;EAClC;EAEA,MAAaD,WAAWA,CAACjB,SAAiB,EAAiB;IACzD,IAAI,CAAC,IAAI,CAAC3C,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC0B,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC7D,MAAM,IAAI6B,KAAK,CAAC,iDAAiD,CAAC;IACpE;IAEA,IAAI,IAAI,CAACH,oBAAoB,CAACX,SAAS,CAAC,EAAE;MACxCtB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEqB,SAAS,CAAC;MACzD;IACF;IAEA,OAAO,IAAIoB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMiC,WAAW,GAAG;QAClB7D,IAAI,EAAE,MAAM;QACZD,IAAI,EAAE;UACJQ,UAAU,EAAEsC,QAAQ,CAACvC,SAAS;QAChC;MACF,CAAC;MAED,MAAMwD,WAAW,GAAGhC,UAAU,CAAC,MAAM;QAAA,IAAAiC,aAAA;QACnC,CAAAA,aAAA,OAAI,CAACpG,MAAM,cAAAoG,aAAA,uBAAXA,aAAA,CAAaC,mBAAmB,CAAC,SAAS,EAAEC,kBAAkB,CAAC;QAC/DrC,MAAM,CAAC,IAAIR,KAAK,CAAC,sBAAsB,CAAC,CAAC;MAC3C,CAAC,EAAE,KAAK,CAAC;MAET,MAAM6C,kBAAkB,GAAInF,KAAmB,IAAK;QAClD,IAAI;UAAA,IAAAoF,UAAA,EAAAC,qBAAA;UACF,MAAMpE,IAAI,GAAGF,IAAI,CAACC,KAAK,CAAChB,KAAK,CAACiB,IAAI,CAAC;UACnCf,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEc,IAAI,CAAC;UAEpD,IAAIA,IAAI,CAACC,IAAI,KAAK,QAAQ,IAAI,EAAAkE,UAAA,GAAAnE,IAAI,CAACA,IAAI,cAAAmE,UAAA,wBAAAC,qBAAA,GAATD,UAAA,CAAW3D,UAAU,cAAA4D,qBAAA,uBAArBA,qBAAA,CAAuB3D,QAAQ,CAAC,CAAC,MAAKF,SAAS,EAAE;YAAA,IAAA8D,aAAA;YAC7EpC,YAAY,CAAC8B,WAAW,CAAC;YACzB,CAAAM,aAAA,OAAI,CAACzG,MAAM,cAAAyG,aAAA,uBAAXA,aAAA,CAAaJ,mBAAmB,CAAC,SAAS,EAAEC,kBAAkB,CAAC;YAC/D,IAAI,CAAClG,cAAc,CAACsG,GAAG,CAAC/D,SAAS,CAAC;YAClCtB,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEqB,SAAS,CAAC;YAC9DqB,OAAO,CAAC,CAAC;UACX,CAAC,MAAM,IAAI5B,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;YAAA,IAAAsE,aAAA;YAChCtC,YAAY,CAAC8B,WAAW,CAAC;YACzB,CAAAQ,aAAA,OAAI,CAAC3G,MAAM,cAAA2G,aAAA,uBAAXA,aAAA,CAAaN,mBAAmB,CAAC,SAAS,EAAEC,kBAAkB,CAAC;YAC/DjF,OAAO,CAAC4B,KAAK,CAAC,gCAAgC,EAAEb,IAAI,CAACH,OAAO,CAAC;YAC7DgC,MAAM,CAAC,IAAIR,KAAK,CAACrB,IAAI,CAACH,OAAO,CAAC,CAAC;UACjC;QACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;UACd5B,OAAO,CAAC4B,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QAC/D;MACF,CAAC;MAED,IAAI,IAAI,CAACjD,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAAC4G,gBAAgB,CAAC,SAAS,EAAEN,kBAAkB,CAAC;QAC3DjF,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE4E,WAAW,CAAC;QACzD,IAAI,CAAClG,MAAM,CAAC6E,IAAI,CAAC3C,IAAI,CAAC4C,SAAS,CAACoB,WAAW,CAAC,CAAC;MAC/C,CAAC,MAAM;QACL7B,YAAY,CAAC8B,WAAW,CAAC;QACzBlC,MAAM,CAAC,IAAIR,KAAK,CAAC,yBAAyB,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC;EACJ;EAEQK,WAAWA,CAACb,KAAY,EAAQ;IACtC5B,OAAO,CAAC4B,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,IAAI,CAAC/C,aAAa,CAACgD,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACF,KAAK,CAAC,CAAC;EACvD;EAEOI,WAAWA,CAAA,EAAY;IAC5B,OAAO,IAAI,CAACrD,MAAM,KAAK,IAAI,IAAI,IAAI,CAACA,MAAM,CAAC0B,UAAU,KAAKC,SAAS,CAACC,IAAI;EAC1E;EAEQ0B,oBAAoBA,CAACX,SAAiB,EAAW;IACvD,OAAO,IAAI,CAACU,WAAW,CAAC,CAAC,IAAI,IAAI,CAACjD,cAAc,CAACyG,GAAG,CAAClE,SAAS,CAAC,IAAI,IAAI,CAACxC,gBAAgB,KAAKwC,SAAS;EACxG;EAEOmE,SAASA,CAAC3D,OAA4C,EAAc;IACzE,IAAI,CAAClD,eAAe,CAAC8G,IAAI,CAAC5D,OAAO,CAAC;IAClC,OAAO,MAAM;MACX,IAAI,CAAClD,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC+G,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAK9D,OAAO,CAAC;IACxE,CAAC;EACH;EAEO+D,OAAOA,CAAC/D,OAA+B,EAAc;IAC1D,IAAI,CAACjD,aAAa,CAAC6G,IAAI,CAAC5D,OAAO,CAAC;IAChC,OAAO,MAAM;MACX,IAAI,CAACjD,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC8G,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAK9D,OAAO,CAAC;IACpE,CAAC;EACH;EAEOI,UAAUA,CAAA,EAAS;IACxBlC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjD,IAAI,CAACd,cAAc,GAAG,KAAK;IAC3B,IAAI,IAAI,CAACD,gBAAgB,EAAE;MACzB8D,YAAY,CAAC,IAAI,CAAC9D,gBAAgB,CAAC;MACnC,IAAI,CAACA,gBAAgB,GAAG,IAAI;IAC9B;IACA,IAAI,IAAI,CAACM,iBAAiB,EAAE;MAC1B4D,aAAa,CAAC,IAAI,CAAC5D,iBAAiB,CAAC;MACrC,IAAI,CAACA,iBAAiB,GAAG,IAAI;IAC/B;IACA,IAAI,IAAI,CAACb,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC0B,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC5D,IAAI,CAAC5B,MAAM,CAACmH,KAAK,CAAC,IAAI,CAAC;IACzB;IACA,IAAI,CAACnH,MAAM,GAAG,IAAI;IAClB,IAAI,CAACI,cAAc,CAACyB,KAAK,CAAC,CAAC;IAC3B,IAAI,CAAC5B,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACI,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACG,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACP,gBAAgB,GAAG,IAAI;IAC5BkB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;EACjE;EA0CO8F,UAAUA,CAACjE,OAA4C,EAAQ;IACpE,IAAI,CAAClD,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC+G,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAK9D,OAAO,CAAC;EACxE;EAEOkE,QAAQA,CAAClE,OAA+B,EAAQ;IACrD,IAAI,CAACjD,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC8G,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAK9D,OAAO,CAAC;EACpE;EAEOmE,kBAAkBA,CAAA,EAAW;IAAA,IAAAC,aAAA;IAClC,OAAO,EAAAA,aAAA,OAAI,CAACvH,MAAM,cAAAuH,aAAA,uBAAXA,aAAA,CAAa7F,UAAU,KAAIC,SAAS,CAAC6F,MAAM;EACpD;AACF;AAEA,MAAMC,SAAS,GAAG,IAAI3H,gBAAgB,CAAC,CAAC;AACxC,eAAe2H,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}