{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      console.log('Setting messages for channel:', channelId, messages);\n\n      // First, separate replies from main messages\n      const mainMessages = [];\n      const repliesByParentId = {};\n      messages.forEach(message => {\n        if (message.parentId) {\n          // This is a reply\n          if (!repliesByParentId[message.parentId]) {\n            repliesByParentId[message.parentId] = [];\n          }\n          repliesByParentId[message.parentId].push({\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: 0,\n            isExpanded: false,\n            repliesLoaded: false\n          });\n        } else {\n          // This is a main message\n          mainMessages.push({\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: message.replyCount || 0,\n            isExpanded: false,\n            repliesLoaded: false,\n            replies: []\n          });\n        }\n      });\n\n      // Now attach replies to their parent messages\n      mainMessages.forEach(message => {\n        if (repliesByParentId[message.id]) {\n          message.replies = repliesByParentId[message.id];\n          message.replyCount = repliesByParentId[message.id].length;\n        }\n      });\n      state.messagesByChannel[channelId] = mainMessages;\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId,\n        message\n      } = action.payload;\n      console.log('Adding message:', {\n        channelId,\n        message\n      });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n\n      // If this is a reply, update the parent message's reply count and replies array\n      if (message.parentId) {\n        const parentIndex = state.messagesByChannel[channelId].findIndex(m => m.id === message.parentId);\n        if (parentIndex !== -1) {\n          const parent = state.messagesByChannel[channelId][parentIndex];\n          parent.replyCount = (parent.replyCount || 0) + 1;\n          parent.replies = [...(parent.replies || []), {\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: 0,\n            isExpanded: false,\n            repliesLoaded: false\n          }];\n          // Update the parent message\n          state.messagesByChannel[channelId][parentIndex] = {\n            ...parent\n          };\n        }\n      }\n\n      // Add the message to the main array only if it's not a reply\n      if (!message.parentId) {\n        state.messagesByChannel[channelId].push({\n          ...message,\n          reactions: message.reactions || [],\n          attachments: message.attachments || [],\n          replyCount: message.replyCount || 0,\n          isExpanded: false,\n          repliesLoaded: false,\n          replies: message.replies || []\n        });\n      }\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    prependMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      console.log('Prepending messages:', {\n        channelId,\n        messages\n      });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].unshift(...messages.map(message => ({\n        ...message,\n        reactions: message.reactions || [],\n        attachments: message.attachments || [],\n        replyCount: message.replyCount || 0,\n        isExpanded: false,\n        repliesLoaded: false\n      })));\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    updateMessage: (state, action) => {\n      var _state$messagesByChan;\n      const {\n        channelId,\n        messageId,\n        message\n      } = action.payload;\n      console.log('Updating message:', {\n        channelId,\n        messageId,\n        message\n      });\n      const messageIndex = (_state$messagesByChan = state.messagesByChannel[channelId]) === null || _state$messagesByChan === void 0 ? void 0 : _state$messagesByChan.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex] = {\n          ...state.messagesByChannel[channelId][messageIndex],\n          ...message,\n          reactions: message.reactions || state.messagesByChannel[channelId][messageIndex].reactions || [],\n          attachments: message.attachments || state.messagesByChannel[channelId][messageIndex].attachments || []\n        };\n        console.log('Updated message:', state.messagesByChannel[channelId][messageIndex]);\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      if (state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = state.messagesByChannel[channelId].filter(message => message.id !== messageId);\n      }\n    },\n    toggleReplies: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      console.log('toggleReplies reducer:', {\n        channelId,\n        messageId\n      });\n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n      console.log('Current message state:', messages[messageIndex]);\n\n      // Toggle the isExpanded state\n      messages[messageIndex] = {\n        ...messages[messageIndex],\n        isExpanded: !messages[messageIndex].isExpanded\n      };\n\n      // Force a state update by creating a new array reference\n      state.messagesByChannel[channelId] = [...messages];\n      console.log('Updated message state:', messages[messageIndex]);\n    },\n    addReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reaction\n      } = action.payload;\n      console.log('Adding reaction:', {\n        channelId,\n        messageId,\n        reaction\n      });\n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        message.reactions = [];\n      }\n      const existingIndex = message.reactions.findIndex(r => r.userId === reaction.userId && r.emoji === reaction.emoji);\n      console.log('Existing reaction index:', existingIndex);\n      if (existingIndex === -1) {\n        message.reactions = [...message.reactions, reaction];\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Added reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('Reaction already exists, skipping');\n      }\n    },\n    removeReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        userId,\n        emoji\n      } = action.payload;\n      console.log('Removing reaction:', {\n        channelId,\n        messageId,\n        userId,\n        emoji\n      });\n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        console.warn('Message has no reactions:', messageId);\n        return;\n      }\n      const initialLength = message.reactions.length;\n      message.reactions = message.reactions.filter(r => !(r.userId === userId && r.emoji === emoji));\n      if (message.reactions.length !== initialLength) {\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Removed reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('No reaction was removed');\n      }\n    }\n  }\n});\nexport const {\n  setMessages,\n  addMessage,\n  prependMessages,\n  updateMessage,\n  deleteMessage,\n  toggleReplies,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","setMessages","state","action","channelId","messages","payload","console","log","mainMessages","repliesByParentId","forEach","message","parentId","push","reactions","attachments","replyCount","isExpanded","repliesLoaded","replies","id","length","addMessage","parentIndex","findIndex","m","parent","prependMessages","unshift","map","updateMessage","_state$messagesByChan","messageId","messageIndex","undefined","deleteMessage","filter","toggleReplies","warn","addReaction","reaction","existingIndex","r","userId","emoji","removeReaction","initialLength","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { StoreMessage, Reaction } from '../../types';\n\ninterface MessagesState {\n  messagesByChannel: {\n    [channelId: string]: StoreMessage[];\n  };\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: MessagesState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      console.log('Setting messages for channel:', channelId, messages);\n      \n      // First, separate replies from main messages\n      const mainMessages: StoreMessage[] = [];\n      const repliesByParentId: { [key: string]: StoreMessage[] } = {};\n\n      messages.forEach(message => {\n        if (message.parentId) {\n          // This is a reply\n          if (!repliesByParentId[message.parentId]) {\n            repliesByParentId[message.parentId] = [];\n          }\n          repliesByParentId[message.parentId].push({\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: 0,\n            isExpanded: false,\n            repliesLoaded: false\n          });\n        } else {\n          // This is a main message\n          mainMessages.push({\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: message.replyCount || 0,\n            isExpanded: false,\n            repliesLoaded: false,\n            replies: []\n          });\n        }\n      });\n\n      // Now attach replies to their parent messages\n      mainMessages.forEach(message => {\n        if (repliesByParentId[message.id]) {\n          message.replies = repliesByParentId[message.id];\n          message.replyCount = repliesByParentId[message.id].length;\n        }\n      });\n\n      state.messagesByChannel[channelId] = mainMessages;\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    addMessage: (state, action: PayloadAction<{ channelId: string; message: StoreMessage }>) => {\n      const { channelId, message } = action.payload;\n      console.log('Adding message:', { channelId, message });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n\n      // If this is a reply, update the parent message's reply count and replies array\n      if (message.parentId) {\n        const parentIndex = state.messagesByChannel[channelId].findIndex(\n          m => m.id === message.parentId\n        );\n        if (parentIndex !== -1) {\n          const parent = state.messagesByChannel[channelId][parentIndex];\n          parent.replyCount = (parent.replyCount || 0) + 1;\n          parent.replies = [...(parent.replies || []), {\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: 0,\n            isExpanded: false,\n            repliesLoaded: false\n          }];\n          // Update the parent message\n          state.messagesByChannel[channelId][parentIndex] = { ...parent };\n        }\n      }\n\n      // Add the message to the main array only if it's not a reply\n      if (!message.parentId) {\n        state.messagesByChannel[channelId].push({\n          ...message,\n          reactions: message.reactions || [],\n          attachments: message.attachments || [],\n          replyCount: message.replyCount || 0,\n          isExpanded: false,\n          repliesLoaded: false,\n          replies: message.replies || []\n        });\n      }\n      \n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    prependMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      console.log('Prepending messages:', { channelId, messages });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].unshift(...messages.map(message => ({\n        ...message,\n        reactions: message.reactions || [],\n        attachments: message.attachments || [],\n        replyCount: message.replyCount || 0,\n        isExpanded: false,\n        repliesLoaded: false\n      })));\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    updateMessage: (state, action: PayloadAction<{ channelId: string; messageId: string; message: Partial<StoreMessage> }>) => {\n      const { channelId, messageId, message } = action.payload;\n      console.log('Updating message:', { channelId, messageId, message });\n      const messageIndex = state.messagesByChannel[channelId]?.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex] = {\n          ...state.messagesByChannel[channelId][messageIndex],\n          ...message,\n          reactions: message.reactions || state.messagesByChannel[channelId][messageIndex].reactions || [],\n          attachments: message.attachments || state.messagesByChannel[channelId][messageIndex].attachments || []\n        };\n        console.log('Updated message:', state.messagesByChannel[channelId][messageIndex]);\n      }\n    },\n    deleteMessage: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      if (state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = state.messagesByChannel[channelId].filter(message => message.id !== messageId);\n      }\n    },\n    toggleReplies: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      console.log('toggleReplies reducer:', { channelId, messageId });\n      \n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n\n      console.log('Current message state:', messages[messageIndex]);\n      \n      // Toggle the isExpanded state\n      messages[messageIndex] = {\n        ...messages[messageIndex],\n        isExpanded: !messages[messageIndex].isExpanded\n      };\n      \n      // Force a state update by creating a new array reference\n      state.messagesByChannel[channelId] = [...messages];\n      \n      console.log('Updated message state:', messages[messageIndex]);\n    },\n    addReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reaction: Reaction }>) => {\n      const { channelId, messageId, reaction } = action.payload;\n      console.log('Adding reaction:', {\n        channelId,\n        messageId,\n        reaction\n      });\n      \n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        message.reactions = [];\n      }\n      \n      const existingIndex = message.reactions.findIndex(r => \n        r.userId === reaction.userId && r.emoji === reaction.emoji\n      );\n      console.log('Existing reaction index:', existingIndex);\n      \n      if (existingIndex === -1) {\n        message.reactions = [...message.reactions, reaction];\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Added reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('Reaction already exists, skipping');\n      }\n    },\n    removeReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; userId: string; emoji: string }>) => {\n      const { channelId, messageId, userId, emoji } = action.payload;\n      console.log('Removing reaction:', {\n        channelId,\n        messageId,\n        userId,\n        emoji\n      });\n      \n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        console.warn('Message has no reactions:', messageId);\n        return;\n      }\n      \n      const initialLength = message.reactions.length;\n      message.reactions = message.reactions.filter(r => \n        !(r.userId === userId && r.emoji === emoji)\n      );\n      \n      if (message.reactions.length !== initialLength) {\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Removed reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('No reaction was removed');\n      }\n    },\n  },\n});\n\nexport const { \n  setMessages, \n  addMessage, \n  prependMessages, \n  updateMessage, \n  deleteMessage, \n  toggleReplies,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\n\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}