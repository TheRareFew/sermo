{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, setError } from '../../../store/chat/chatSlice';\nimport { setMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport WebSocketService from '../../../services/websocket';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\n// Constants\n_c15 = SearchContainer;\nconst PAGE_SIZE = 50;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n  const lastMessageTimestamp = useRef(null);\n  const pollingInterval = useRef(null);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    WebSocketService.connect();\n\n    // Cleanup on unmount\n    return () => {\n      WebSocketService.disconnect();\n    };\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]);\n\n  // Handle channel initialization and WebSocket subscription\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const initializeChannel = async () => {\n      try {\n        // Get channel users\n        const channelUsers = await getChannelUsers(activeChannelId);\n        const usersObject = channelUsers.reduce((acc, user) => ({\n          ...acc,\n          [user.id]: user\n        }), {});\n        dispatch(setUsers(usersObject));\n\n        // Get initial messages\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = transformMessagesInChunks(messages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n\n        // Join WebSocket channel\n        WebSocketService.joinChannel(activeChannelId);\n      } catch (error) {\n        console.error('Failed to initialize channel:', error);\n        dispatch(setError('Failed to initialize channel'));\n      }\n    };\n    initializeChannel();\n\n    // Cleanup: leave WebSocket channel when switching channels\n    return () => {\n      WebSocketService.leaveChannel(activeChannelId);\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort channels by type\n  const sortedChannels = useMemo(() => {\n    return [...channels].sort((a, b) => a.name.localeCompare(b.name));\n  }, [channels]);\n  const publicChannels = useMemo(() => sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message), [sortedChannels]);\n  const privateChannels = useMemo(() => sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message), [sortedChannels]);\n  const directMessages = useMemo(() => sortedChannels.filter(channel => channel.is_direct_message), [sortedChannels]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async channelId => {\n    if (channelId === activeChannelId) return;\n    try {\n      console.log('[DEBUG] Switching to channel:', channelId);\n\n      // Set the active channel\n      dispatch(setActiveChannel(channelId));\n\n      // Clear messages for the new channel\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n\n      // The rest of the initialization will be handled by the useEffect\n    } catch (error) {\n      console.error('[DEBUG] Error switching channels:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    }\n  }, [activeChannelId, dispatch]);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: false,\n            isPublic: true,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: false,\n            isPublic: false,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: true,\n            isPublic: false,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: activeChannel && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: activeChannel.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n            children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n              children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                onSearch: handleSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 19\n              }, this), isSearching && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Searching...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 35\n              }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n                results: searchResults,\n                onSelect: handleSelectMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n              onClick: () => setIsSettingsOpen(true),\n              children: \"Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n              onClick: handleLogout,\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"gjAdYk17WL4bDSbRB/0ZMxSFQC4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","setError","setMessages","transformMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","getChannels","getChannelUsers","getChannelMessages","searchAll","WebSocketService","ChannelSettings","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","PAGE_SIZE","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","lastMessageTimestamp","pollingInterval","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","channelMessages","messages","messagesByChannel","transformMessagesInChunks","map","msg","connect","disconnect","fetchInitialData","console","log","fetchedChannels","length","firstChannelId","channelUsers","usersObject","reduce","acc","user","initializeChannel","transformedMessages","channelId","joinChannel","leaveChannel","handleSearch","query","trim","undefined","results","handleSelectMessage","messageId","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","setTimeout","remove","requestAnimationFrame","handleLogout","sortedChannels","sort","a","b","name","localeCompare","publicChannels","filter","is_public","is_direct_message","privateChannels","directMessages","handleChannelSelect","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","status","onSearch","onSelect","ref","isOpen","onClose","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage\n} from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport WebSocketService from '../../../services/websocket';\nimport { \n  RootState, \n  Channel, \n  User, \n  Message, \n  SearchResult,\n  UserStatus,\n  RawMessage,\n  StoreMessage\n} from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\n// Constants\nconst PAGE_SIZE = 50;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  const lastMessageTimestamp = useRef<number | null>(null);\n  const pollingInterval = useRef<NodeJS.Timeout | null>(null);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    WebSocketService.connect();\n\n    // Cleanup on unmount\n    return () => {\n      WebSocketService.disconnect();\n    };\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]);\n\n  // Handle channel initialization and WebSocket subscription\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const initializeChannel = async () => {\n      try {\n        // Get channel users\n        const channelUsers = await getChannelUsers(activeChannelId);\n        const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n          ...acc,\n          [user.id]: user\n        }), {});\n        dispatch(setUsers(usersObject));\n\n        // Get initial messages\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = transformMessagesInChunks(messages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n\n        // Join WebSocket channel\n        WebSocketService.joinChannel(activeChannelId);\n      } catch (error) {\n        console.error('Failed to initialize channel:', error);\n        dispatch(setError('Failed to initialize channel'));\n      }\n    };\n\n    initializeChannel();\n\n    // Cleanup: leave WebSocket channel when switching channels\n    return () => {\n      WebSocketService.leaveChannel(activeChannelId);\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort channels by type\n  const sortedChannels = useMemo(() => {\n    return [...channels].sort((a, b) => a.name.localeCompare(b.name));\n  }, [channels]);\n\n  const publicChannels = useMemo(() => \n    sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  const privateChannels = useMemo(() => \n    sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  const directMessages = useMemo(() => \n    sortedChannels.filter(channel => channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async (channelId: string) => {\n    if (channelId === activeChannelId) return;\n\n    try {\n      console.log('[DEBUG] Switching to channel:', channelId);\n\n      // Set the active channel\n      dispatch(setActiveChannel(channelId));\n\n      // Clear messages for the new channel\n      dispatch(setMessages({ channelId, messages: [] }));\n\n      // The rest of the initialization will be handled by the useEffect\n    } catch (error) {\n      console.error('[DEBUG] Error switching channels:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    }\n  }, [activeChannelId, dispatch]);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton onClick={() => setIsCreateModalOpen(true)}>\n              +\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {/* Public Channels */}\n          <ChannelGroup>\n            <GroupTitle>Public</GroupTitle>\n            {publicChannels.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={false}\n                isPublic={true}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n\n          {/* Private Channels */}\n          <ChannelGroup>\n            <GroupTitle>Private</GroupTitle>\n            {privateChannels.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={false}\n                isPublic={false}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n\n          {/* Direct Messages */}\n          <ChannelGroup>\n            <GroupTitle>Direct Messages</GroupTitle>\n            {directMessages.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={true}\n                isPublic={false}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n        </ChannelList>\n\n        <UserList>\n          <h2>Users</h2>\n          {Object.values(users).map(user => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n\n      <ChatArea>\n        <ChatHeader>\n          {activeChannel && (\n            <>\n              <h1>{activeChannel.name}</h1>\n              <ChannelActions>\n                <SearchContainer>\n                  <SearchBar onSearch={handleSearch} />\n                  {isSearching && <div>Searching...</div>}\n                  {searchResults && (\n                    <SearchResults\n                      results={searchResults}\n                      onSelect={handleSelectMessage}\n                    />\n                  )}\n                </SearchContainer>\n                <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                  Settings\n                </SettingsButton>\n                <LogoutButton onClick={handleLogout}>\n                  Logout\n                </LogoutButton>\n              </ChannelActions>\n            </>\n          )}\n        </ChatHeader>\n\n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}