{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    fetchMessagesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchMessagesSuccess: (state, action) => {\n      state.messagesByChannel[action.payload.channelId] = action.payload.messages;\n      state.loading = false;\n      state.error = null;\n    },\n    fetchMessagesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId\n      } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].push(action.payload);\n    },\n    updateMessage: (state, action) => {\n      const {\n        channelId,\n        id\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex(msg => msg.id === id);\n        if (index !== -1) {\n          messages[index] = action.payload;\n        }\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter(msg => msg.id !== messageId);\n      }\n    },\n    addReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reaction\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.reactions.push(reaction);\n        }\n      }\n    },\n    removeReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reactionId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.reactions = message.reactions.filter(reaction => reaction.id !== reactionId);\n        }\n      }\n    }\n  }\n});\nexport const {\n  fetchMessagesStart,\n  fetchMessagesSuccess,\n  fetchMessagesFailure,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","fetchMessagesStart","state","fetchMessagesSuccess","action","payload","channelId","messages","fetchMessagesFailure","addMessage","push","updateMessage","id","index","findIndex","msg","deleteMessage","messageId","filter","addReaction","reaction","message","find","reactions","removeReaction","reactionId","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { MessagesState, Message, Reaction } from '../types';\r\n\r\nconst initialState: MessagesState = {\r\n  messagesByChannel: {},\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst messagesSlice = createSlice({\r\n  name: 'messages',\r\n  initialState,\r\n  reducers: {\r\n    fetchMessagesStart: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    fetchMessagesSuccess: (state, action: PayloadAction<{ channelId: string; messages: Message[] }>) => {\r\n      state.messagesByChannel[action.payload.channelId] = action.payload.messages;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    fetchMessagesFailure: (state, action: PayloadAction<string>) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      const { channelId } = action.payload;\r\n      if (!state.messagesByChannel[channelId]) {\r\n        state.messagesByChannel[channelId] = [];\r\n      }\r\n      state.messagesByChannel[channelId].push(action.payload);\r\n    },\r\n    updateMessage: (state, action: PayloadAction<Message>) => {\r\n      const { channelId, id } = action.payload;\r\n      const messages = state.messagesByChannel[channelId];\r\n      if (messages) {\r\n        const index = messages.findIndex(msg => msg.id === id);\r\n        if (index !== -1) {\r\n          messages[index] = action.payload;\r\n        }\r\n      }\r\n    },\r\n    deleteMessage: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\r\n      const { channelId, messageId } = action.payload;\r\n      const messages = state.messagesByChannel[channelId];\r\n      if (messages) {\r\n        state.messagesByChannel[channelId] = messages.filter(msg => msg.id !== messageId);\r\n      }\r\n    },\r\n    addReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reaction: Reaction }>) => {\r\n      const { channelId, messageId, reaction } = action.payload;\r\n      const messages = state.messagesByChannel[channelId];\r\n      if (messages) {\r\n        const message = messages.find(msg => msg.id === messageId);\r\n        if (message) {\r\n          message.reactions.push(reaction);\r\n        }\r\n      }\r\n    },\r\n    removeReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reactionId: string }>) => {\r\n      const { channelId, messageId, reactionId } = action.payload;\r\n      const messages = state.messagesByChannel[channelId];\r\n      if (messages) {\r\n        const message = messages.find(msg => msg.id === messageId);\r\n        if (message) {\r\n          message.reactions = message.reactions.filter(reaction => reaction.id !== reactionId);\r\n        }\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchMessagesStart,\r\n  fetchMessagesSuccess,\r\n  fetchMessagesFailure,\r\n  addMessage,\r\n  updateMessage,\r\n  deleteMessage,\r\n  addReaction,\r\n  removeReaction,\r\n} = messagesSlice.actions;\r\n\r\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}