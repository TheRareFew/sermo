{"ast":null,"code":"export const transformMessage = message => {\n  var _message$parent_id;\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content.slice(0, 50),\n    // Only log first 50 chars\n    rawReactions: message.reactions\n  });\n\n  // Process reactions with detailed logging\n  let reactions = [];\n  if (Array.isArray(message.reactions)) {\n    console.log('Raw reactions array:', JSON.stringify(message.reactions, null, 2));\n    reactions = message.reactions.map(r => {\n      var _r$id, _ref;\n      console.log('Processing reaction:', JSON.stringify(r, null, 2));\n      const reaction = {\n        id: ((_r$id = r.id) === null || _r$id === void 0 ? void 0 : _r$id.toString()) || `${message.id}_${r.user_id || r.userId}_${r.emoji}`,\n        messageId: message.id.toString(),\n        userId: ((_ref = r.user_id || r.userId) === null || _ref === void 0 ? void 0 : _ref.toString()) || '',\n        emoji: r.emoji || '',\n        createdAt: r.created_at || r.createdAt || new Date().toISOString()\n      };\n      console.log('Transformed reaction:', reaction);\n      return reaction;\n    });\n  }\n  console.log('All processed reactions:', JSON.stringify(reactions, null, 2));\n  const transformed = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: message.channel_id.toString(),\n    userId: message.sender_id.toString(),\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: (_message$parent_id = message.parent_id) === null || _message$parent_id === void 0 ? void 0 : _message$parent_id.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  };\n  console.log('Transformed message:', {\n    id: transformed.id,\n    content: transformed.content.slice(0, 50),\n    // Only log first 50 chars\n    reactions: transformed.reactions\n  });\n  return transformed;\n};","map":{"version":3,"names":["transformMessage","message","_message$parent_id","console","log","id","content","slice","rawReactions","reactions","Array","isArray","JSON","stringify","map","r","_r$id","_ref","reaction","toString","user_id","userId","emoji","messageId","createdAt","created_at","Date","toISOString","transformed","channelId","channel_id","sender_id","attachments","updatedAt","updated_at","parentId","parent_id","replyCount","reply_count","isExpanded","repliesLoaded","replies"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { Message, RawMessage, StoreMessage, Reaction, RawReaction } from '../types';\n\nexport const transformMessage = (message: RawMessage | Message): StoreMessage => {\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content.slice(0, 50), // Only log first 50 chars\n    rawReactions: message.reactions\n  });\n  \n  // Process reactions with detailed logging\n  let reactions: Reaction[] = [];\n  if (Array.isArray(message.reactions)) {\n    console.log('Raw reactions array:', JSON.stringify(message.reactions, null, 2));\n    reactions = message.reactions.map((r: RawReaction) => {\n      console.log('Processing reaction:', JSON.stringify(r, null, 2));\n      const reaction = {\n        id: r.id?.toString() || `${message.id}_${r.user_id || r.userId}_${r.emoji}`,\n        messageId: message.id.toString(),\n        userId: (r.user_id || r.userId)?.toString() || '',\n        emoji: r.emoji || '',\n        createdAt: r.created_at || r.createdAt || new Date().toISOString()\n      };\n      console.log('Transformed reaction:', reaction);\n      return reaction;\n    });\n  }\n\n  console.log('All processed reactions:', JSON.stringify(reactions, null, 2));\n  \n  const transformed: StoreMessage = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: message.channel_id.toString(),\n    userId: message.sender_id.toString(),\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: message.parent_id?.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  };\n  \n  console.log('Transformed message:', {\n    id: transformed.id,\n    content: transformed.content.slice(0, 50), // Only log first 50 chars\n    reactions: transformed.reactions\n  });\n  return transformed;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}