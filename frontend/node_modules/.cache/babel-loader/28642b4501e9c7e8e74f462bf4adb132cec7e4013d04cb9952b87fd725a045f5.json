{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    fetchMessagesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchMessagesSuccess: (state, action) => {\n      // Sort messages by createdAt in ascending order (oldest first)\n      const sortedMessages = action.payload.messages.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n      state.messagesByChannel[action.payload.channelId] = sortedMessages;\n      state.loading = false;\n      state.error = null;\n    },\n    fetchMessagesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId\n      } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      // Check if message already exists\n      const existingMessageIndex = state.messagesByChannel[channelId].findIndex(msg => msg.id === action.payload.id);\n      if (existingMessageIndex === -1) {\n        // Add new message at the end (it's the newest)\n        state.messagesByChannel[channelId].push(action.payload);\n        // Sort messages by createdAt\n        state.messagesByChannel[channelId].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n      }\n    },\n    updateMessage: (state, action) => {\n      const {\n        channelId,\n        id\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex(msg => msg.id === id);\n        if (index !== -1) {\n          messages[index] = action.payload;\n        }\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter(msg => msg.id !== messageId);\n      }\n    },\n    addReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reaction\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          // Check if reaction already exists\n          const existingReactionIndex = message.reactions.findIndex(r => r.id === reaction.id || r.emoji === reaction.emoji && r.userId === reaction.userId);\n          if (existingReactionIndex === -1) {\n            message.reactions.push(reaction);\n          }\n        }\n      }\n    },\n    removeReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reactionId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.reactions = message.reactions.filter(reaction => reaction.id !== reactionId);\n        }\n      }\n    }\n  }\n});\nexport const {\n  fetchMessagesStart,\n  fetchMessagesSuccess,\n  fetchMessagesFailure,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","fetchMessagesStart","state","fetchMessagesSuccess","action","sortedMessages","payload","messages","sort","a","b","Date","createdAt","getTime","channelId","fetchMessagesFailure","addMessage","existingMessageIndex","findIndex","msg","id","push","updateMessage","index","deleteMessage","messageId","filter","addReaction","reaction","message","find","existingReactionIndex","reactions","r","emoji","userId","removeReaction","reactionId","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MessagesState, Message, Reaction } from '../types';\n\nconst initialState: MessagesState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null,\n};\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    fetchMessagesStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchMessagesSuccess: (state, action: PayloadAction<{ channelId: string; messages: Message[] }>) => {\n      // Sort messages by createdAt in ascending order (oldest first)\n      const sortedMessages = action.payload.messages.sort((a, b) => \n        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n      );\n      state.messagesByChannel[action.payload.channelId] = sortedMessages;\n      state.loading = false;\n      state.error = null;\n    },\n    fetchMessagesFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addMessage: (state, action: PayloadAction<Message>) => {\n      const { channelId } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      // Check if message already exists\n      const existingMessageIndex = state.messagesByChannel[channelId].findIndex(\n        msg => msg.id === action.payload.id\n      );\n      if (existingMessageIndex === -1) {\n        // Add new message at the end (it's the newest)\n        state.messagesByChannel[channelId].push(action.payload);\n        // Sort messages by createdAt\n        state.messagesByChannel[channelId].sort((a, b) => \n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n        );\n      }\n    },\n    updateMessage: (state, action: PayloadAction<Message>) => {\n      const { channelId, id } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex(msg => msg.id === id);\n        if (index !== -1) {\n          messages[index] = action.payload;\n        }\n      }\n    },\n    deleteMessage: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter(msg => msg.id !== messageId);\n      }\n    },\n    addReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reaction: Reaction }>) => {\n      const { channelId, messageId, reaction } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          // Check if reaction already exists\n          const existingReactionIndex = message.reactions.findIndex(\n            r => r.id === reaction.id || (r.emoji === reaction.emoji && r.userId === reaction.userId)\n          );\n          if (existingReactionIndex === -1) {\n            message.reactions.push(reaction);\n          }\n        }\n      }\n    },\n    removeReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reactionId: string }>) => {\n      const { channelId, messageId, reactionId } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.reactions = message.reactions.filter(reaction => reaction.id !== reactionId);\n        }\n      }\n    },\n  },\n});\n\nexport const {\n  fetchMessagesStart,\n  fetchMessagesSuccess,\n  fetchMessagesFailure,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  addReaction,\n  removeReaction,\n} = messagesSlice.actions;\n\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}