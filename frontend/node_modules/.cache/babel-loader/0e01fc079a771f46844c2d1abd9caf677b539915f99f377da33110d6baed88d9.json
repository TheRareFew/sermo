{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { prependMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  var _messages, _messages$, _messages$3;\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete,\n    channelId\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const lastMessageRef = useRef(((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.id) || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef(((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const dispatch = useDispatch();\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    var _messages$2;\n    if (!containerRef.current) return;\n    const newChannelId = (_messages$2 = messages[0]) === null || _messages$2 === void 0 ? void 0 : _messages$2.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      var _messages2;\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = (_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n    isInitialRender.current = false;\n  }, [(_messages$3 = messages[0]) === null || _messages$3 === void 0 ? void 0 : _messages$3.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n    try {\n      setIsLoadingMore(true);\n      const oldestMessageDate = messages.length > 0 ? new Date(messages[0].createdAt).getTime() : Date.now();\n      const olderMessages = await getChannelMessages(channelId, 50,\n      // limit\n      messages.length // skip\n      );\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // Maintain scroll position\n        if (containerRef.current) {\n          const firstMessage = containerRef.current.querySelector('[data-message-id]');\n          if (firstMessage) {\n            firstMessage.scrollIntoView();\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    var _messages3, _messages4, _messages5;\n    if (!containerRef.current || isInitialRender.current) return;\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = ((_messages3 = messages[messages.length - 1]) === null || _messages3 === void 0 ? void 0 : _messages3.id) !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && ((_messages4 = messages[messages.length - 1]) === null || _messages4 === void 0 ? void 0 : _messages4.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    }\n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || isNewMessage && isAtBottom) {\n      container.scrollTop = container.scrollHeight;\n    }\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = (_messages5 = messages[messages.length - 1]) === null || _messages5 === void 0 ? void 0 : _messages5.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = messageId => {\n    console.log('Toggle replies:', messageId);\n  };\n  const handleReply = messageId => {\n    console.log('Reply to message:', messageId);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), [...messages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()).map(message => {\n        var _users$message$userId;\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          $isSelected: message.id === selectedMessageId,\n          \"data-message-id\": message.id,\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            content: message.content,\n            sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n            timestamp: message.createdAt,\n            userId: message.userId,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            onDelete: () => handleDeleteMessage(message.id),\n            replyCount: message.replyCount || 0,\n            isExpanded: message.isExpanded || false,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onReply: () => handleReply(message.id),\n            isReply: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), message.isExpanded && message.replies && /*#__PURE__*/_jsxDEV(MessageReplies, {\n            parentId: message.id,\n            replies: message.replies,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            isExpanded: message.isExpanded,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onDelete: handleDeleteMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n}, \"sz9eV8/KHKkmH4U8GE8TmAKZUpM=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"sz9eV8/KHKkmH4U8GE8TmAKZUpM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","styled","useSelector","useDispatch","Message","MessageReplies","getChannelMessages","prependMessages","transformMessage","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","_messages","_messages$","_messages$3","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","channelId","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","lastMessageRef","length","id","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","isUserScrolling","currentChannelRef","isInitialRender","isLoadingMore","setIsLoadingMore","dispatch","currentUser","users","state","auth","user","chat","current","clearTimeout","_messages$2","newChannelId","channelChanged","_messages2","requestAnimationFrame","scrollTop","scrollHeight","setTimeout","loadOlderMessages","oldestMessageDate","Date","createdAt","getTime","now","olderMessages","transformedMessages","map","firstMessage","querySelector","scrollIntoView","error","console","container","scrollTimeout","handleScroll","addEventListener","removeEventListener","_messages3","_messages4","_messages5","isAtBottom","clientHeight","hasNewMessages","isNewMessage","isOwnMessage","userId","messageElement","behavior","block","classList","add","remove","handleDeleteMessage","messageId","log","handleToggleReplies","handleReply","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","message","_users$message$userId","content","sender","username","timestamp","currentUserId","onDelete","replyCount","isExpanded","onToggleReplies","onReply","isReply","replies","parentId","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message, { ChatMessageProps } from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { prependMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n  channelId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete, channelId } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const lastMessageRef = useRef<string | null>(messages[messages.length - 1]?.id || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef<string | null>(messages[0]?.channelId || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const dispatch = useDispatch();\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const newChannelId = messages[0]?.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    \n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = messages[messages.length - 1]?.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n\n    isInitialRender.current = false;\n  }, [messages[0]?.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      const oldestMessageDate = messages.length > 0 \n        ? new Date(messages[0].createdAt).getTime()\n        : Date.now();\n\n      const olderMessages = await getChannelMessages(\n        channelId,\n        50, // limit\n        messages.length // skip\n      );\n\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // Maintain scroll position\n        if (containerRef.current) {\n          const firstMessage = containerRef.current.querySelector('[data-message-id]');\n          if (firstMessage) {\n            firstMessage.scrollIntoView();\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current || isInitialRender.current) return;\n\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = messages[messages.length - 1]?.id !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && messages[messages.length - 1]?.userId === currentUser?.id;\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(\n        `[data-message-id=\"${selectedMessageId}\"]`\n      ) as HTMLElement;\n      \n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        \n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        \n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    } \n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || (isNewMessage && isAtBottom)) {\n      container.scrollTop = container.scrollHeight;\n    }\n\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = messages[messages.length - 1]?.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser?.id]);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    console.log('Toggle replies:', messageId);\n  };\n\n  const handleReply = (messageId: string) => {\n    console.log('Reply to message:', messageId);\n  };\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      <MessagesWrapper>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        {[...messages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()).map(message => (\n          <MessageWrapper\n            key={message.id}\n            $isSelected={message.id === selectedMessageId}\n            data-message-id={message.id}\n          >\n            <Message\n              content={message.content}\n              sender={users[message.userId]?.username || message.userId}\n              timestamp={message.createdAt}\n              userId={message.userId}\n              currentUserId={currentUser?.id}\n              onDelete={() => handleDeleteMessage(message.id)}\n              replyCount={message.replyCount || 0}\n              isExpanded={message.isExpanded || false}\n              onToggleReplies={() => handleToggleReplies(message.id)}\n              onReply={() => handleReply(message.id)}\n              isReply={false}\n            />\n            {message.isExpanded && message.replies && (\n              <MessageReplies\n                parentId={message.id}\n                replies={message.replies}\n                currentUserId={currentUser?.id}\n                isExpanded={message.isExpanded}\n                onToggleReplies={() => handleToggleReplies(message.id)}\n                onDelete={handleDeleteMessage}\n              />\n            )}\n          </MessageWrapper>\n        ))}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}