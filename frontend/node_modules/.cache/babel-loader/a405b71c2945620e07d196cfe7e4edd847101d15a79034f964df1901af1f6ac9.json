{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, setError } from '../../../store/chat/chatSlice';\nimport { setMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getMessagePosition } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport WebSocketService from '../../../services/websocket';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\n// Constants\n_c15 = SearchContainer;\nconst PAGE_SIZE = 50;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(false);\n  const isChannelSwitching = useRef(false);\n  const lastMessageTimestamp = useRef(null);\n  const pollingInterval = useRef(null);\n  const isSearchNavigation = useRef(false);\n\n  // Define loadInitialMessages at the very top\n  const loadInitialMessages = useCallback(async channelId => {\n    try {\n      console.log('Loading initial messages for channel:', channelId);\n      const messages = await getChannelMessages(channelId, 50, 0);\n      if (messages.length > 0) {\n        const transformedMessages = messages.map(transformMessage);\n        dispatch(setMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading initial messages:', error);\n      dispatch(setError('Failed to load messages'));\n    }\n  }, [dispatch]);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initialize WebSocket connection and handle channel subscriptions\n  useEffect(() => {\n    if (!activeChannelId) return;\n    console.log('Setting up WebSocket for channel:', activeChannelId);\n\n    // Ensure WebSocket is connected\n    WebSocketService.connect();\n\n    // Small delay to ensure WebSocket is connected before joining channel\n    const joinTimeout = setTimeout(() => {\n      console.log('Joining channel:', activeChannelId);\n      WebSocketService.joinChannel(activeChannelId);\n\n      // Load initial messages\n      loadInitialMessages(activeChannelId);\n    }, 100); // Reduced delay to make reactions more responsive\n\n    // Cleanup function\n    return () => {\n      clearTimeout(joinTimeout);\n      if (activeChannelId) {\n        console.log('Leaving channel:', activeChannelId);\n        WebSocketService.leaveChannel(activeChannelId);\n      }\n    };\n  }, [activeChannelId, loadInitialMessages]);\n\n  // Ensure WebSocket stays connected\n  useEffect(() => {\n    // Initial connection\n    WebSocketService.connect();\n\n    // Reconnect on visibility change\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('Document became visible, ensuring WebSocket connection');\n        WebSocketService.connect();\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Cleanup\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          // Find the first public channel or default to first channel\n          const firstPublicChannel = fetchedChannels.find(ch => ch.is_public) || fetchedChannels[0];\n          dispatch(setActiveChannel(firstPublicChannel.id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]);\n\n  // Handle channel initialization and WebSocket subscription\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const initializeChannel = async () => {\n      try {\n        // Find the channel to check if it's public\n        const channel = channels.find(ch => ch.id === activeChannelId);\n        if (!channel) {\n          throw new Error('Channel not found');\n        }\n        let messages = [];\n        let channelUsers = [];\n\n        // For private channels, ensure we're a member first\n        if (!channel.is_public) {\n          try {\n            await joinChannel(activeChannelId);\n            console.log('[DEBUG] Joined private channel:', activeChannelId);\n          } catch (error) {\n            console.error('[DEBUG] Error joining channel:', error);\n            dispatch(setError('Failed to join channel'));\n            return;\n          }\n        }\n        try {\n          // Get initial messages first since they don't require membership\n          messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n\n          // Then try to get users\n          channelUsers = await getChannelUsers(activeChannelId);\n\n          // Update store with users if we got them\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n        } catch (error) {\n          console.error('[DEBUG] Error fetching channel data:', error);\n          // Don't throw here, we might still have messages to show\n        }\n\n        // Update messages if we got any\n        if (messages.length > 0) {\n          const transformedMessages = transformMessagesInChunks(messages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n\n        // Join WebSocket channel\n        WebSocketService.joinChannel(activeChannelId);\n      } catch (error) {\n        console.error('Failed to initialize channel:', error);\n        dispatch(setError('Failed to initialize channel'));\n      }\n    };\n    initializeChannel();\n\n    // Cleanup: leave WebSocket channel when switching channels\n    return () => {\n      WebSocketService.leaveChannel(activeChannelId);\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks, channels]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search error:', error);\n      setSearchError('Failed to search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle search result selection\n  const handleSelectChannel = channelId => {\n    dispatch(setActiveChannel(channelId));\n    setSearchResults(null);\n  };\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      isSearchNavigation.current = true;\n      setSelectedMessageId(null); // Reset selected message first\n      setInitialScrollComplete(false); // Reset scroll state\n\n      // If switching channels\n      if (channelId !== activeChannelId) {\n        await dispatch(setActiveChannel(channelId));\n        try {\n          // First, try to get the message's position in the channel\n          const messagePosition = await getMessagePosition(channelId, messageId);\n          const batchSize = 50;\n\n          // Calculate how many messages we need to load to get from the target message to the most recent\n          const totalMessagesToLoad = messagePosition + batchSize; // Add one batch for context before the target\n          const batchesToLoad = Math.ceil(totalMessagesToLoad / batchSize);\n\n          // Load all messages from position 0 to the target message's position\n          const messagesPromises = Array.from({\n            length: batchesToLoad\n          }, (_, i) => {\n            const skip = i * batchSize;\n            return getChannelMessages(channelId, batchSize, skip);\n          });\n          const messagesBatches = await Promise.all(messagesPromises);\n          const allMessages = messagesBatches.flat();\n          if (allMessages.length > 0) {\n            const transformedMessages = allMessages.map(transformMessage);\n            await dispatch(setMessages({\n              channelId,\n              messages: transformedMessages\n            }));\n          }\n        } catch (error) {\n          console.error('Error loading messages:', error);\n          // Fallback to loading messages around the current time\n          const messages = await getChannelMessages(channelId, 50, 0);\n          if (messages.length > 0) {\n            const transformedMessages = messages.map(transformMessage);\n            await dispatch(setMessages({\n              channelId,\n              messages: transformedMessages\n            }));\n          }\n        }\n      }\n\n      // Small delay to ensure messages are rendered before scrolling\n      setTimeout(() => {\n        setSelectedMessageId(messageId);\n        setSearchResults(null);\n        isSearchNavigation.current = false;\n      }, 100);\n    } catch (error) {\n      console.error('Error selecting message:', error);\n      dispatch(setError('Failed to navigate to message'));\n      isSearchNavigation.current = false;\n    }\n  };\n  const handleSelectFile = fileId => {\n    // TODO: Implement file selection\n    console.log('Selected file:', fileId);\n    setSearchResults(null);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort channels by type\n  const sortedChannels = useMemo(() => {\n    return [...channels].sort((a, b) => a.name.localeCompare(b.name));\n  }, [channels]);\n  const publicChannels = useMemo(() => sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message), [sortedChannels]);\n  const privateChannels = useMemo(() => sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message), [sortedChannels]);\n  const directMessages = useMemo(() => sortedChannels.filter(channel => channel.is_direct_message), [sortedChannels]);\n\n  // Update the channel selection handler\n  const handleChannelSelect = useCallback(async channelId => {\n    try {\n      console.log('Selecting channel:', channelId);\n      isChannelSwitching.current = true;\n      setInitialScrollComplete(false);\n      setSelectedMessageId(null);\n      dispatch(setActiveChannel(channelId));\n\n      // Fetch channel messages\n      const messages = await getChannelMessages(channelId);\n      console.log('Fetched messages:', messages);\n      const transformedMessages = transformMessagesInChunks(messages);\n      console.log('Transformed messages:', transformedMessages);\n      dispatch(setMessages({\n        channelId,\n        messages: transformedMessages\n      }));\n\n      // Fetch channel users and transform to dictionary\n      const channelUsers = await getChannelUsers(channelId);\n      const usersDict = channelUsers.reduce((acc, user) => {\n        acc[user.id] = user;\n        return acc;\n      }, {});\n      console.log('Transformed users:', usersDict);\n      dispatch(setUsers(usersDict));\n      isChannelSwitching.current = false;\n    } catch (error) {\n      console.error('Error selecting channel:', error);\n      dispatch(setError('Failed to load channel messages'));\n      isChannelSwitching.current = false;\n    }\n  }, [dispatch, transformMessagesInChunks]);\n\n  // Add effect to handle scroll reset on normal channel changes\n  useEffect(() => {\n    if (!isSearchNavigation.current && activeChannelId) {\n      setInitialScrollComplete(false);\n      setSelectedMessageId(null);\n    }\n  }, [activeChannelId]);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: false,\n            isPublic: true,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: false,\n            isPublic: false,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 13\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: true,\n            isPublic: false,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: activeChannel && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: activeChannel.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n            children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n              children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                onSearch: handleSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 19\n              }, this), isSearching && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Searching...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 35\n              }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n                results: searchResults,\n                isLoading: isSearching,\n                onClose: () => setSearchResults(null),\n                onSelectChannel: handleSelectChannel,\n                onSelectMessage: handleSelectMessage,\n                onSelectFile: handleSelectFile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n              onClick: () => setIsSettingsOpen(true),\n              children: \"Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n              onClick: handleLogout,\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId,\n        initialScrollComplete: initialScrollComplete,\n        channelId: activeChannelId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 548,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"79V62KvC0MbsdjDggJ48MSPEzDI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","setError","setMessages","transformMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","getChannels","getChannelUsers","getChannelMessages","joinChannel","getMessagePosition","searchAll","WebSocketService","ChannelSettings","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","PAGE_SIZE","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","initialScrollComplete","setInitialScrollComplete","isChannelSwitching","lastMessageTimestamp","pollingInterval","isSearchNavigation","loadInitialMessages","channelId","console","log","messages","length","transformedMessages","map","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","channelMessages","messagesByChannel","transformMessagesInChunks","msg","connect","joinTimeout","setTimeout","clearTimeout","leaveChannel","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","fetchInitialData","fetchedChannels","firstPublicChannel","ch","is_public","initializeChannel","Error","channelUsers","usersObject","reduce","acc","user","handleSearch","query","trim","results","handleSelectChannel","handleSelectMessage","messageId","current","messagePosition","batchSize","totalMessagesToLoad","batchesToLoad","Math","ceil","messagesPromises","Array","from","_","i","skip","messagesBatches","Promise","all","allMessages","flat","handleSelectFile","fileId","handleLogout","sortedChannels","sort","a","b","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","handleChannelSelect","usersDict","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","status","onSearch","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  deleteMessage,\n  updateMessage\n} from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies, getMessagePosition } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport WebSocketService from '../../../services/websocket';\nimport { \n  RootState, \n  Channel, \n  User, \n  Message, \n  SearchResult,\n  UserStatus,\n  RawMessage,\n  StoreMessage\n} from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\n// Constants\nconst PAGE_SIZE = 50;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(false);\n  const isChannelSwitching = useRef<boolean>(false);\n  const lastMessageTimestamp = useRef<number | null>(null);\n  const pollingInterval = useRef<NodeJS.Timeout | null>(null);\n  const isSearchNavigation = useRef<boolean>(false);\n\n  // Define loadInitialMessages at the very top\n  const loadInitialMessages = useCallback(async (channelId: string) => {\n    try {\n      console.log('Loading initial messages for channel:', channelId);\n      const messages = await getChannelMessages(channelId, 50, 0);\n      if (messages.length > 0) {\n        const transformedMessages = messages.map(transformMessage);\n        dispatch(setMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading initial messages:', error);\n      dispatch(setError('Failed to load messages'));\n    }\n  }, [dispatch]);\n\n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initialize WebSocket connection and handle channel subscriptions\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    console.log('Setting up WebSocket for channel:', activeChannelId);\n    \n    // Ensure WebSocket is connected\n    WebSocketService.connect();\n    \n    // Small delay to ensure WebSocket is connected before joining channel\n    const joinTimeout = setTimeout(() => {\n      console.log('Joining channel:', activeChannelId);\n      WebSocketService.joinChannel(activeChannelId);\n      \n      // Load initial messages\n      loadInitialMessages(activeChannelId);\n    }, 100); // Reduced delay to make reactions more responsive\n    \n    // Cleanup function\n    return () => {\n      clearTimeout(joinTimeout);\n      if (activeChannelId) {\n        console.log('Leaving channel:', activeChannelId);\n        WebSocketService.leaveChannel(activeChannelId);\n      }\n    };\n  }, [activeChannelId, loadInitialMessages]);\n\n  // Ensure WebSocket stays connected\n  useEffect(() => {\n    // Initial connection\n    WebSocketService.connect();\n\n    // Reconnect on visibility change\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('Document became visible, ensuring WebSocket connection');\n        WebSocketService.connect();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Cleanup\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          // Find the first public channel or default to first channel\n          const firstPublicChannel = fetchedChannels.find(ch => ch.is_public) || fetchedChannels[0];\n          dispatch(setActiveChannel(firstPublicChannel.id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]);\n\n  // Handle channel initialization and WebSocket subscription\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const initializeChannel = async () => {\n      try {\n        // Find the channel to check if it's public\n        const channel = channels.find(ch => ch.id === activeChannelId);\n        if (!channel) {\n          throw new Error('Channel not found');\n        }\n\n        let messages: Message[] = [];\n        let channelUsers: User[] = [];\n\n        // For private channels, ensure we're a member first\n        if (!channel.is_public) {\n          try {\n            await joinChannel(activeChannelId);\n            console.log('[DEBUG] Joined private channel:', activeChannelId);\n          } catch (error) {\n            console.error('[DEBUG] Error joining channel:', error);\n            dispatch(setError('Failed to join channel'));\n            return;\n          }\n        }\n\n        try {\n          // Get initial messages first since they don't require membership\n          messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n          \n          // Then try to get users\n          channelUsers = await getChannelUsers(activeChannelId);\n          \n          // Update store with users if we got them\n          const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n        } catch (error) {\n          console.error('[DEBUG] Error fetching channel data:', error);\n          // Don't throw here, we might still have messages to show\n        }\n\n        // Update messages if we got any\n        if (messages.length > 0) {\n          const transformedMessages = transformMessagesInChunks(messages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n\n        // Join WebSocket channel\n        WebSocketService.joinChannel(activeChannelId);\n      } catch (error) {\n        console.error('Failed to initialize channel:', error);\n        dispatch(setError('Failed to initialize channel'));\n      }\n    };\n\n    initializeChannel();\n\n    // Cleanup: leave WebSocket channel when switching channels\n    return () => {\n      WebSocketService.leaveChannel(activeChannelId);\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks, channels]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search error:', error);\n      setSearchError('Failed to search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle search result selection\n  const handleSelectChannel = (channelId: string) => {\n    dispatch(setActiveChannel(channelId));\n    setSearchResults(null);\n  };\n\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      isSearchNavigation.current = true;\n      setSelectedMessageId(null); // Reset selected message first\n      setInitialScrollComplete(false); // Reset scroll state\n\n      // If switching channels\n      if (channelId !== activeChannelId) {\n        await dispatch(setActiveChannel(channelId));\n        \n        try {\n          // First, try to get the message's position in the channel\n          const messagePosition = await getMessagePosition(channelId, messageId);\n          const batchSize = 50;\n          \n          // Calculate how many messages we need to load to get from the target message to the most recent\n          const totalMessagesToLoad = messagePosition + batchSize; // Add one batch for context before the target\n          const batchesToLoad = Math.ceil(totalMessagesToLoad / batchSize);\n          \n          // Load all messages from position 0 to the target message's position\n          const messagesPromises = Array.from({ length: batchesToLoad }, (_, i) => {\n            const skip = i * batchSize;\n            return getChannelMessages(channelId, batchSize, skip);\n          });\n\n          const messagesBatches = await Promise.all(messagesPromises);\n          const allMessages = messagesBatches.flat();\n          \n          if (allMessages.length > 0) {\n            const transformedMessages = allMessages.map(transformMessage);\n            await dispatch(setMessages({\n              channelId,\n              messages: transformedMessages\n            }));\n          }\n        } catch (error) {\n          console.error('Error loading messages:', error);\n          // Fallback to loading messages around the current time\n          const messages = await getChannelMessages(channelId, 50, 0);\n          if (messages.length > 0) {\n            const transformedMessages = messages.map(transformMessage);\n            await dispatch(setMessages({\n              channelId,\n              messages: transformedMessages\n            }));\n          }\n        }\n      }\n\n      // Small delay to ensure messages are rendered before scrolling\n      setTimeout(() => {\n        setSelectedMessageId(messageId);\n        setSearchResults(null);\n        isSearchNavigation.current = false;\n      }, 100);\n      \n    } catch (error) {\n      console.error('Error selecting message:', error);\n      dispatch(setError('Failed to navigate to message'));\n      isSearchNavigation.current = false;\n    }\n  };\n\n  const handleSelectFile = (fileId: string) => {\n    // TODO: Implement file selection\n    console.log('Selected file:', fileId);\n    setSearchResults(null);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort channels by type\n  const sortedChannels = useMemo(() => {\n    return [...channels].sort((a, b) => a.name.localeCompare(b.name));\n  }, [channels]);\n\n  const publicChannels = useMemo(() => \n    sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  const privateChannels = useMemo(() => \n    sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  const directMessages = useMemo(() => \n    sortedChannels.filter(channel => channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  // Update the channel selection handler\n  const handleChannelSelect = useCallback(async (channelId: string) => {\n    try {\n      console.log('Selecting channel:', channelId);\n      isChannelSwitching.current = true;\n      setInitialScrollComplete(false);\n      setSelectedMessageId(null);\n      dispatch(setActiveChannel(channelId));\n\n      // Fetch channel messages\n      const messages = await getChannelMessages(channelId);\n      console.log('Fetched messages:', messages);\n      \n      const transformedMessages = transformMessagesInChunks(messages);\n      console.log('Transformed messages:', transformedMessages);\n      \n      dispatch(setMessages({\n        channelId,\n        messages: transformedMessages\n      }));\n\n      // Fetch channel users and transform to dictionary\n      const channelUsers = await getChannelUsers(channelId);\n      const usersDict = channelUsers.reduce<{ [key: string]: User }>((acc, user) => {\n        acc[user.id] = user;\n        return acc;\n      }, {});\n      \n      console.log('Transformed users:', usersDict);\n      dispatch(setUsers(usersDict));\n\n      isChannelSwitching.current = false;\n    } catch (error) {\n      console.error('Error selecting channel:', error);\n      dispatch(setError('Failed to load channel messages'));\n      isChannelSwitching.current = false;\n    }\n  }, [dispatch, transformMessagesInChunks]);\n\n  // Add effect to handle scroll reset on normal channel changes\n  useEffect(() => {\n    if (!isSearchNavigation.current && activeChannelId) {\n      setInitialScrollComplete(false);\n      setSelectedMessageId(null);\n    }\n  }, [activeChannelId]);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton onClick={() => setIsCreateModalOpen(true)}>\n              +\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {/* Public Channels */}\n          <ChannelGroup>\n            <GroupTitle>Public</GroupTitle>\n            {publicChannels.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={false}\n                isPublic={true}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n\n          {/* Private Channels */}\n          <ChannelGroup>\n            <GroupTitle>Private</GroupTitle>\n            {privateChannels.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={false}\n                isPublic={false}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n\n          {/* Direct Messages */}\n          <ChannelGroup>\n            <GroupTitle>Direct Messages</GroupTitle>\n            {directMessages.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={true}\n                isPublic={false}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n        </ChannelList>\n\n        <UserList>\n          <h2>Users</h2>\n          {Object.values(users).map(user => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n\n      <ChatArea>\n        <ChatHeader>\n          {activeChannel && (\n            <>\n              <h1>{activeChannel.name}</h1>\n              <ChannelActions>\n                <SearchContainer>\n                  <SearchBar onSearch={handleSearch} />\n                  {isSearching && <div>Searching...</div>}\n                  {searchResults && (\n                    <SearchResults\n                      results={searchResults}\n                      isLoading={isSearching}\n                      onClose={() => setSearchResults(null)}\n                      onSelectChannel={handleSelectChannel}\n                      onSelectMessage={handleSelectMessage}\n                      onSelectFile={handleSelectFile}\n                    />\n                  )}\n                </SearchContainer>\n                <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                  Settings\n                </SettingsButton>\n                <LogoutButton onClick={handleLogout}>\n                  Logout\n                </LogoutButton>\n              </ChannelActions>\n            </>\n          )}\n        </ChatHeader>\n\n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n          initialScrollComplete={initialScrollComplete}\n          channelId={activeChannelId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}