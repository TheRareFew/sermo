{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, setError } from '../../../store/chat/chatSlice';\nimport { setMessages, clearMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]); // Only run once on mount, but include dispatch in dependencies\n\n  // Handle channel initialization and WebSocket connection\n  useEffect(() => {\n    if (!activeChannelId || isChannelSwitching.current) return;\n    const initializeChannel = async () => {\n      try {\n        setIsConnecting(true);\n        const messages = await getChannelMessages(activeChannelId);\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: transformedMessages\n        }));\n        await wsService.connect(activeChannelId);\n      } catch (error) {\n        console.error('Error initializing channel:', error);\n        dispatch(setError('Error initializing channel'));\n      } finally {\n        setIsConnecting(false);\n      }\n    };\n    initializeChannel();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [activeChannelId, transformMessagesInChunks, dispatch]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async channelId => {\n    try {\n      // Leave current channel if any\n      if (activeChannelId) {\n        await wsService.sendMessage(activeChannelId, {\n          type: 'leave_channel',\n          channel_id: parseInt(activeChannelId)\n        });\n      }\n\n      // Join new channel\n      await wsService.connect(channelId);\n      await wsService.sendMessage(channelId, {\n        type: 'join_channel',\n        channel_id: parseInt(channelId)\n      });\n      dispatch(setActiveChannel(channelId));\n      dispatch(clearMessages());\n      dispatch(setError(null));\n    } catch (error) {\n      console.error('Error switching channels:', error);\n      dispatch(setError('Failed to switch channels'));\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const handleWebSocketMessage = message => {\n      var _message$data, _message$data2, _message$data3;\n      // Helper function to check if message belongs to current channel\n      const isMessageForCurrentChannel = msg => {\n        var _msg$data;\n        if ((_msg$data = msg.data) !== null && _msg$data !== void 0 && _msg$data.channel_id) {\n          const channelId = msg.data.channel_id.toString();\n          return channelId === activeChannelId;\n        }\n        return true; // For other message types like user_status\n      };\n\n      // Skip messages not meant for current channel\n      if (!isMessageForCurrentChannel(message)) {\n        return;\n      }\n      try {\n        switch (message.type) {\n          case 'channel_joined':\n            console.log('Successfully joined channel:', (_message$data = message.data) === null || _message$data === void 0 ? void 0 : _message$data.channel_id);\n            break;\n          case 'channel_left':\n            console.log('Successfully left channel:', (_message$data2 = message.data) === null || _message$data2 === void 0 ? void 0 : _message$data2.channel_id);\n            break;\n          case 'user_status':\n            if ((_message$data3 = message.data) !== null && _message$data3 !== void 0 && _message$data3.user_id && message.data.status) {\n              dispatch(updateUserStatus({\n                userId: message.data.user_id.toString(),\n                status: message.data.status\n              }));\n            }\n            break;\n          case 'error':\n            if (message.message) {\n              console.error('WebSocket error:', message.message);\n              dispatch(setError(`WebSocket error: ${message.message}`));\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n        dispatch(setError('Error processing message from server'));\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => {\n      unsubscribe();\n      // Leave channel when component unmounts\n      if (activeChannelId) {\n        wsService.sendMessage(activeChannelId, {\n          type: 'leave_channel',\n          channel_id: parseInt(activeChannelId)\n        }).catch(console.error);\n      }\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"xew9UPX7lfZGfvs5SYOxOR4C7R4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","setError","setMessages","clearMessages","transformMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","channelMessages","messages","messagesByChannel","transformMessagesInChunks","map","msg","fetchInitialData","console","log","fetchedChannels","length","firstChannelId","channelUsers","usersObject","reduce","acc","user","current","initializeChannel","transformedMessages","channelId","connect","disconnect","handleChannelSelect","sendMessage","type","channel_id","parseInt","handleWebSocketMessage","message","_message$data","_message$data2","_message$data3","isMessageForCurrentChannel","_msg$data","data","toString","user_id","status","userId","unsubscribe","onMessage","catch","handleSearch","query","trim","undefined","results","handleSelectMessage","messageId","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","setTimeout","remove","requestAnimationFrame","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage,\n  clearMessages\n} from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { \n  RootState, \n  WebSocketMessage, \n  Channel, \n  User, \n  Message, \n  SearchResult,\n  UserStatus,\n  RawMessage,\n  StoreMessage\n} from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]); // Only run once on mount, but include dispatch in dependencies\n\n  // Handle channel initialization and WebSocket connection\n  useEffect(() => {\n    if (!activeChannelId || isChannelSwitching.current) return;\n\n    const initializeChannel = async () => {\n      try {\n        setIsConnecting(true);\n        const messages = await getChannelMessages(activeChannelId);\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n        await wsService.connect(activeChannelId);\n      } catch (error) {\n        console.error('Error initializing channel:', error);\n        dispatch(setError('Error initializing channel'));\n      } finally {\n        setIsConnecting(false);\n      }\n    };\n\n    initializeChannel();\n\n    return () => {\n      wsService.disconnect();\n    };\n  }, [activeChannelId, transformMessagesInChunks, dispatch]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async (channelId: string) => {\n    try {\n      // Leave current channel if any\n      if (activeChannelId) {\n        await wsService.sendMessage(activeChannelId, {\n          type: 'leave_channel',\n          channel_id: parseInt(activeChannelId)\n        });\n      }\n\n      // Join new channel\n      await wsService.connect(channelId);\n      await wsService.sendMessage(channelId, {\n        type: 'join_channel',\n        channel_id: parseInt(channelId)\n      });\n\n      dispatch(setActiveChannel(channelId));\n      dispatch(clearMessages());\n      dispatch(setError(null));\n    } catch (error) {\n      console.error('Error switching channels:', error);\n      dispatch(setError('Failed to switch channels'));\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      // Helper function to check if message belongs to current channel\n      const isMessageForCurrentChannel = (msg: WebSocketMessage): boolean => {\n        if (msg.data?.channel_id) {\n          const channelId = msg.data.channel_id.toString();\n          return channelId === activeChannelId;\n        }\n        return true; // For other message types like user_status\n      };\n\n      // Skip messages not meant for current channel\n      if (!isMessageForCurrentChannel(message)) {\n        return;\n      }\n\n      try {\n        switch (message.type) {\n          case 'channel_joined':\n            console.log('Successfully joined channel:', message.data?.channel_id);\n            break;\n\n          case 'channel_left':\n            console.log('Successfully left channel:', message.data?.channel_id);\n            break;\n\n          case 'user_status':\n            if (message.data?.user_id && message.data.status) {\n              dispatch(updateUserStatus({\n                userId: message.data.user_id.toString(),\n                status: message.data.status as UserStatus\n              }));\n            }\n            break;\n\n          case 'error':\n            if (message.message) {\n              console.error('WebSocket error:', message.message);\n              dispatch(setError(`WebSocket error: ${message.message}`));\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n        dispatch(setError('Error processing message from server'));\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => {\n      unsubscribe();\n      // Leave channel when component unmounts\n      if (activeChannelId) {\n        wsService.sendMessage(activeChannelId, {\n          type: 'leave_channel',\n          channel_id: parseInt(activeChannelId)\n        }).catch(console.error);\n      }\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}