{"ast":null,"code":"import { api } from './base';\nimport { searchCache } from '../cache/searchCache';\nexport const searchChannels = async query => {\n  const url = `/search/channels?query=${encodeURIComponent(query)}`;\n  console.log('Searching channels at:', url);\n  const response = await api.get(url);\n  return response.data;\n};\nexport const searchMessages = async query => {\n  const url = `/search/messages?query=${encodeURIComponent(query)}`;\n  console.log('Searching messages at:', url);\n  const response = await api.get(url);\n  return response.data;\n};\nexport const searchFiles = async query => {\n  const url = `/search/files?query=${encodeURIComponent(query)}`;\n  console.log('Searching files at:', url);\n  const response = await api.get(url);\n  return response.data;\n};\nexport const searchAll = async query => {\n  console.log('Performing search for query:', query);\n\n  // Check cache first\n  const cachedResults = searchCache.get(query);\n  if (cachedResults) {\n    console.log('Found cached results');\n    return cachedResults;\n  }\n\n  // If not in cache, perform the search\n  try {\n    const [channels, messages, files] = await Promise.all([searchChannels(query), searchMessages(query), searchFiles(query)]);\n    const results = {\n      channels,\n      messages,\n      files\n    };\n\n    // Cache the results\n    searchCache.set(query, results);\n    console.log('Search completed successfully');\n    return results;\n  } catch (error) {\n    console.error('Search failed with error:', error);\n    console.error('Request config:', error === null || error === void 0 ? void 0 : error.config);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","searchCache","searchChannels","query","url","encodeURIComponent","console","log","response","get","data","searchMessages","searchFiles","searchAll","cachedResults","channels","messages","files","Promise","all","results","set","error","config"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/search.ts"],"sourcesContent":["import { api } from './base';\r\nimport { SearchResult, ChannelSearchResult, MessageSearchResult, FileSearchResult } from '../../types';\r\nimport { searchCache } from '../cache/searchCache';\r\n\r\nexport const searchChannels = async (query: string): Promise<ChannelSearchResult[]> => {\r\n  const url = `/search/channels?query=${encodeURIComponent(query)}`;\r\n  console.log('Searching channels at:', url);\r\n  const response = await api.get(url);\r\n  return response.data;\r\n};\r\n\r\nexport const searchMessages = async (query: string): Promise<MessageSearchResult[]> => {\r\n  const url = `/search/messages?query=${encodeURIComponent(query)}`;\r\n  console.log('Searching messages at:', url);\r\n  const response = await api.get(url);\r\n  return response.data;\r\n};\r\n\r\nexport const searchFiles = async (query: string): Promise<FileSearchResult[]> => {\r\n  const url = `/search/files?query=${encodeURIComponent(query)}`;\r\n  console.log('Searching files at:', url);\r\n  const response = await api.get(url);\r\n  return response.data;\r\n};\r\n\r\nexport const searchAll = async (query: string): Promise<SearchResult> => {\r\n  console.log('Performing search for query:', query);\r\n  \r\n  // Check cache first\r\n  const cachedResults = searchCache.get(query);\r\n  if (cachedResults) {\r\n    console.log('Found cached results');\r\n    return cachedResults;\r\n  }\r\n\r\n  // If not in cache, perform the search\r\n  try {\r\n    const [channels, messages, files] = await Promise.all([\r\n      searchChannels(query),\r\n      searchMessages(query),\r\n      searchFiles(query)\r\n    ]);\r\n\r\n    const results = { channels, messages, files };\r\n    \r\n    // Cache the results\r\n    searchCache.set(query, results);\r\n    console.log('Search completed successfully');\r\n\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Search failed with error:', error);\r\n    console.error('Request config:', (error as any)?.config);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,QAAQ;AAE5B,SAASC,WAAW,QAAQ,sBAAsB;AAElD,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAAa,IAAqC;EACrF,MAAMC,GAAG,GAAG,0BAA0BC,kBAAkB,CAACF,KAAK,CAAC,EAAE;EACjEG,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,GAAG,CAAC;EAC1C,MAAMI,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAACL,GAAG,CAAC;EACnC,OAAOI,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOR,KAAa,IAAqC;EACrF,MAAMC,GAAG,GAAG,0BAA0BC,kBAAkB,CAACF,KAAK,CAAC,EAAE;EACjEG,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,GAAG,CAAC;EAC1C,MAAMI,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAACL,GAAG,CAAC;EACnC,OAAOI,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAOT,KAAa,IAAkC;EAC/E,MAAMC,GAAG,GAAG,uBAAuBC,kBAAkB,CAACF,KAAK,CAAC,EAAE;EAC9DG,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,GAAG,CAAC;EACvC,MAAMI,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAACL,GAAG,CAAC;EACnC,OAAOI,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAOV,KAAa,IAA4B;EACvEG,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEJ,KAAK,CAAC;;EAElD;EACA,MAAMW,aAAa,GAAGb,WAAW,CAACQ,GAAG,CAACN,KAAK,CAAC;EAC5C,IAAIW,aAAa,EAAE;IACjBR,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,OAAOO,aAAa;EACtB;;EAEA;EACA,IAAI;IACF,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACpDjB,cAAc,CAACC,KAAK,CAAC,EACrBQ,cAAc,CAACR,KAAK,CAAC,EACrBS,WAAW,CAACT,KAAK,CAAC,CACnB,CAAC;IAEF,MAAMiB,OAAO,GAAG;MAAEL,QAAQ;MAAEC,QAAQ;MAAEC;IAAM,CAAC;;IAE7C;IACAhB,WAAW,CAACoB,GAAG,CAAClB,KAAK,EAAEiB,OAAO,CAAC;IAC/Bd,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAE5C,OAAOa,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDhB,OAAO,CAACgB,KAAK,CAAC,iBAAiB,EAAGA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAUC,MAAM,CAAC;IACxD,MAAMD,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}