{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  activeChannelId: null,\n  channels: [],\n  messages: {},\n  users: {},\n  loading: false,\n  error: null\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setActiveChannel: (state, action) => {\n      state.activeChannelId = action.payload;\n    },\n    setChannels: (state, action) => {\n      state.channels = action.payload;\n    },\n    addChannel: (state, action) => {\n      state.channels.push(action.payload);\n    },\n    setMessages: (state, action) => {\n      state.messages[action.payload.channelId] = action.payload.messages;\n    },\n    addMessage: (state, action) => {\n      if (!state.messages[action.payload.channelId]) {\n        state.messages[action.payload.channelId] = [];\n      }\n      state.messages[action.payload.channelId].push(action.payload.message);\n    },\n    setUsers: (state, action) => {\n      state.users = action.payload;\n    },\n    addUser: (state, action) => {\n      state.users[action.payload.id] = action.payload;\n    },\n    updateUserStatus: (state, action) => {\n      const {\n        userId,\n        status\n      } = action.payload;\n      if (state.users[userId]) {\n        state.users[userId].status = status;\n      }\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setActiveChannel,\n  setChannels,\n  addChannel,\n  setMessages,\n  addMessage,\n  setUsers,\n  addUser,\n  updateUserStatus,\n  setLoading,\n  setError\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","activeChannelId","channels","messages","users","loading","error","chatSlice","name","reducers","setActiveChannel","state","action","payload","setChannels","addChannel","push","setMessages","channelId","addMessage","message","setUsers","addUser","id","updateUserStatus","userId","status","setLoading","setError","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/chat/chatSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ChatState, Channel, Message, User } from '../../types';\n\nconst initialState: ChatState = {\n  activeChannelId: null,\n  channels: [],\n  messages: {},\n  users: {},\n  loading: false,\n  error: null\n};\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setActiveChannel: (state, action: PayloadAction<number | null>) => {\n      state.activeChannelId = action.payload;\n    },\n    setChannels: (state, action: PayloadAction<Channel[]>) => {\n      state.channels = action.payload;\n    },\n    addChannel: (state, action: PayloadAction<Channel>) => {\n      state.channels.push(action.payload);\n    },\n    setMessages: (state, action: PayloadAction<{ channelId: string; messages: Message[] }>) => {\n      state.messages[action.payload.channelId] = action.payload.messages;\n    },\n    addMessage: (state, action: PayloadAction<{ channelId: string; message: Message }>) => {\n      if (!state.messages[action.payload.channelId]) {\n        state.messages[action.payload.channelId] = [];\n      }\n      state.messages[action.payload.channelId].push(action.payload.message);\n    },\n    setUsers: (state, action: PayloadAction<{ [userId: string]: User }>) => {\n      state.users = action.payload;\n    },\n    addUser: (state, action: PayloadAction<User>) => {\n      state.users[action.payload.id] = action.payload;\n    },\n    updateUserStatus: (state, action: PayloadAction<{ userId: string; status: User['status'] }>) => {\n      const { userId, status } = action.payload;\n      if (state.users[userId]) {\n        state.users[userId].status = status;\n      }\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    }\n  }\n});\n\nexport const {\n  setActiveChannel,\n  setChannels,\n  addChannel,\n  setMessages,\n  addMessage,\n  setUsers,\n  addUser,\n  updateUserStatus,\n  setLoading,\n  setError\n} = chatSlice.actions;\n\nexport default chatSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAG7D,MAAMC,YAAuB,GAAG;EAC9BC,eAAe,EAAE,IAAI;EACrBC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,CAAC,CAAC;EACZC,KAAK,EAAE,CAAC,CAAC;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IACRC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAoC,KAAK;MACjED,KAAK,CAACV,eAAe,GAAGW,MAAM,CAACC,OAAO;IACxC,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAAgC,KAAK;MACxDD,KAAK,CAACT,QAAQ,GAAGU,MAAM,CAACC,OAAO;IACjC,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACT,QAAQ,CAACc,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC;IACDI,WAAW,EAAEA,CAACN,KAAK,EAAEC,MAAiE,KAAK;MACzFD,KAAK,CAACR,QAAQ,CAACS,MAAM,CAACC,OAAO,CAACK,SAAS,CAAC,GAAGN,MAAM,CAACC,OAAO,CAACV,QAAQ;IACpE,CAAC;IACDgB,UAAU,EAAEA,CAACR,KAAK,EAAEC,MAA8D,KAAK;MACrF,IAAI,CAACD,KAAK,CAACR,QAAQ,CAACS,MAAM,CAACC,OAAO,CAACK,SAAS,CAAC,EAAE;QAC7CP,KAAK,CAACR,QAAQ,CAACS,MAAM,CAACC,OAAO,CAACK,SAAS,CAAC,GAAG,EAAE;MAC/C;MACAP,KAAK,CAACR,QAAQ,CAACS,MAAM,CAACC,OAAO,CAACK,SAAS,CAAC,CAACF,IAAI,CAACJ,MAAM,CAACC,OAAO,CAACO,OAAO,CAAC;IACvE,CAAC;IACDC,QAAQ,EAAEA,CAACV,KAAK,EAAEC,MAAiD,KAAK;MACtED,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDS,OAAO,EAAEA,CAACX,KAAK,EAAEC,MAA2B,KAAK;MAC/CD,KAAK,CAACP,KAAK,CAACQ,MAAM,CAACC,OAAO,CAACU,EAAE,CAAC,GAAGX,MAAM,CAACC,OAAO;IACjD,CAAC;IACDW,gBAAgB,EAAEA,CAACb,KAAK,EAAEC,MAAiE,KAAK;MAC9F,MAAM;QAAEa,MAAM;QAAEC;MAAO,CAAC,GAAGd,MAAM,CAACC,OAAO;MACzC,IAAIF,KAAK,CAACP,KAAK,CAACqB,MAAM,CAAC,EAAE;QACvBd,KAAK,CAACP,KAAK,CAACqB,MAAM,CAAC,CAACC,MAAM,GAAGA,MAAM;MACrC;IACF,CAAC;IACDC,UAAU,EAAEA,CAAChB,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACDe,QAAQ,EAAEA,CAACjB,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,gBAAgB;EAChBI,WAAW;EACXC,UAAU;EACVE,WAAW;EACXE,UAAU;EACVE,QAAQ;EACRC,OAAO;EACPE,gBAAgB;EAChBG,UAAU;EACVC;AACF,CAAC,GAAGrB,SAAS,CAACsB,OAAO;AAErB,eAAetB,SAAS,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}