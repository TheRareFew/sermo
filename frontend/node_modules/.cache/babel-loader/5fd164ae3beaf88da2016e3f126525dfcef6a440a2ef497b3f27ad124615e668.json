{"ast":null,"code":"import { api } from './base';\nexport const searchChannels = async query => {\n  const response = await api.get(`/api/v1/search/channels?query=${encodeURIComponent(query)}`);\n  return response.data;\n};\nexport const searchMessages = async query => {\n  const response = await api.get(`/api/v1/search/messages?query=${encodeURIComponent(query)}`);\n  return response.data;\n};\nexport const searchFiles = async query => {\n  const response = await api.get(`/api/v1/search/files?query=${encodeURIComponent(query)}`);\n  return response.data;\n};\nexport const searchAll = async query => {\n  const [channels, messages, files] = await Promise.all([searchChannels(query), searchMessages(query), searchFiles(query)]);\n  return {\n    channels,\n    messages,\n    files\n  };\n};","map":{"version":3,"names":["api","searchChannels","query","response","get","encodeURIComponent","data","searchMessages","searchFiles","searchAll","channels","messages","files","Promise","all"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/search.ts"],"sourcesContent":["import { api } from './base';\r\nimport { SearchResult, ChannelSearchResult, MessageSearchResult, FileSearchResult } from '../../types/search';\r\n\r\nexport const searchChannels = async (query: string): Promise<ChannelSearchResult[]> => {\r\n  const response = await api.get(`/api/v1/search/channels?query=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const searchMessages = async (query: string): Promise<MessageSearchResult[]> => {\r\n  const response = await api.get(`/api/v1/search/messages?query=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const searchFiles = async (query: string): Promise<FileSearchResult[]> => {\r\n  const response = await api.get(`/api/v1/search/files?query=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const searchAll = async (query: string): Promise<SearchResult> => {\r\n  const [channels, messages, files] = await Promise.all([\r\n    searchChannels(query),\r\n    searchMessages(query),\r\n    searchFiles(query)\r\n  ]);\r\n  return { channels, messages, files };\r\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,QAAQ;AAG5B,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAAa,IAAqC;EACrF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,iCAAiCC,kBAAkB,CAACH,KAAK,CAAC,EAAE,CAAC;EAC5F,OAAOC,QAAQ,CAACG,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOL,KAAa,IAAqC;EACrF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,iCAAiCC,kBAAkB,CAACH,KAAK,CAAC,EAAE,CAAC;EAC5F,OAAOC,QAAQ,CAACG,IAAI;AACtB,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAON,KAAa,IAAkC;EAC/E,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,8BAA8BC,kBAAkB,CAACH,KAAK,CAAC,EAAE,CAAC;EACzF,OAAOC,QAAQ,CAACG,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAOP,KAAa,IAA4B;EACvE,MAAM,CAACQ,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACpDb,cAAc,CAACC,KAAK,CAAC,EACrBK,cAAc,CAACL,KAAK,CAAC,EACrBM,WAAW,CAACN,KAAK,CAAC,CACnB,CAAC;EACF,OAAO;IAAEQ,QAAQ;IAAEC,QAAQ;IAAEC;EAAM,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}