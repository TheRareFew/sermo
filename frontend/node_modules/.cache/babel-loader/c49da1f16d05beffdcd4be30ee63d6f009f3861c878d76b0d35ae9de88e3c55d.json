{"ast":null,"code":"import { getAuthToken } from '../api/auth';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n  }\n  connect() {\n    var _this$socket;\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) {\n      console.log('WebSocket already connected');\n      return;\n    }\n    const token = getAuthToken();\n    if (!token) {\n      console.error('No auth token available for WebSocket connection');\n      return;\n    }\n    const baseWsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n    const wsUrl = `${baseWsUrl}?token=${token}`;\n    console.log('Connecting to WebSocket with URL:', wsUrl);\n    this.socket = new WebSocket(wsUrl);\n    this.socket.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    this.socket.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('WebSocket message received:', message);\n        this.messageHandlers.forEach(handler => handler(message));\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    this.socket.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.socket = null;\n    };\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n  sendMessage(channelId, content) {\n    var _this$socket2;\n    if (((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.readyState) === WebSocket.OPEN) {\n      const message = {\n        type: 'message',\n        channel_id: channelId,\n        content: content\n      };\n      this.socket.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  getChatSocketState() {\n    var _this$socket3;\n    return ((_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.readyState) || WebSocket.CLOSED;\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WebSocketService","constructor","socket","messageHandlers","connect","_this$socket","readyState","WebSocket","OPEN","console","log","token","error","baseWsUrl","process","env","REACT_APP_WS_URL","wsUrl","onopen","onmessage","event","message","JSON","parse","data","forEach","handler","onerror","onclose","disconnect","close","sendMessage","channelId","content","_this$socket2","type","channel_id","send","stringify","onMessage","push","filter","h","getChatSocketState","_this$socket3","CLOSED","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage } from '../../types';\r\nimport { getAuthToken } from '../api/auth';\r\n\r\nclass WebSocketService {\r\n  private socket: WebSocket | null = null;\r\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n\r\n  connect() {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      console.log('WebSocket already connected');\r\n      return;\r\n    }\r\n\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      console.error('No auth token available for WebSocket connection');\r\n      return;\r\n    }\r\n\r\n    const baseWsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\r\n    const wsUrl = `${baseWsUrl}?token=${token}`;\r\n    console.log('Connecting to WebSocket with URL:', wsUrl);\r\n    \r\n    this.socket = new WebSocket(wsUrl);\r\n\r\n    this.socket.onopen = () => {\r\n      console.log('WebSocket connected');\r\n    };\r\n\r\n    this.socket.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data) as WebSocketMessage;\r\n        console.log('WebSocket message received:', message);\r\n        this.messageHandlers.forEach(handler => handler(message));\r\n      } catch (error) {\r\n        console.error('Error parsing WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    this.socket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n\r\n    this.socket.onclose = () => {\r\n      console.log('WebSocket disconnected');\r\n      this.socket = null;\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.close();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(channelId: string, content: string) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      const message = {\r\n        type: 'message',\r\n        channel_id: channelId,\r\n        content: content\r\n      };\r\n      this.socket.send(JSON.stringify(message));\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n    }\r\n  }\r\n\r\n  onMessage(handler: (message: WebSocketMessage) => void) {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  getChatSocketState() {\r\n    return this.socket?.readyState || WebSocket.CLOSED;\r\n  }\r\n}\r\n\r\nconst wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}