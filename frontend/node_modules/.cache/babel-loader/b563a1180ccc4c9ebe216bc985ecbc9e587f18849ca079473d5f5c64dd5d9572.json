{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, setError } from '../../../store/chat/chatSlice';\nimport { setMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport WebSocketService from '../../../services/websocket';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { store } from '../../../store';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\n// Constants\n_c15 = SearchContainer;\nconst PAGE_SIZE = 50;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n  const lastMessageTimestamp = useRef(null);\n  const pollingInterval = useRef(null);\n  const pendingMessageSelectionRef = useRef(null);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    const user = store.getState().auth.user;\n    const token = store.getState().auth.token;\n    if (user && token) {\n      console.log('User is authenticated, connecting to WebSocket');\n      WebSocketService.connect();\n    } else {\n      console.log('User is not authenticated, skipping WebSocket connection');\n    }\n\n    // Cleanup on unmount\n    return () => {\n      WebSocketService.disconnect();\n    };\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]);\n\n  // Handle channel initialization and WebSocket subscription\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const initializeChannel = async () => {\n      try {\n        // Get channel users\n        const channelUsers = await getChannelUsers(activeChannelId);\n        const usersObject = channelUsers.reduce((acc, user) => ({\n          ...acc,\n          [user.id]: user\n        }), {});\n        dispatch(setUsers(usersObject));\n\n        // Get initial messages\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = transformMessagesInChunks(messages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n\n        // Join WebSocket channel\n        WebSocketService.joinChannel(activeChannelId);\n\n        // Resolve message loading promise if it exists\n        if (messageLoadingRef.current) {\n          messageLoadingRef.current.resolve();\n          messageLoadingRef.current = null;\n        }\n\n        // Handle any pending message selection\n        if (pendingMessageSelectionRef.current) {\n          setSelectedMessageId(pendingMessageSelectionRef.current);\n          pendingMessageSelectionRef.current = null;\n        }\n      } catch (error) {\n        console.error('Failed to initialize channel:', error);\n        dispatch(setError('Failed to initialize channel'));\n        messageLoadingRef.current = null;\n        pendingMessageSelectionRef.current = null;\n      }\n    };\n    initializeChannel();\n\n    // Cleanup: leave WebSocket channel when switching channels\n    return () => {\n      WebSocketService.leaveChannel(activeChannelId);\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search error:', error);\n      setSearchError('Failed to search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle search result selection\n  const handleSelectChannel = channelId => {\n    dispatch(setActiveChannel(channelId));\n    setSearchResults(null);\n  };\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = messages => {\n    const mainMessages = [];\n    const repliesByParentId = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n    return mainMessages;\n  };\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      // Switch to the channel if needed\n      if (channelId !== activeChannelId) {\n        // Get messages first\n        const messages = await getChannelMessages(channelId, PAGE_SIZE);\n        const transformedMessages = transformMessagesInChunks(messages);\n\n        // Switch channel and update messages atomically\n        dispatch(setActiveChannel(channelId));\n        dispatch(setMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // Wait for next render to ensure messages are in store\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n\n      // Now set the selected message\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n    } catch (error) {\n      console.error('Error selecting message:', error);\n    }\n  };\n  const handleSelectFile = fileId => {\n    // TODO: Implement file selection\n    console.log('Selected file:', fileId);\n    setSearchResults(null);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort channels by type\n  const sortedChannels = useMemo(() => {\n    return [...channels].sort((a, b) => a.name.localeCompare(b.name));\n  }, [channels]);\n  const publicChannels = useMemo(() => sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message), [sortedChannels]);\n  const privateChannels = useMemo(() => sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message), [sortedChannels]);\n  const directMessages = useMemo(() => sortedChannels.filter(channel => channel.is_direct_message), [sortedChannels]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async channelId => {\n    if (channelId === activeChannelId) return;\n    try {\n      console.log('[DEBUG] Switching to channel:', channelId);\n\n      // Set the active channel\n      dispatch(setActiveChannel(channelId));\n\n      // Clear messages for the new channel\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n\n      // The rest of the initialization will be handled by the useEffect\n    } catch (error) {\n      console.error('[DEBUG] Error switching channels:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    }\n  }, [activeChannelId, dispatch]);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: false,\n            isPublic: true,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: false,\n            isPublic: false,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: true,\n            isPublic: false,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: activeChannel && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: activeChannel.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n            children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n              children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                onSearch: handleSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 19\n              }, this), isSearching && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Searching...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 35\n              }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n                results: searchResults,\n                isLoading: isSearching,\n                onClose: () => setSearchResults(null),\n                onSelectChannel: channelId => {\n                  dispatch(setActiveChannel(channelId));\n                  setSearchResults(null);\n                },\n                onSelectMessage: handleSelectMessage,\n                onSelectFile: fileId => {\n                  // TODO: Implement file selection\n                  console.log('Selected file:', fileId);\n                  setSearchResults(null);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n              onClick: () => setIsSettingsOpen(true),\n              children: \"Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n              onClick: handleLogout,\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"Iu7s/e5KxRjzlkHlkB6sBvhMLoo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","setError","setMessages","transformMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","getChannels","getChannelUsers","getChannelMessages","searchAll","WebSocketService","ChannelSettings","store","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","PAGE_SIZE","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","lastMessageTimestamp","pollingInterval","pendingMessageSelectionRef","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","channelMessages","messages","messagesByChannel","transformMessagesInChunks","map","msg","user","getState","auth","token","console","log","connect","disconnect","fetchInitialData","fetchedChannels","length","firstChannelId","channelUsers","usersObject","reduce","acc","initializeChannel","transformedMessages","channelId","joinChannel","messageLoadingRef","current","resolve","leaveChannel","handleSearch","query","trim","results","handleSelectChannel","organizeMessagesAndReplies","mainMessages","repliesByParentId","forEach","parentId","push","replies","replyCount","repliesLoaded","handleSelectMessage","messageId","Promise","setTimeout","handleSelectFile","fileId","handleLogout","sortedChannels","sort","a","b","name","localeCompare","publicChannels","filter","is_public","is_direct_message","privateChannels","directMessages","handleChannelSelect","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","status","onSearch","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage\n} from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport WebSocketService from '../../../services/websocket';\nimport { \n  RootState, \n  Channel, \n  User, \n  Message, \n  SearchResult,\n  UserStatus,\n  RawMessage,\n  StoreMessage\n} from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\n// Constants\nconst PAGE_SIZE = 50;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  const lastMessageTimestamp = useRef<number | null>(null);\n  const pollingInterval = useRef<NodeJS.Timeout | null>(null);\n  const pendingMessageSelectionRef = useRef<string | null>(null);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    const user = store.getState().auth.user;\n    const token = store.getState().auth.token;\n\n    if (user && token) {\n      console.log('User is authenticated, connecting to WebSocket');\n      WebSocketService.connect();\n    } else {\n      console.log('User is not authenticated, skipping WebSocket connection');\n    }\n\n    // Cleanup on unmount\n    return () => {\n      WebSocketService.disconnect();\n    };\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]);\n\n  // Handle channel initialization and WebSocket subscription\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const initializeChannel = async () => {\n      try {\n        // Get channel users\n        const channelUsers = await getChannelUsers(activeChannelId);\n        const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n          ...acc,\n          [user.id]: user\n        }), {});\n        dispatch(setUsers(usersObject));\n\n        // Get initial messages\n        const messages = await getChannelMessages(activeChannelId, PAGE_SIZE);\n        if (messages.length > 0) {\n          const transformedMessages = transformMessagesInChunks(messages);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n\n        // Join WebSocket channel\n        WebSocketService.joinChannel(activeChannelId);\n\n        // Resolve message loading promise if it exists\n        if (messageLoadingRef.current) {\n          messageLoadingRef.current.resolve();\n          messageLoadingRef.current = null;\n        }\n\n        // Handle any pending message selection\n        if (pendingMessageSelectionRef.current) {\n          setSelectedMessageId(pendingMessageSelectionRef.current);\n          pendingMessageSelectionRef.current = null;\n        }\n      } catch (error) {\n        console.error('Failed to initialize channel:', error);\n        dispatch(setError('Failed to initialize channel'));\n        messageLoadingRef.current = null;\n        pendingMessageSelectionRef.current = null;\n      }\n    };\n\n    initializeChannel();\n\n    // Cleanup: leave WebSocket channel when switching channels\n    return () => {\n      WebSocketService.leaveChannel(activeChannelId);\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search error:', error);\n      setSearchError('Failed to search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle search result selection\n  const handleSelectChannel = (channelId: string) => {\n    dispatch(setActiveChannel(channelId));\n    setSearchResults(null);\n  };\n\n  // Helper function to organize messages and their replies\n  const organizeMessagesAndReplies = (messages: StoreMessage[]) => {\n    const mainMessages: StoreMessage[] = [];\n    const repliesByParentId: { [key: string]: StoreMessage[] } = {};\n\n    // Separate messages into main messages and replies\n    messages.forEach(msg => {\n      if (msg.parentId) {\n        // This is a reply\n        if (!repliesByParentId[msg.parentId]) {\n          repliesByParentId[msg.parentId] = [];\n        }\n        repliesByParentId[msg.parentId].push(msg);\n      } else {\n        // This is a main message\n        mainMessages.push(msg);\n      }\n    });\n\n    // Attach replies to their parent messages\n    mainMessages.forEach(msg => {\n      if (repliesByParentId[msg.id]) {\n        msg.replies = repliesByParentId[msg.id];\n        msg.replyCount = repliesByParentId[msg.id].length;\n        msg.repliesLoaded = true;\n      }\n    });\n\n    return mainMessages;\n  };\n\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      // Switch to the channel if needed\n      if (channelId !== activeChannelId) {\n        // Get messages first\n        const messages = await getChannelMessages(channelId, PAGE_SIZE);\n        const transformedMessages = transformMessagesInChunks(messages);\n        \n        // Switch channel and update messages atomically\n        dispatch(setActiveChannel(channelId));\n        dispatch(setMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n        \n        // Wait for next render to ensure messages are in store\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n      \n      // Now set the selected message\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n    } catch (error) {\n      console.error('Error selecting message:', error);\n    }\n  };\n\n  const handleSelectFile = (fileId: string) => {\n    // TODO: Implement file selection\n    console.log('Selected file:', fileId);\n    setSearchResults(null);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort channels by type\n  const sortedChannels = useMemo(() => {\n    return [...channels].sort((a, b) => a.name.localeCompare(b.name));\n  }, [channels]);\n\n  const publicChannels = useMemo(() => \n    sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  const privateChannels = useMemo(() => \n    sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  const directMessages = useMemo(() => \n    sortedChannels.filter(channel => channel.is_direct_message),\n    [sortedChannels]\n  );\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async (channelId: string) => {\n    if (channelId === activeChannelId) return;\n\n    try {\n      console.log('[DEBUG] Switching to channel:', channelId);\n\n      // Set the active channel\n      dispatch(setActiveChannel(channelId));\n\n      // Clear messages for the new channel\n      dispatch(setMessages({ channelId, messages: [] }));\n\n      // The rest of the initialization will be handled by the useEffect\n    } catch (error) {\n      console.error('[DEBUG] Error switching channels:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n    }\n  }, [activeChannelId, dispatch]);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton onClick={() => setIsCreateModalOpen(true)}>\n              +\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {/* Public Channels */}\n          <ChannelGroup>\n            <GroupTitle>Public</GroupTitle>\n            {publicChannels.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={false}\n                isPublic={true}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n\n          {/* Private Channels */}\n          <ChannelGroup>\n            <GroupTitle>Private</GroupTitle>\n            {privateChannels.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={false}\n                isPublic={false}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n\n          {/* Direct Messages */}\n          <ChannelGroup>\n            <GroupTitle>Direct Messages</GroupTitle>\n            {directMessages.map(channel => (\n              <ChannelListItem\n                key={channel.id}\n                name={channel.name}\n                isActive={channel.id === activeChannelId}\n                hasUnread={channel.unreadCount > 0}\n                isDirect={true}\n                isPublic={false}\n                onClick={() => handleChannelSelect(channel.id)}\n              />\n            ))}\n          </ChannelGroup>\n        </ChannelList>\n\n        <UserList>\n          <h2>Users</h2>\n          {Object.values(users).map(user => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n\n      <ChatArea>\n        <ChatHeader>\n          {activeChannel && (\n            <>\n              <h1>{activeChannel.name}</h1>\n              <ChannelActions>\n                <SearchContainer>\n                  <SearchBar onSearch={handleSearch} />\n                  {isSearching && <div>Searching...</div>}\n                  {searchResults && (\n                    <SearchResults\n                      results={searchResults}\n                      isLoading={isSearching}\n                      onClose={() => setSearchResults(null)}\n                      onSelectChannel={(channelId) => {\n                        dispatch(setActiveChannel(channelId));\n                        setSearchResults(null);\n                      }}\n                      onSelectMessage={handleSelectMessage}\n                      onSelectFile={(fileId) => {\n                        // TODO: Implement file selection\n                        console.log('Selected file:', fileId);\n                        setSearchResults(null);\n                      }}\n                    />\n                  )}\n                </SearchContainer>\n                <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                  Settings\n                </SettingsButton>\n                <LogoutButton onClick={handleLogout}>\n                  Logout\n                </LogoutButton>\n              </ChannelActions>\n            </>\n          )}\n        </ChatHeader>\n\n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}