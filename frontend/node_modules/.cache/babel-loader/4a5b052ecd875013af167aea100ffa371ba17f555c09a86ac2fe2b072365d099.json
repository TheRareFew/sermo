{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  activeChannelId: null,\n  channels: [],\n  users: {},\n  loading: false,\n  error: null\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setActiveChannel: (state, action) => {\n      state.activeChannelId = action.payload;\n    },\n    setChannels: (state, action) => {\n      state.channels = action.payload;\n    },\n    addChannel: (state, action) => {\n      state.channels.push(action.payload);\n    },\n    removeChannel: (state, action) => {\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\n      if (state.activeChannelId === action.payload) {\n        state.activeChannelId = null;\n      }\n    },\n    setUsers: (state, action) => {\n      const users = {};\n      action.payload.forEach(user => {\n        users[user.id] = user;\n      });\n      state.users = users;\n    },\n    updateUserStatus: (state, action) => {\n      if (state.users[action.payload.userId]) {\n        state.users[action.payload.userId].status = action.payload.status;\n        state.users[action.payload.userId].last_seen = new Date().toISOString();\n      }\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setActiveChannel,\n  setChannels,\n  addChannel,\n  removeChannel,\n  setUsers,\n  updateUserStatus,\n  setLoading,\n  setError\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","activeChannelId","channels","users","loading","error","chatSlice","name","reducers","setActiveChannel","state","action","payload","setChannels","addChannel","push","removeChannel","filter","channel","id","setUsers","forEach","user","updateUserStatus","userId","status","last_seen","Date","toISOString","setLoading","setError","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/chat/chatSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Channel, User } from '../../types';\r\n\r\ninterface ChatState {\r\n  activeChannelId: number | null;\r\n  channels: Channel[];\r\n  users: Record<number, User>;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: ChatState = {\r\n  activeChannelId: null,\r\n  channels: [],\r\n  users: {},\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState,\r\n  reducers: {\r\n    setActiveChannel: (state, action: PayloadAction<number>) => {\r\n      state.activeChannelId = action.payload;\r\n    },\r\n    setChannels: (state, action: PayloadAction<Channel[]>) => {\r\n      state.channels = action.payload;\r\n    },\r\n    addChannel: (state, action: PayloadAction<Channel>) => {\r\n      state.channels.push(action.payload);\r\n    },\r\n    removeChannel: (state, action: PayloadAction<number>) => {\r\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\r\n      if (state.activeChannelId === action.payload) {\r\n        state.activeChannelId = null;\r\n      }\r\n    },\r\n    setUsers: (state, action: PayloadAction<User[]>) => {\r\n      const users: Record<number, User> = {};\r\n      action.payload.forEach(user => {\r\n        users[user.id] = user;\r\n      });\r\n      state.users = users;\r\n    },\r\n    updateUserStatus: (state, action: PayloadAction<{ userId: number; status: User['status'] }>) => {\r\n      if (state.users[action.payload.userId]) {\r\n        state.users[action.payload.userId].status = action.payload.status;\r\n        state.users[action.payload.userId].last_seen = new Date().toISOString();\r\n      }\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setActiveChannel,\r\n  setChannels,\r\n  addChannel,\r\n  removeChannel,\r\n  setUsers,\r\n  updateUserStatus,\r\n  setLoading,\r\n  setError,\r\n} = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAW7D,MAAMC,YAAuB,GAAG;EAC9BC,eAAe,EAAE,IAAI;EACrBC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,CAAC,CAAC;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZP,YAAY;EACZQ,QAAQ,EAAE;IACRC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MAC1DD,KAAK,CAACT,eAAe,GAAGU,MAAM,CAACC,OAAO;IACxC,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAAgC,KAAK;MACxDD,KAAK,CAACR,QAAQ,GAAGS,MAAM,CAACC,OAAO;IACjC,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACR,QAAQ,CAACa,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC;IACDI,aAAa,EAAEA,CAACN,KAAK,EAAEC,MAA6B,KAAK;MACvDD,KAAK,CAACR,QAAQ,GAAGQ,KAAK,CAACR,QAAQ,CAACe,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAAC;MAChF,IAAIF,KAAK,CAACT,eAAe,KAAKU,MAAM,CAACC,OAAO,EAAE;QAC5CF,KAAK,CAACT,eAAe,GAAG,IAAI;MAC9B;IACF,CAAC;IACDmB,QAAQ,EAAEA,CAACV,KAAK,EAAEC,MAA6B,KAAK;MAClD,MAAMR,KAA2B,GAAG,CAAC,CAAC;MACtCQ,MAAM,CAACC,OAAO,CAACS,OAAO,CAACC,IAAI,IAAI;QAC7BnB,KAAK,CAACmB,IAAI,CAACH,EAAE,CAAC,GAAGG,IAAI;MACvB,CAAC,CAAC;MACFZ,KAAK,CAACP,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDoB,gBAAgB,EAAEA,CAACb,KAAK,EAAEC,MAAiE,KAAK;MAC9F,IAAID,KAAK,CAACP,KAAK,CAACQ,MAAM,CAACC,OAAO,CAACY,MAAM,CAAC,EAAE;QACtCd,KAAK,CAACP,KAAK,CAACQ,MAAM,CAACC,OAAO,CAACY,MAAM,CAAC,CAACC,MAAM,GAAGd,MAAM,CAACC,OAAO,CAACa,MAAM;QACjEf,KAAK,CAACP,KAAK,CAACQ,MAAM,CAACC,OAAO,CAACY,MAAM,CAAC,CAACE,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACzE;IACF,CAAC;IACDC,UAAU,EAAEA,CAACnB,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACDkB,QAAQ,EAAEA,CAACpB,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,gBAAgB;EAChBI,WAAW;EACXC,UAAU;EACVE,aAAa;EACbI,QAAQ;EACRG,gBAAgB;EAChBM,UAAU;EACVC;AACF,CAAC,GAAGxB,SAAS,CAACyB,OAAO;AAErB,eAAezB,SAAS,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}