{"ast":null,"code":"export const transformMessage = message => {\n  console.log('Transforming message:', message);\n\n  // Ensure reactions is an array\n  const reactions = Array.isArray(message.reactions) ? message.reactions : [];\n  console.log('Transformed reactions:', reactions);\n\n  // Handle both Message and RawMessage types with proper type guards\n  const getChannelId = () => {\n    if ('channel_id' in message && message.channel_id) return message.channel_id;\n    if ('channelId' in message && message.channelId) return message.channelId;\n    return '';\n  };\n  const getUserId = () => {\n    if ('sender_id' in message && message.sender_id) return message.sender_id;\n    if ('userId' in message && message.userId) return message.userId;\n    return '';\n  };\n  const getCreatedAt = () => {\n    if ('created_at' in message && message.created_at) return message.created_at;\n    if ('createdAt' in message && message.createdAt) return message.createdAt;\n    return new Date().toISOString();\n  };\n  const getUpdatedAt = createdAt => {\n    if ('updated_at' in message && message.updated_at) return message.updated_at;\n    if ('updatedAt' in message && message.updatedAt) return message.updatedAt;\n    return createdAt;\n  };\n  const getParentId = () => {\n    if ('parent_id' in message && message.parent_id) return message.parent_id;\n    if ('parentId' in message && message.parentId) return message.parentId;\n    return undefined;\n  };\n  const getReplyCount = () => {\n    if ('reply_count' in message && typeof message.reply_count === 'number') return message.reply_count;\n    if ('replyCount' in message && typeof message.replyCount === 'number') return message.replyCount;\n    return 0;\n  };\n  const createdAt = getCreatedAt();\n  return {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: getChannelId().toString(),\n    userId: getUserId().toString(),\n    createdAt,\n    updatedAt: getUpdatedAt(createdAt),\n    parentId: getParentId(),\n    replyCount: getReplyCount(),\n    isExpanded: 'isExpanded' in message ? !!message.isExpanded : false,\n    repliesLoaded: 'repliesLoaded' in message ? !!message.repliesLoaded : false,\n    replies: 'replies' in message && Array.isArray(message.replies) ? message.replies : [],\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : []\n  };\n};","map":{"version":3,"names":["transformMessage","message","console","log","reactions","Array","isArray","getChannelId","channel_id","channelId","getUserId","sender_id","userId","getCreatedAt","created_at","createdAt","Date","toISOString","getUpdatedAt","updated_at","updatedAt","getParentId","parent_id","parentId","undefined","getReplyCount","reply_count","replyCount","id","toString","content","isExpanded","repliesLoaded","replies","attachments"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { RawMessage, StoreMessage, Reaction, Message } from '../types';\n\nexport const transformMessage = (message: RawMessage | Message): StoreMessage => {\n  console.log('Transforming message:', message);\n  \n  // Ensure reactions is an array\n  const reactions = Array.isArray(message.reactions) ? message.reactions : [];\n  console.log('Transformed reactions:', reactions);\n  \n  // Handle both Message and RawMessage types with proper type guards\n  const getChannelId = (): string => {\n    if ('channel_id' in message && message.channel_id) return message.channel_id;\n    if ('channelId' in message && message.channelId) return message.channelId;\n    return '';\n  };\n  \n  const getUserId = (): string => {\n    if ('sender_id' in message && message.sender_id) return message.sender_id;\n    if ('userId' in message && message.userId) return message.userId;\n    return '';\n  };\n  \n  const getCreatedAt = (): string => {\n    if ('created_at' in message && message.created_at) return message.created_at;\n    if ('createdAt' in message && message.createdAt) return message.createdAt;\n    return new Date().toISOString();\n  };\n  \n  const getUpdatedAt = (createdAt: string): string => {\n    if ('updated_at' in message && message.updated_at) return message.updated_at;\n    if ('updatedAt' in message && message.updatedAt) return message.updatedAt;\n    return createdAt;\n  };\n  \n  const getParentId = (): string | undefined => {\n    if ('parent_id' in message && message.parent_id) return message.parent_id;\n    if ('parentId' in message && message.parentId) return message.parentId;\n    return undefined;\n  };\n  \n  const getReplyCount = (): number => {\n    if ('reply_count' in message && typeof message.reply_count === 'number') return message.reply_count;\n    if ('replyCount' in message && typeof message.replyCount === 'number') return message.replyCount;\n    return 0;\n  };\n  \n  const createdAt = getCreatedAt();\n  \n  return {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: getChannelId().toString(),\n    userId: getUserId().toString(),\n    createdAt,\n    updatedAt: getUpdatedAt(createdAt),\n    parentId: getParentId(),\n    replyCount: getReplyCount(),\n    isExpanded: 'isExpanded' in message ? !!message.isExpanded : false,\n    repliesLoaded: 'repliesLoaded' in message ? !!message.repliesLoaded : false,\n    replies: 'replies' in message && Array.isArray(message.replies) ? message.replies : [],\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : []\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}