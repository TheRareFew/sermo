{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  channels: [],\n  activeChannel: null,\n  loading: false,\n  error: null\n};\nconst channelsSlice = createSlice({\n  name: 'channels',\n  initialState,\n  reducers: {\n    fetchChannelsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchChannelsSuccess: (state, action) => {\n      state.channels = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    fetchChannelsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setActiveChannel: (state, action) => {\n      state.activeChannel = action.payload;\n    },\n    updateChannelUnreadCount: (state, action) => {\n      const channel = state.channels.find(c => c.id === action.payload.channelId);\n      if (channel) {\n        channel.unreadCount = action.payload.count;\n      }\n    },\n    addChannel: (state, action) => {\n      state.channels.push(action.payload);\n    },\n    removeChannel: (state, action) => {\n      var _state$activeChannel;\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\n      if (((_state$activeChannel = state.activeChannel) === null || _state$activeChannel === void 0 ? void 0 : _state$activeChannel.id) === action.payload) {\n        state.activeChannel = null;\n      }\n    }\n  }\n});\nexport const {\n  fetchChannelsStart,\n  fetchChannelsSuccess,\n  fetchChannelsFailure,\n  setActiveChannel,\n  updateChannelUnreadCount,\n  addChannel,\n  removeChannel\n} = channelsSlice.actions;\nexport default channelsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","channels","activeChannel","loading","error","channelsSlice","name","reducers","fetchChannelsStart","state","fetchChannelsSuccess","action","payload","fetchChannelsFailure","setActiveChannel","updateChannelUnreadCount","channel","find","c","id","channelId","unreadCount","count","addChannel","push","removeChannel","_state$activeChannel","filter","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/channels/channelsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { ChannelsState, Channel } from '../types';\r\n\r\nconst initialState: ChannelsState = {\r\n  channels: [],\r\n  activeChannel: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst channelsSlice = createSlice({\r\n  name: 'channels',\r\n  initialState,\r\n  reducers: {\r\n    fetchChannelsStart: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    fetchChannelsSuccess: (state, action: PayloadAction<Channel[]>) => {\r\n      state.channels = action.payload;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    fetchChannelsFailure: (state, action: PayloadAction<string>) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    setActiveChannel: (state, action: PayloadAction<Channel>) => {\r\n      state.activeChannel = action.payload;\r\n    },\r\n    updateChannelUnreadCount: (state, action: PayloadAction<{ channelId: number; count: number }>) => {\r\n      const channel = state.channels.find(c => c.id === action.payload.channelId);\r\n      if (channel) {\r\n        channel.unreadCount = action.payload.count;\r\n      }\r\n    },\r\n    addChannel: (state, action: PayloadAction<Channel>) => {\r\n      state.channels.push(action.payload);\r\n    },\r\n    removeChannel: (state, action: PayloadAction<number>) => {\r\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\r\n      if (state.activeChannel?.id === action.payload) {\r\n        state.activeChannel = null;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchChannelsStart,\r\n  fetchChannelsSuccess,\r\n  fetchChannelsFailure,\r\n  setActiveChannel,\r\n  updateChannelUnreadCount,\r\n  addChannel,\r\n  removeChannel,\r\n} = channelsSlice.actions;\r\n\r\nexport default channelsSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAG7D,MAAMC,YAA2B,GAAG;EAClCC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE,IAAI;EACnBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,aAAa,GAAGN,WAAW,CAAC;EAChCO,IAAI,EAAE,UAAU;EAChBN,YAAY;EACZO,QAAQ,EAAE;IACRC,kBAAkB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACDM,oBAAoB,EAAEA,CAACD,KAAK,EAAEE,MAAgC,KAAK;MACjEF,KAAK,CAACR,QAAQ,GAAGU,MAAM,CAACC,OAAO;MAC/BH,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACDS,oBAAoB,EAAEA,CAACJ,KAAK,EAAEE,MAA6B,KAAK;MAC9DF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,gBAAgB,EAAEA,CAACL,KAAK,EAAEE,MAA8B,KAAK;MAC3DF,KAAK,CAACP,aAAa,GAAGS,MAAM,CAACC,OAAO;IACtC,CAAC;IACDG,wBAAwB,EAAEA,CAACN,KAAK,EAAEE,MAA2D,KAAK;MAChG,MAAMK,OAAO,GAAGP,KAAK,CAACR,QAAQ,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAACQ,SAAS,CAAC;MAC3E,IAAIJ,OAAO,EAAE;QACXA,OAAO,CAACK,WAAW,GAAGV,MAAM,CAACC,OAAO,CAACU,KAAK;MAC5C;IACF,CAAC;IACDC,UAAU,EAAEA,CAACd,KAAK,EAAEE,MAA8B,KAAK;MACrDF,KAAK,CAACR,QAAQ,CAACuB,IAAI,CAACb,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC;IACDa,aAAa,EAAEA,CAAChB,KAAK,EAAEE,MAA6B,KAAK;MAAA,IAAAe,oBAAA;MACvDjB,KAAK,CAACR,QAAQ,GAAGQ,KAAK,CAACR,QAAQ,CAAC0B,MAAM,CAACX,OAAO,IAAIA,OAAO,CAACG,EAAE,KAAKR,MAAM,CAACC,OAAO,CAAC;MAChF,IAAI,EAAAc,oBAAA,GAAAjB,KAAK,CAACP,aAAa,cAAAwB,oBAAA,uBAAnBA,oBAAA,CAAqBP,EAAE,MAAKR,MAAM,CAACC,OAAO,EAAE;QAC9CH,KAAK,CAACP,aAAa,GAAG,IAAI;MAC5B;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXM,kBAAkB;EAClBE,oBAAoB;EACpBG,oBAAoB;EACpBC,gBAAgB;EAChBC,wBAAwB;EACxBQ,UAAU;EACVE;AACF,CAAC,GAAGpB,aAAa,CAACuB,OAAO;AAEzB,eAAevB,aAAa,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}