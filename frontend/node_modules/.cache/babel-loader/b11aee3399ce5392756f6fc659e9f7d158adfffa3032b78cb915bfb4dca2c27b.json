{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    fetchMessagesStart: state => {\n      console.log('Starting message fetch');\n      state.loading = true;\n      state.error = null;\n    },\n    fetchMessagesSuccess: (state, action) => {\n      console.log('Message fetch success:', action.payload);\n      // Transform messages to StoreMessage format and sort by createdAt\n      const transformedMessages = action.payload.messages.map(msg => ({\n        id: msg.id,\n        content: msg.content,\n        channelId: msg.channelId,\n        userId: msg.userId,\n        reactions: msg.reactions || [],\n        attachments: msg.attachments || [],\n        createdAt: msg.createdAt,\n        updatedAt: msg.updatedAt\n      }));\n\n      // Sort messages by createdAt in ascending order (oldest first)\n      const sortedMessages = transformedMessages.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n      state.messagesByChannel[action.payload.channelId] = sortedMessages;\n      state.loading = false;\n      state.error = null;\n      console.log('Updated message state:', state.messagesByChannel);\n    },\n    fetchMessagesFailure: (state, action) => {\n      console.log('Message fetch failed:', action.payload);\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addMessage: (state, action) => {\n      console.log('Adding message:', action.payload);\n      const {\n        channelId\n      } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      // Check if message already exists\n      const existingMessageIndex = state.messagesByChannel[channelId].findIndex(msg => msg.id === action.payload.id);\n      if (existingMessageIndex === -1) {\n        // Add new message at the end (it's the newest)\n        state.messagesByChannel[channelId].push(action.payload);\n        // Sort messages by createdAt\n        state.messagesByChannel[channelId].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n        console.log('Updated message state after add:', state.messagesByChannel);\n      } else {\n        console.log('Message already exists:', action.payload);\n      }\n    },\n    updateMessage: (state, action) => {\n      const {\n        channelId,\n        id\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex(msg => msg.id === id);\n        if (index !== -1) {\n          messages[index] = action.payload;\n        }\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter(msg => msg.id !== messageId);\n      }\n    },\n    addReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reaction\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          // Check if reaction already exists\n          const existingReactionIndex = message.reactions.findIndex(r => r.id === reaction.id || r.emoji === reaction.emoji && r.userId === reaction.userId);\n          if (existingReactionIndex === -1) {\n            message.reactions.push(reaction);\n          }\n        }\n      }\n    },\n    removeReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reactionId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.reactions = message.reactions.filter(reaction => reaction.id !== reactionId);\n        }\n      }\n    }\n  }\n});\nexport const {\n  fetchMessagesStart,\n  fetchMessagesSuccess,\n  fetchMessagesFailure,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","fetchMessagesStart","state","console","log","fetchMessagesSuccess","action","payload","transformedMessages","messages","map","msg","id","content","channelId","userId","reactions","attachments","createdAt","updatedAt","sortedMessages","sort","a","b","Date","getTime","fetchMessagesFailure","addMessage","existingMessageIndex","findIndex","push","updateMessage","index","deleteMessage","messageId","filter","addReaction","reaction","message","find","existingReactionIndex","r","emoji","removeReaction","reactionId","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MessagesState, Message, Reaction, StoreMessage } from '../types';\n\nconst initialState: MessagesState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null,\n};\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    fetchMessagesStart: (state) => {\n      console.log('Starting message fetch');\n      state.loading = true;\n      state.error = null;\n    },\n    fetchMessagesSuccess: (state, action: PayloadAction<{ channelId: string; messages: Message[] }>) => {\n      console.log('Message fetch success:', action.payload);\n      // Transform messages to StoreMessage format and sort by createdAt\n      const transformedMessages: StoreMessage[] = action.payload.messages.map(msg => ({\n        id: msg.id,\n        content: msg.content,\n        channelId: msg.channelId,\n        userId: msg.userId,\n        reactions: msg.reactions || [],\n        attachments: msg.attachments || [],\n        createdAt: msg.createdAt,\n        updatedAt: msg.updatedAt\n      }));\n\n      // Sort messages by createdAt in ascending order (oldest first)\n      const sortedMessages = transformedMessages.sort((a, b) => \n        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n      );\n\n      state.messagesByChannel[action.payload.channelId] = sortedMessages;\n      state.loading = false;\n      state.error = null;\n      console.log('Updated message state:', state.messagesByChannel);\n    },\n    fetchMessagesFailure: (state, action: PayloadAction<string>) => {\n      console.log('Message fetch failed:', action.payload);\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addMessage: (state, action: PayloadAction<StoreMessage>) => {\n      console.log('Adding message:', action.payload);\n      const { channelId } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      // Check if message already exists\n      const existingMessageIndex = state.messagesByChannel[channelId].findIndex(\n        msg => msg.id === action.payload.id\n      );\n      if (existingMessageIndex === -1) {\n        // Add new message at the end (it's the newest)\n        state.messagesByChannel[channelId].push(action.payload);\n        // Sort messages by createdAt\n        state.messagesByChannel[channelId].sort((a, b) => \n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n        );\n        console.log('Updated message state after add:', state.messagesByChannel);\n      } else {\n        console.log('Message already exists:', action.payload);\n      }\n    },\n    updateMessage: (state, action: PayloadAction<StoreMessage>) => {\n      const { channelId, id } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex(msg => msg.id === id);\n        if (index !== -1) {\n          messages[index] = action.payload;\n        }\n      }\n    },\n    deleteMessage: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter(msg => msg.id !== messageId);\n      }\n    },\n    addReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reaction: Reaction }>) => {\n      const { channelId, messageId, reaction } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          // Check if reaction already exists\n          const existingReactionIndex = message.reactions.findIndex(\n            r => r.id === reaction.id || (r.emoji === reaction.emoji && r.userId === reaction.userId)\n          );\n          if (existingReactionIndex === -1) {\n            message.reactions.push(reaction);\n          }\n        }\n      }\n    },\n    removeReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reactionId: string }>) => {\n      const { channelId, messageId, reactionId } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.reactions = message.reactions.filter(reaction => reaction.id !== reactionId);\n        }\n      }\n    },\n  },\n});\n\nexport const {\n  fetchMessagesStart,\n  fetchMessagesSuccess,\n  fetchMessagesFailure,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  addReaction,\n  removeReaction,\n} = messagesSlice.actions;\n\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}