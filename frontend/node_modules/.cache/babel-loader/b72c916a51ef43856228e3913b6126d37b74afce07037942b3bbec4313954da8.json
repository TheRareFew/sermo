{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers } from '../../../store/chat/chatSlice';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const channels = useSelector(state => state.chat.channels);\n  const users = useSelector(state => state.chat.users);\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    wsService.connect();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle WebSocket messages in a separate useEffect\n  useEffect(() => {\n    const handleMessage = message => {\n      console.log('Received WebSocket message:', message);\n      if (message.type === 'message' && message.message) {\n        try {\n          const {\n            id,\n            content,\n            channel_id,\n            sender_id,\n            created_at\n          } = message.message;\n          if (!id || !content || !channel_id || !sender_id) {\n            console.error('Invalid message format:', message);\n            return;\n          }\n          const transformedMessage = {\n            id: String(id),\n            content: content,\n            channelId: String(channel_id),\n            userId: String(sender_id),\n            reactions: [],\n            attachments: [],\n            createdAt: created_at || new Date().toISOString(),\n            updatedAt: created_at || new Date().toISOString()\n          };\n          console.log('Dispatching transformed message:', transformedMessage);\n          dispatch(addMessage(transformedMessage));\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n    };\n\n    // onMessage returns a cleanup function\n    const cleanup = wsService.onMessage(handleMessage);\n    return cleanup;\n  }, [dispatch]);\n  const handleChannelClick = async channelId => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n      try {\n        const channelUsers = await getChannelUsers(channelId);\n        dispatch(setUsers(channelUsers));\n      } catch (error) {\n        console.error('Failed to fetch channel users:', error);\n      }\n    }\n  };\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n          name: channel.name,\n          isActive: channel.id === activeChannelId,\n          hasUnread: false,\n          isDirect: channel.is_direct_message,\n          onClick: () => handleChannelClick(channel.id)\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        channelId: activeChannelId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"ahMTthPnlJajUgoHt/JRyBoyfkk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c11 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","addMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","wsService","getChannels","getChannelUsers","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","activeChannelId","state","chat","channels","users","activeChannel","find","channel","id","fetchInitialData","fetchedChannels","length","channelUsers","console","connect","disconnect","handleMessage","message","log","type","content","channel_id","sender_id","created_at","transformedMessage","String","channelId","userId","reactions","attachments","createdAt","Date","toISOString","updatedAt","cleanup","onMessage","handleChannelClick","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","map","name","isActive","hasUnread","isDirect","is_direct_message","Object","values","user","username","status","isOpen","onClose","_c11","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport wsService, { WebSocketMessage } from '../../../services/websocket';\nimport { getChannels, getChannelUsers } from '../../../services/api/chat';\nimport { StoreMessage } from '../../../store/types';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  \n  const activeChannelId = useSelector((state: any) => state.chat.activeChannelId);\n  const channels = useSelector((state: any) => state.chat.channels);\n  const users = useSelector((state: any) => state.chat.users);\n  const activeChannel = channels.find((channel: any) => channel.id === activeChannelId);\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    wsService.connect();\n\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle WebSocket messages in a separate useEffect\n  useEffect(() => {\n    const handleMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      if (message.type === 'message' && message.message) {\n        try {\n          const { id, content, channel_id, sender_id, created_at } = message.message;\n          if (!id || !content || !channel_id || !sender_id) {\n            console.error('Invalid message format:', message);\n            return;\n          }\n\n          const transformedMessage: StoreMessage = {\n            id: String(id),\n            content: content,\n            channelId: String(channel_id),\n            userId: String(sender_id),\n            reactions: [],\n            attachments: [],\n            createdAt: created_at || new Date().toISOString(),\n            updatedAt: created_at || new Date().toISOString()\n          };\n\n          console.log('Dispatching transformed message:', transformedMessage);\n          dispatch(addMessage(transformedMessage));\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n    };\n\n    // onMessage returns a cleanup function\n    const cleanup = wsService.onMessage(handleMessage);\n    return cleanup;\n  }, [dispatch]);\n\n  const handleChannelClick = async (channelId: number) => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n      try {\n        const channelUsers = await getChannelUsers(channelId);\n        dispatch(setUsers(channelUsers));\n      } catch (error) {\n        console.error('Failed to fetch channel users:', error);\n      }\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n          {channels.map((channel: any) => (\n            <ChannelListItem\n              key={channel.id}\n              name={channel.name}\n              isActive={channel.id === activeChannelId}\n              hasUnread={false}\n              isDirect={channel.is_direct_message}\n              onClick={() => handleChannelClick(channel.id)}\n            />\n          ))}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: any) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'}</h1>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </ChatHeader>\n        <MessageList channelId={activeChannelId} />\n        <ChatInput>\n          <MessageInput channelId={activeChannelId} />\n        </ChatInput>\n      </ChatArea>\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}