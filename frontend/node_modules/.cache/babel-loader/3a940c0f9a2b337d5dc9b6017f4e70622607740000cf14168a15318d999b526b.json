{"ast":null,"code":"import { apiRequest } from './utils';\n/**\r\n * Uploads a file to the server\r\n * @param file The file to upload\r\n * @param messageId Optional message ID to attach the file to\r\n * @returns Promise<FileResponse>\r\n */\nexport const uploadFile = async (file, messageId) => {\n  console.log(`Uploading file ${file.name}...`);\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (messageId) {\n      formData.append('message_id', messageId);\n    }\n\n    // Use apiRequest but override Content-Type header since we're sending FormData\n    const response = await apiRequest('/files/upload', {\n      method: 'POST',\n      headers: {\n        // Remove Content-Type to let browser set it with boundary\n      },\n      body: formData\n    });\n    console.log('File uploaded successfully:', response);\n    return response;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiRequest","uploadFile","file","messageId","console","log","name","formData","FormData","append","response","method","headers","body","error"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/files.ts"],"sourcesContent":["import { apiRequest } from './utils';\r\n\r\nexport interface FileResponse {\r\n  id: string;\r\n  filename: string;\r\n  file_type: string;\r\n  file_path: string;\r\n  message_id?: string;\r\n  created_at: string;\r\n}\r\n\r\n/**\r\n * Uploads a file to the server\r\n * @param file The file to upload\r\n * @param messageId Optional message ID to attach the file to\r\n * @returns Promise<FileResponse>\r\n */\r\nexport const uploadFile = async (file: File, messageId?: string): Promise<FileResponse> => {\r\n  console.log(`Uploading file ${file.name}...`);\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    if (messageId) {\r\n      formData.append('message_id', messageId);\r\n    }\r\n\r\n    // Use apiRequest but override Content-Type header since we're sending FormData\r\n    const response = await apiRequest<FileResponse>('/files/upload', {\r\n      method: 'POST',\r\n      headers: {\r\n        // Remove Content-Type to let browser set it with boundary\r\n      } as Record<string, string>,\r\n      body: formData,\r\n    });\r\n\r\n    console.log('File uploaded successfully:', response);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,UAAU,QAAQ,SAAS;AAWpC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAU,EAAEC,SAAkB,KAA4B;EACzFC,OAAO,CAACC,GAAG,CAAC,kBAAkBH,IAAI,CAACI,IAAI,KAAK,CAAC;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEP,IAAI,CAAC;IAC7B,IAAIC,SAAS,EAAE;MACbI,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEN,SAAS,CAAC;IAC1C;;IAEA;IACA,MAAMO,QAAQ,GAAG,MAAMV,UAAU,CAAe,eAAe,EAAE;MAC/DW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP;MAAA,CACyB;MAC3BC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEFH,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEK,QAAQ,CAAC;IACpD,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}