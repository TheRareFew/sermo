{"ast":null,"code":"import { apiRequest, API_URL } from './utils';\nconst formatErrorMessage = error => {\n  if (typeof error.detail === 'string') {\n    return error.detail;\n  }\n  return 'An error occurred during authentication';\n};\nconst transformAuthResponse = apiResponse => ({\n  user: apiResponse.user,\n  token: apiResponse.access_token\n});\nexport const login = async credentials => {\n  // Convert credentials to FormData as expected by the backend\n  const formData = new URLSearchParams();\n  formData.append('username', credentials.username);\n  formData.append('password', credentials.password);\n  formData.append('grant_type', 'password');\n  const response = await apiRequest('auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formData.toString(),\n    requiresAuth: false\n  });\n\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', response.access_token);\n  console.log('Stored token:', response.access_token); // Debug log\n  return transformAuthResponse(response);\n};\nexport const signup = async credentials => {\n  const response = await fetch(`${API_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials),\n    credentials: 'include'\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(formatErrorMessage(data));\n  }\n\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', data.access_token);\n  console.log('Stored token:', data.access_token); // Debug log\n  return transformAuthResponse(data);\n};\nexport const forgotPassword = async email => {\n  await apiRequest('/auth/forgot-password', {\n    method: 'POST',\n    body: JSON.stringify({\n      email\n    }),\n    requiresAuth: false\n  });\n};\nexport const logout = async () => {\n  await apiRequest('/auth/logout', {\n    method: 'POST'\n  });\n  localStorage.removeItem('auth_token');\n};\nexport const getAuthToken = () => {\n  const token = localStorage.getItem('auth_token');\n  return token ? token : null;\n};\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  if (!token) return false;\n  try {\n    // Basic validation - check if token is expired\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const expirationTime = payload.exp * 1000; // Convert to milliseconds\n    return Date.now() < expirationTime;\n  } catch (error) {\n    console.error('Error validating token:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["apiRequest","API_URL","formatErrorMessage","error","detail","transformAuthResponse","apiResponse","user","token","access_token","login","credentials","formData","URLSearchParams","append","username","password","response","method","headers","body","toString","requiresAuth","localStorage","setItem","console","log","signup","fetch","JSON","stringify","data","json","ok","Error","forgotPassword","email","logout","removeItem","getAuthToken","getItem","isAuthenticated","payload","parse","atob","split","expirationTime","exp","Date","now"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/auth.ts"],"sourcesContent":["import { AuthResponse, ApiAuthResponse } from '../../types';\r\nimport { apiRequest, API_URL } from './utils';\r\n\r\ninterface LoginCredentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupCredentials {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  full_name: string;\r\n}\r\n\r\ninterface ApiError {\r\n  detail: string;\r\n  [key: string]: any;\r\n}\r\n\r\nconst formatErrorMessage = (error: ApiError): string => {\r\n  if (typeof error.detail === 'string') {\r\n    return error.detail;\r\n  }\r\n  return 'An error occurred during authentication';\r\n};\r\n\r\nconst transformAuthResponse = (apiResponse: ApiAuthResponse): AuthResponse => ({\r\n  user: apiResponse.user,\r\n  token: apiResponse.access_token\r\n});\r\n\r\nexport const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {\r\n  // Convert credentials to FormData as expected by the backend\r\n  const formData = new URLSearchParams();\r\n  formData.append('username', credentials.username);\r\n  formData.append('password', credentials.password);\r\n  formData.append('grant_type', 'password');\r\n\r\n  const response = await apiRequest<ApiAuthResponse>('auth/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: formData.toString(),\r\n    requiresAuth: false,\r\n  });\r\n\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', response.access_token);\r\n  console.log('Stored token:', response.access_token); // Debug log\r\n  return transformAuthResponse(response);\r\n};\r\n\r\nexport const signup = async (credentials: SignupCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/auth/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n    credentials: 'include',\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(formatErrorMessage(data as any));\r\n  }\r\n\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', data.access_token);\r\n  console.log('Stored token:', data.access_token); // Debug log\r\n  return transformAuthResponse(data);\r\n};\r\n\r\nexport const forgotPassword = async (email: string): Promise<void> => {\r\n  await apiRequest('/auth/forgot-password', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ email }),\r\n    requiresAuth: false,\r\n  });\r\n};\r\n\r\nexport const logout = async (): Promise<void> => {\r\n  await apiRequest('/auth/logout', {\r\n    method: 'POST',\r\n  });\r\n  localStorage.removeItem('auth_token');\r\n};\r\n\r\nexport const getAuthToken = (): string | null => {\r\n  const token = localStorage.getItem('auth_token');\r\n  return token ? token : null;\r\n};\r\n\r\nexport const isAuthenticated = (): boolean => {\r\n  const token = getAuthToken();\r\n  if (!token) return false;\r\n  \r\n  try {\r\n    // Basic validation - check if token is expired\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    const expirationTime = payload.exp * 1000; // Convert to milliseconds\r\n    return Date.now() < expirationTime;\r\n  } catch (error) {\r\n    console.error('Error validating token:', error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}