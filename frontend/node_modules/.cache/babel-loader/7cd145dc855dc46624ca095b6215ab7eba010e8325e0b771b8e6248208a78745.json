{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      state.messagesByChannel[channelId] = messages.map(message => ({\n        ...message,\n        reactions: message.reactions || []\n      }));\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId,\n        message\n      } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].push({\n        ...message,\n        reactions: message.reactions || []\n      });\n    },\n    prependMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].unshift(...messages.map(message => ({\n        ...message,\n        reactions: message.reactions || []\n      })));\n    },\n    updateMessage: (state, action) => {\n      var _state$messagesByChan;\n      const {\n        channelId,\n        messageId,\n        message\n      } = action.payload;\n      const messageIndex = (_state$messagesByChan = state.messagesByChannel[channelId]) === null || _state$messagesByChan === void 0 ? void 0 : _state$messagesByChan.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex] = {\n          ...state.messagesByChannel[channelId][messageIndex],\n          ...message,\n          reactions: message.reactions || state.messagesByChannel[channelId][messageIndex].reactions || []\n        };\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      if (state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = state.messagesByChannel[channelId].filter(message => message.id !== messageId);\n      }\n    },\n    toggleReplies: (state, action) => {\n      var _state$messagesByChan2;\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      const messageIndex = (_state$messagesByChan2 = state.messagesByChannel[channelId]) === null || _state$messagesByChan2 === void 0 ? void 0 : _state$messagesByChan2.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex].isExpanded = !state.messagesByChannel[channelId][messageIndex].isExpanded;\n      }\n    },\n    addReaction: (state, action) => {\n      var _state$messagesByChan3;\n      const {\n        channelId,\n        messageId,\n        reaction\n      } = action.payload;\n      const messageIndex = (_state$messagesByChan3 = state.messagesByChannel[channelId]) === null || _state$messagesByChan3 === void 0 ? void 0 : _state$messagesByChan3.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        const message = state.messagesByChannel[channelId][messageIndex];\n        if (!message.reactions) {\n          message.reactions = [];\n        }\n        const existingIndex = message.reactions.findIndex(r => r.userId === reaction.userId && r.emoji === reaction.emoji);\n        if (existingIndex === -1) {\n          message.reactions.push(reaction);\n        }\n      }\n    },\n    removeReaction: (state, action) => {\n      var _state$messagesByChan4;\n      const {\n        channelId,\n        messageId,\n        userId,\n        emoji\n      } = action.payload;\n      const messageIndex = (_state$messagesByChan4 = state.messagesByChannel[channelId]) === null || _state$messagesByChan4 === void 0 ? void 0 : _state$messagesByChan4.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        const message = state.messagesByChannel[channelId][messageIndex];\n        if (message.reactions) {\n          message.reactions = message.reactions.filter(r => !(r.userId === userId && r.emoji === emoji));\n        }\n      }\n    }\n  }\n});\nexport const {\n  setMessages,\n  addMessage,\n  prependMessages,\n  updateMessage,\n  deleteMessage,\n  toggleReplies,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","setMessages","state","action","channelId","messages","payload","map","message","reactions","addMessage","push","prependMessages","unshift","updateMessage","_state$messagesByChan","messageId","messageIndex","findIndex","m","id","undefined","deleteMessage","filter","toggleReplies","_state$messagesByChan2","isExpanded","addReaction","_state$messagesByChan3","reaction","existingIndex","r","userId","emoji","removeReaction","_state$messagesByChan4","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { StoreMessage, Reaction } from '../../types';\n\ninterface MessagesState {\n  messagesByChannel: {\n    [channelId: string]: StoreMessage[];\n  };\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: MessagesState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      state.messagesByChannel[channelId] = messages.map(message => ({\n        ...message,\n        reactions: message.reactions || []\n      }));\n    },\n    addMessage: (state, action: PayloadAction<{ channelId: string; message: StoreMessage }>) => {\n      const { channelId, message } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].push({\n        ...message,\n        reactions: message.reactions || []\n      });\n    },\n    prependMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].unshift(...messages.map(message => ({\n        ...message,\n        reactions: message.reactions || []\n      })));\n    },\n    updateMessage: (state, action: PayloadAction<{ channelId: string; messageId: string; message: Partial<StoreMessage> }>) => {\n      const { channelId, messageId, message } = action.payload;\n      const messageIndex = state.messagesByChannel[channelId]?.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex] = {\n          ...state.messagesByChannel[channelId][messageIndex],\n          ...message,\n          reactions: message.reactions || state.messagesByChannel[channelId][messageIndex].reactions || []\n        };\n      }\n    },\n    deleteMessage: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      if (state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = state.messagesByChannel[channelId].filter(message => message.id !== messageId);\n      }\n    },\n    toggleReplies: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      const messageIndex = state.messagesByChannel[channelId]?.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex].isExpanded = !state.messagesByChannel[channelId][messageIndex].isExpanded;\n      }\n    },\n    addReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reaction: Reaction }>) => {\n      const { channelId, messageId, reaction } = action.payload;\n      const messageIndex = state.messagesByChannel[channelId]?.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        const message = state.messagesByChannel[channelId][messageIndex];\n        if (!message.reactions) {\n          message.reactions = [];\n        }\n        const existingIndex = message.reactions.findIndex(r => \n          r.userId === reaction.userId && r.emoji === reaction.emoji\n        );\n        if (existingIndex === -1) {\n          message.reactions.push(reaction);\n        }\n      }\n    },\n    removeReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; userId: string; emoji: string }>) => {\n      const { channelId, messageId, userId, emoji } = action.payload;\n      const messageIndex = state.messagesByChannel[channelId]?.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        const message = state.messagesByChannel[channelId][messageIndex];\n        if (message.reactions) {\n          message.reactions = message.reactions.filter(r => \n            !(r.userId === userId && r.emoji === emoji)\n          );\n        }\n      }\n    },\n  },\n});\n\nexport const { \n  setMessages, \n  addMessage, \n  prependMessages, \n  updateMessage, \n  deleteMessage, \n  toggleReplies,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\n\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}