{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst formatErrorMessage = error => {\n  if (typeof error.detail === 'string') {\n    return error.detail;\n  }\n  if (Array.isArray(error.detail)) {\n    return error.detail.map(err => err.msg).join(', ');\n  }\n  return error.message || 'An error occurred';\n};\nexport const login = async credentials => {\n  const response = await fetch(`${API_URL}/api/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials),\n    credentials: 'include'\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(formatErrorMessage(data));\n  }\n\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', data.token);\n  return data;\n};\nexport const signup = async credentials => {\n  const response = await fetch(`${API_URL}/api/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials),\n    credentials: 'include'\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(formatErrorMessage(data));\n  }\n\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', data.token);\n  return data;\n};\nexport const forgotPassword = async email => {\n  const response = await fetch(`${API_URL}/api/auth/forgot-password`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    }),\n    credentials: 'include'\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(formatErrorMessage(data));\n  }\n};\nexport const logout = async () => {\n  const token = localStorage.getItem('auth_token');\n  if (!token) return;\n  try {\n    const response = await fetch(`${API_URL}/api/auth/logout`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(formatErrorMessage(data));\n    }\n  } finally {\n    // Always remove the token from localStorage\n    localStorage.removeItem('auth_token');\n  }\n};\n\n// Helper function to get the auth token\nexport const getAuthToken = () => {\n  return localStorage.getItem('auth_token');\n};\n\n// Helper function to check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!getAuthToken();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","formatErrorMessage","error","detail","Array","isArray","map","err","msg","join","message","login","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","localStorage","setItem","token","signup","forgotPassword","email","logout","getItem","removeItem","getAuthToken","isAuthenticated"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/auth.ts"],"sourcesContent":["import { User } from '../../store/types';\r\n\r\ninterface LoginCredentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupCredentials {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  full_name: string;\r\n}\r\n\r\ninterface AuthResponse {\r\n  user: User;\r\n  token: string;\r\n}\r\n\r\ninterface ApiError {\r\n  detail?: string | { msg: string }[];\r\n  message?: string;\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst formatErrorMessage = (error: ApiError): string => {\r\n  if (typeof error.detail === 'string') {\r\n    return error.detail;\r\n  }\r\n  if (Array.isArray(error.detail)) {\r\n    return error.detail.map(err => err.msg).join(', ');\r\n  }\r\n  return error.message || 'An error occurred';\r\n};\r\n\r\nexport const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/api/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n    credentials: 'include',\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(formatErrorMessage(data));\r\n  }\r\n\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', data.token);\r\n  return data;\r\n};\r\n\r\nexport const signup = async (credentials: SignupCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/api/auth/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n    credentials: 'include',\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(formatErrorMessage(data));\r\n  }\r\n\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', data.token);\r\n  return data;\r\n};\r\n\r\nexport const forgotPassword = async (email: string): Promise<void> => {\r\n  const response = await fetch(`${API_URL}/api/auth/forgot-password`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email }),\r\n    credentials: 'include',\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(formatErrorMessage(data));\r\n  }\r\n};\r\n\r\nexport const logout = async (): Promise<void> => {\r\n  const token = localStorage.getItem('auth_token');\r\n  if (!token) return;\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/api/auth/logout`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const data = await response.json();\r\n      throw new Error(formatErrorMessage(data));\r\n    }\r\n  } finally {\r\n    // Always remove the token from localStorage\r\n    localStorage.removeItem('auth_token');\r\n  }\r\n};\r\n\r\n// Helper function to get the auth token\r\nexport const getAuthToken = (): string | null => {\r\n  return localStorage.getItem('auth_token');\r\n};\r\n\r\n// Helper function to check if user is authenticated\r\nexport const isAuthenticated = (): boolean => {\r\n  return !!getAuthToken();\r\n}; "],"mappings":"AAwBA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,kBAAkB,GAAIC,KAAe,IAAa;EACtD,IAAI,OAAOA,KAAK,CAACC,MAAM,KAAK,QAAQ,EAAE;IACpC,OAAOD,KAAK,CAACC,MAAM;EACrB;EACA,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAACC,MAAM,CAAC,EAAE;IAC/B,OAAOD,KAAK,CAACC,MAAM,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EACpD;EACA,OAAOP,KAAK,CAACQ,OAAO,IAAI,mBAAmB;AAC7C,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAA6B,IAA4B;EACnF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,OAAO,iBAAiB,EAAE;IACxDkB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAAC;IACjCA,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACtB,kBAAkB,CAACmB,IAAI,CAAC,CAAC;EAC3C;;EAEA;EACAI,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACM,KAAK,CAAC;EAC9C,OAAON,IAAI;AACb,CAAC;AAED,OAAO,MAAMO,MAAM,GAAG,MAAOf,WAA8B,IAA4B;EACrF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,OAAO,oBAAoB,EAAE;IAC3DkB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAAC;IACjCA,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACtB,kBAAkB,CAACmB,IAAI,CAAC,CAAC;EAC3C;;EAEA;EACAI,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACM,KAAK,CAAC;EAC9C,OAAON,IAAI;AACb,CAAC;AAED,OAAO,MAAMQ,cAAc,GAAG,MAAOC,KAAa,IAAoB;EACpE,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,OAAO,2BAA2B,EAAE;IAClEkB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEU;IAAM,CAAC,CAAC;IAC/BjB,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACtB,kBAAkB,CAACmB,IAAI,CAAC,CAAC;EAC3C;AACF,CAAC;AAED,OAAO,MAAMU,MAAM,GAAG,MAAAA,CAAA,KAA2B;EAC/C,MAAMJ,KAAK,GAAGF,YAAY,CAACO,OAAO,CAAC,YAAY,CAAC;EAChD,IAAI,CAACL,KAAK,EAAE;EAEZ,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,OAAO,kBAAkB,EAAE;MACzDkB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUU,KAAK,EAAE;QAClC,cAAc,EAAE;MAClB,CAAC;MACDd,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAMF,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,MAAM,IAAIE,KAAK,CAACtB,kBAAkB,CAACmB,IAAI,CAAC,CAAC;IAC3C;EACF,CAAC,SAAS;IACR;IACAI,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;EACvC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAqB;EAC/C,OAAOT,YAAY,CAACO,OAAO,CAAC,YAAY,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAe;EAC5C,OAAO,CAAC,CAACD,YAAY,CAAC,CAAC;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}