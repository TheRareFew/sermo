{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages\n  const transformToStoreMessage = useCallback(msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    // Initialize empty arrays for reactions and attachments\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    // Use created_at as updatedAt if not provided\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout;\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n      setIsConnecting(true);\n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n\n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        if (!isMounted) return;\n\n        // After joining, fetch channel users and messages\n        const [channelUsers, channelMessages] = await Promise.all([getChannelUsers(activeChannelId), getChannelMessages(activeChannelId)]);\n        if (isMounted) {\n          dispatch(setUsers(channelUsers));\n          // Transform messages to match StoreMessage type\n          const transformedMessages = channelMessages.map(transformToStoreMessage);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting, transformToStoreMessage]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n\n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = msg => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n          if (message.type === 'new_reply' && message.parentId) {\n            storeMessage.parentId = message.parentId.toString();\n          }\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n\n          // If this is a new message and we're at the bottom, scroll to it\n          if (messageListRef.current) {\n            const {\n              scrollTop,\n              scrollHeight,\n              clientHeight\n            } = messageListRef.current;\n            const isAtBottom = scrollTop + clientHeight >= scrollHeight - 50;\n            if (isAtBottom) {\n              setTimeout(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              }, 100);\n            }\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = msg => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, transformToStoreMessage]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async channelId => {\n    if (channelId === activeChannelId) return;\n    try {\n      // Find the channel in our list\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      // If it's a public channel, try to join it first\n      if (channel.is_public) {\n        try {\n          // First connect to the channel via WebSocket\n          await wsService.connect(channelId);\n          // Then join the channel\n          await joinChannel(channelId);\n        } catch (error) {\n          console.error('Failed to join channel:', error);\n          // Continue anyway since the channel is public\n        }\n      }\n      dispatch(setActiveChannel(channelId));\n    } catch (error) {\n      console.error('Error switching channel:', error);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        dispatch(setActiveChannel(channelId));\n        // Wait for channel switch to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Set the selected message ID\n      setSelectedMessageId(messageId);\n\n      // Clear search results\n      setSearchResults(null);\n\n      // Scroll to message after a short delay to ensure the message list has updated\n      setTimeout(() => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        }\n      }, 500);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector(state => state.messages.messagesByChannel[activeChannelId || ''] || []);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: messages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      onClose: () => setIsSettingsOpen(false),\n      channel: activeChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"my3lJx4rtI38JcdzMChx9o3dsFs=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addMessage","setMessages","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","joinChannel","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","transformToStoreMessage","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","fetchInitialData","fetchedChannels","length","channelUsers","console","disconnect","isMounted","connectionTimeout","connectToChannel","Promise","resolve","setTimeout","connect","channelMessages","all","transformedMessages","map","messages","clearTimeout","handleWebSocketMessage","message","log","type","isChannelMessage","storeMessage","current","scrollTop","scrollHeight","clientHeight","isAtBottom","isStatusMessage","user_id","status","unsubscribe","onMessage","handleSearch","query","trim","undefined","results","handleChannelClick","c","is_public","handleSelectMessage","messageId","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","handleLogout","sortedChannels","sort","a","b","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","messagesByChannel","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","user","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult, Message } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  \n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages\n  const transformToStoreMessage = useCallback((msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [], // Initialize empty arrays for reactions and attachments\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at, // Use created_at as updatedAt if not provided\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    \n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout: NodeJS.Timeout;\n\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n\n      setIsConnecting(true);\n      \n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n        \n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // After joining, fetch channel users and messages\n        const [channelUsers, channelMessages] = await Promise.all([\n          getChannelUsers(activeChannelId),\n          getChannelMessages(activeChannelId)\n        ]);\n\n        if (isMounted) {\n          dispatch(setUsers(channelUsers));\n          // Transform messages to match StoreMessage type\n          const transformedMessages = channelMessages.map(transformToStoreMessage);\n          dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n        }\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting, transformToStoreMessage]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n          if (message.type === 'new_reply' && message.parentId) {\n            storeMessage.parentId = message.parentId.toString();\n          }\n\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n\n          // If this is a new message and we're at the bottom, scroll to it\n          if (messageListRef.current) {\n            const { scrollTop, scrollHeight, clientHeight } = messageListRef.current;\n            const isAtBottom = scrollTop + clientHeight >= scrollHeight - 50;\n            if (isAtBottom) {\n              setTimeout(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              }, 100);\n            }\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = (msg: WebSocketMessage): msg is WebSocketStatusMessage => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, transformToStoreMessage]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async (channelId: string) => {\n    if (channelId === activeChannelId) return;\n    \n    try {\n      // Find the channel in our list\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      // If it's a public channel, try to join it first\n      if (channel.is_public) {\n        try {\n          // First connect to the channel via WebSocket\n          await wsService.connect(channelId);\n          // Then join the channel\n          await joinChannel(channelId);\n        } catch (error) {\n          console.error('Failed to join channel:', error);\n          // Continue anyway since the channel is public\n        }\n      }\n\n      dispatch(setActiveChannel(channelId));\n    } catch (error) {\n      console.error('Error switching channel:', error);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        dispatch(setActiveChannel(channelId));\n        // Wait for channel switch to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Set the selected message ID\n      setSelectedMessageId(messageId);\n\n      // Clear search results\n      setSearchResults(null);\n\n      // Scroll to message after a short delay to ensure the message list has updated\n      setTimeout(() => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        }\n      }, 500);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector((state: RootState) => \n    state.messages.messagesByChannel[activeChannelId || ''] || []\n  );\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={messages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput channelId={activeChannelId || ''} />\n        </ChatInput>\n      </ChatArea>\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          onClose={() => setIsSettingsOpen(false)}\n          channel={activeChannel}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}