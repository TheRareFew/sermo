{"ast":null,"code":"export const transformMessage = message => {\n  var _message$content;\n  console.log('Transforming message:', {\n    id: message.id,\n    content: (_message$content = message.content) === null || _message$content === void 0 ? void 0 : _message$content.slice(0, 50),\n    // Only log first 50 chars\n    reactions: message.reactions\n  });\n\n  // Ensure reactions is an array and filter out invalid reactions\n  const reactions = Array.isArray(message.reactions) ? message.reactions.filter(reaction => {\n    if (!reaction || typeof reaction !== 'object') {\n      console.warn('Invalid reaction object:', reaction);\n      return false;\n    }\n    if (!reaction.emoji || !reaction.userId) {\n      console.warn('Reaction missing required fields:', reaction);\n      return false;\n    }\n    return true;\n  }) : [];\n  console.log('Transformed reactions:', reactions);\n  return {\n    id: message.id,\n    content: message.content || '',\n    userId: message.userId || '',\n    channelId: message.channelId || '',\n    createdAt: message.createdAt || new Date().toISOString(),\n    updatedAt: message.updatedAt || new Date().toISOString(),\n    parentId: message.parentId || null,\n    replyCount: message.replyCount || 0,\n    isExpanded: false,\n    reactions: reactions\n  };\n};","map":{"version":3,"names":["transformMessage","message","_message$content","console","log","id","content","slice","reactions","Array","isArray","filter","reaction","warn","emoji","userId","channelId","createdAt","Date","toISOString","updatedAt","parentId","replyCount","isExpanded"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { RawMessage, StoreMessage } from '../types';\n\nexport const transformMessage = (message: RawMessage): StoreMessage => {\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content?.slice(0, 50), // Only log first 50 chars\n    reactions: message.reactions\n  });\n\n  // Ensure reactions is an array and filter out invalid reactions\n  const reactions = Array.isArray(message.reactions) \n    ? message.reactions.filter(reaction => {\n        if (!reaction || typeof reaction !== 'object') {\n          console.warn('Invalid reaction object:', reaction);\n          return false;\n        }\n        if (!reaction.emoji || !reaction.userId) {\n          console.warn('Reaction missing required fields:', reaction);\n          return false;\n        }\n        return true;\n      })\n    : [];\n\n  console.log('Transformed reactions:', reactions);\n\n  return {\n    id: message.id,\n    content: message.content || '',\n    userId: message.userId || '',\n    channelId: message.channelId || '',\n    createdAt: message.createdAt || new Date().toISOString(),\n    updatedAt: message.updatedAt || new Date().toISOString(),\n    parentId: message.parentId || null,\n    replyCount: message.replyCount || 0,\n    isExpanded: false,\n    reactions: reactions,\n  };\n}; "],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAIC,OAAmB,IAAmB;EAAA,IAAAC,gBAAA;EACrEC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;IACnCC,EAAE,EAAEJ,OAAO,CAACI,EAAE;IACdC,OAAO,GAAAJ,gBAAA,GAAED,OAAO,CAACK,OAAO,cAAAJ,gBAAA,uBAAfA,gBAAA,CAAiBK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAAE;IACxCC,SAAS,EAAEP,OAAO,CAACO;EACrB,CAAC,CAAC;;EAEF;EACA,MAAMA,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACT,OAAO,CAACO,SAAS,CAAC,GAC9CP,OAAO,CAACO,SAAS,CAACG,MAAM,CAACC,QAAQ,IAAI;IACnC,IAAI,CAACA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC7CT,OAAO,CAACU,IAAI,CAAC,0BAA0B,EAAED,QAAQ,CAAC;MAClD,OAAO,KAAK;IACd;IACA,IAAI,CAACA,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACG,MAAM,EAAE;MACvCZ,OAAO,CAACU,IAAI,CAAC,mCAAmC,EAAED,QAAQ,CAAC;MAC3D,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,CAAC,GACF,EAAE;EAENT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEI,SAAS,CAAC;EAEhD,OAAO;IACLH,EAAE,EAAEJ,OAAO,CAACI,EAAE;IACdC,OAAO,EAAEL,OAAO,CAACK,OAAO,IAAI,EAAE;IAC9BS,MAAM,EAAEd,OAAO,CAACc,MAAM,IAAI,EAAE;IAC5BC,SAAS,EAAEf,OAAO,CAACe,SAAS,IAAI,EAAE;IAClCC,SAAS,EAAEhB,OAAO,CAACgB,SAAS,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACxDC,SAAS,EAAEnB,OAAO,CAACmB,SAAS,IAAI,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACxDE,QAAQ,EAAEpB,OAAO,CAACoB,QAAQ,IAAI,IAAI;IAClCC,UAAU,EAAErB,OAAO,CAACqB,UAAU,IAAI,CAAC;IACnCC,UAAU,EAAE,KAAK;IACjBf,SAAS,EAAEA;EACb,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}