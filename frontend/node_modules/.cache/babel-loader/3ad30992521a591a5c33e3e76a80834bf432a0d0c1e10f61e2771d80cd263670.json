{"ast":null,"code":"import { getAuthToken } from '../api/auth';\n\n// Add WebSocket message types\n\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.currentChannelId = null;\n    this.joinedChannels = new Set();\n    this.messageQueue = [];\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.isReconnecting = false;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.lastMessageId = null;\n    this.processingQueue = false;\n    this.handleClose = event => {\n      if (this.socket === null) return;\n      const wasConnected = this.socket.readyState === WebSocket.OPEN;\n      this.socket = null;\n      this.joinedChannels.clear();\n      if (event.code !== 1000 && wasConnected) {\n        if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.attemptReconnect();\n        }\n      }\n    };\n    // Update message handler to track last message ID\n    this.handleWebSocketMessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n\n        // Handle channel join responses separately\n        if (message.type === 'channel_joined') {\n          this.joinedChannels.add(message.channel_id);\n          return;\n        }\n\n        // For message events, update lastMessageId and notify handlers\n        if (message.type === 'message' || message.type === 'message_sent') {\n          this.lastMessageId = message.message.id;\n        }\n\n        // Notify all message handlers\n        this.messageHandlers.forEach(handler => {\n          try {\n            handler(message);\n          } catch (error) {\n            console.error('Error in message handler:', error);\n          }\n        });\n      } catch (error) {\n        console.error('Error handling WebSocket message:', error);\n      }\n    };\n  }\n  async connect(channelId) {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      return;\n    }\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    try {\n      const token = getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('WebSocket connection timeout'));\n        }, 5000);\n        this.socket.onopen = () => {\n          clearTimeout(timeout);\n          resolve();\n        };\n        this.socket.onerror = error => {\n          clearTimeout(timeout);\n          reject(error);\n        };\n      });\n      this.socket.onmessage = this.handleWebSocketMessage;\n      this.socket.onclose = this.handleClose;\n      await this.joinChannel(channelId);\n    } catch (error) {\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    }\n  }\n  async joinChannel(channelId) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Cannot join channel: WebSocket is not connected');\n    }\n    if (this.isConnectedToChannel(channelId)) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      const joinMessage = {\n        type: 'join_channel',\n        channel_id: channelId\n      };\n      const joinTimeout = setTimeout(() => reject(new Error('Channel join timeout')), 5000);\n      const handleJoinResponse = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'channel_joined' && data.channel_id === channelId && this.socket) {\n            this.socket.removeEventListener('message', handleJoinResponse);\n            clearTimeout(joinTimeout);\n            this.joinedChannels.add(channelId);\n            resolve();\n          }\n        } catch (error) {}\n      };\n      if (this.socket) {\n        this.socket.addEventListener('message', handleJoinResponse);\n        this.socket.send(JSON.stringify(joinMessage));\n      } else {\n        reject(new Error('WebSocket not available'));\n      }\n    });\n  }\n  handleError(error) {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n  isConnected() {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n  isConnectedToChannel(channelId) {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onError(handler) {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n  disconnect() {\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n  }\n  async processMessageQueue() {\n    if (this.processingQueue || this.messageQueue.length === 0) return;\n    this.processingQueue = true;\n    console.log(`Processing message queue (${this.messageQueue.length} messages)`);\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue[0];\n      try {\n        if (this.isConnectedToChannel(message.channelId)) {\n          await this.sendMessage(message.channelId, message.content);\n          this.messageQueue.shift(); // Remove the successfully sent message\n        } else {\n          // If we're not connected to the channel, try to connect\n          try {\n            await this.connect(message.channelId);\n          } catch (error) {\n            console.error('Failed to connect while processing queue:', error);\n            break; // Stop processing if we can't connect\n          }\n        }\n      } catch (error) {\n        console.error('Failed to send queued message:', error);\n        // If sending fails, leave the message in the queue and try again later\n        break;\n      }\n    }\n    this.processingQueue = false;\n  }\n  async sendMessage(channelId, content) {\n    if (!this.isConnectedToChannel(channelId)) {\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('Failed to connect:', error);\n        throw error;\n      }\n    }\n    const message = {\n      type: 'message',\n      channel_id: channelId,\n      content: content\n    };\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.socket.send(JSON.stringify(message));\n  }\n  async attemptReconnect() {\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\n      return;\n    }\n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n    if (this.currentChannelId) {\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n      this.reconnectTimeout = setTimeout(async () => {\n        try {\n          await this.connect(this.currentChannelId);\n          this.isReconnecting = false;\n          // Process any queued messages after successful reconnection\n          await this.processMessageQueue();\n        } catch (error) {\n          console.error('Reconnection failed:', error);\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.isReconnecting = false; // Reset flag to allow next attempt\n            this.attemptReconnect();\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.isReconnecting = false;\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\n          }\n        }\n      }, backoffTime);\n    } else {\n      this.isReconnecting = false;\n    }\n  }\n  getChatSocketState() {\n    var _this$socket;\n    return ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) || WebSocket.CLOSED;\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WebSocketService","constructor","socket","messageHandlers","errorHandlers","currentChannelId","joinedChannels","Set","messageQueue","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","isReconnecting","connectionPromise","joinPromise","lastMessageId","processingQueue","handleClose","event","wasConnected","readyState","WebSocket","OPEN","clear","code","attemptReconnect","handleWebSocketMessage","message","JSON","parse","data","type","add","channel_id","id","forEach","handler","error","console","connect","channelId","isConnected","isConnectedToChannel","disconnect","token","Error","Promise","resolve","reject","timeout","setTimeout","onopen","clearTimeout","onerror","onmessage","onclose","joinChannel","handleError","joinMessage","joinTimeout","handleJoinResponse","removeEventListener","addEventListener","send","stringify","has","onMessage","push","filter","h","onError","close","processMessageQueue","length","log","sendMessage","content","shift","backoffTime","Math","min","pow","getChatSocketState","_this$socket","CLOSED","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage, WebSocketChannelJoinMessage, WebSocketChannelMessage, StoreMessage } from '../../types';\r\nimport { getAuthToken } from '../api/auth';\r\nimport { store } from '../../store';\r\nimport { addMessage, setReplies } from '../../store/messages/messagesSlice';\r\n\r\n// Add WebSocket message types\r\ninterface WebSocketJoinMessage {\r\n  type: 'join_channel';\r\n  channel_id: string;\r\n}\r\n\r\ninterface WebSocketJoinResponse {\r\n  type: 'channel_joined' | 'channel_join_error';\r\n  channelId: string;\r\n  error?: string;\r\n}\r\n\r\nclass WebSocketService {\r\n  private socket: WebSocket | null = null;\r\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private errorHandlers: ((error: Error) => void)[] = [];\r\n  private currentChannelId: string | null = null;\r\n  private joinedChannels: Set<string> = new Set();\r\n  private messageQueue: { channelId: string; content: string }[] = [];\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private isReconnecting = false;\r\n  private connectionPromise: Promise<void> | null = null;\r\n  private joinPromise: Promise<void> | null = null;\r\n  private lastMessageId: string | null = null;\r\n  private processingQueue = false;\r\n\r\n  public async connect(channelId: string): Promise<void> {\r\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\r\n      return;\r\n    }\r\n\r\n    this.disconnect();\r\n    this.currentChannelId = channelId;\r\n    this.isReconnecting = false;\r\n    this.reconnectAttempts = 0;\r\n    \r\n    try {\r\n      const token = getAuthToken();\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\r\n\r\n      await new Promise<void>((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          reject(new Error('WebSocket connection timeout'));\r\n        }, 5000);\r\n\r\n        this.socket!.onopen = () => {\r\n          clearTimeout(timeout);\r\n          resolve();\r\n        };\r\n\r\n        this.socket!.onerror = (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        };\r\n      });\r\n\r\n      this.socket!.onmessage = this.handleWebSocketMessage;\r\n      this.socket!.onclose = this.handleClose;\r\n      await this.joinChannel(channelId);\r\n      \r\n    } catch (error) {\r\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private handleClose = (event: CloseEvent) => {\r\n    if (this.socket === null) return;\r\n    \r\n    const wasConnected = this.socket.readyState === WebSocket.OPEN;\r\n    this.socket = null;\r\n    this.joinedChannels.clear();\r\n\r\n    if (event.code !== 1000 && wasConnected) {\r\n      if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\r\n        this.attemptReconnect();\r\n      }\r\n    }\r\n  };\r\n\r\n  public async joinChannel(channelId: string): Promise<void> {\r\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n      throw new Error('Cannot join channel: WebSocket is not connected');\r\n    }\r\n\r\n    if (this.isConnectedToChannel(channelId)) {\r\n      return;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const joinMessage = { type: 'join_channel', channel_id: channelId };\r\n      const joinTimeout = setTimeout(() => reject(new Error('Channel join timeout')), 5000);\r\n      \r\n      const handleJoinResponse = (event: MessageEvent) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          if (data.type === 'channel_joined' && data.channel_id === channelId && this.socket) {\r\n            this.socket.removeEventListener('message', handleJoinResponse);\r\n            clearTimeout(joinTimeout);\r\n            this.joinedChannels.add(channelId);\r\n            resolve();\r\n          }\r\n        } catch (error) {}\r\n      };\r\n\r\n      if (this.socket) {\r\n        this.socket.addEventListener('message', handleJoinResponse);\r\n        this.socket.send(JSON.stringify(joinMessage));\r\n      } else {\r\n        reject(new Error('WebSocket not available'));\r\n      }\r\n    });\r\n  }\r\n\r\n  private handleError(error: Error): void {\r\n    console.error('WebSocket error:', error);\r\n    this.errorHandlers.forEach(handler => handler(error));\r\n  }\r\n\r\n  public isConnected(): boolean {\r\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\r\n  }\r\n\r\n  private isConnectedToChannel(channelId: string): boolean {\r\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\r\n  }\r\n\r\n  public onMessage(handler: (message: WebSocketMessage) => void): () => void {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  public onError(handler: (error: Error) => void): () => void {\r\n    this.errorHandlers.push(handler);\r\n    return () => {\r\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  public disconnect(): void {\r\n    this.isReconnecting = false;\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      this.socket.close(1000);\r\n    }\r\n    this.socket = null;\r\n    this.joinedChannels.clear();\r\n    this.messageHandlers = [];\r\n    this.errorHandlers = [];\r\n    this.reconnectAttempts = 0;\r\n    this.connectionPromise = null;\r\n    this.joinPromise = null;\r\n  }\r\n\r\n  private async processMessageQueue(): Promise<void> {\r\n    if (this.processingQueue || this.messageQueue.length === 0) return;\r\n\r\n    this.processingQueue = true;\r\n    console.log(`Processing message queue (${this.messageQueue.length} messages)`);\r\n\r\n    while (this.messageQueue.length > 0) {\r\n      const message = this.messageQueue[0];\r\n      \r\n      try {\r\n        if (this.isConnectedToChannel(message.channelId)) {\r\n          await this.sendMessage(message.channelId, message.content);\r\n          this.messageQueue.shift(); // Remove the successfully sent message\r\n        } else {\r\n          // If we're not connected to the channel, try to connect\r\n          try {\r\n            await this.connect(message.channelId);\r\n          } catch (error) {\r\n            console.error('Failed to connect while processing queue:', error);\r\n            break; // Stop processing if we can't connect\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to send queued message:', error);\r\n        // If sending fails, leave the message in the queue and try again later\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.processingQueue = false;\r\n  }\r\n\r\n  public async sendMessage(channelId: string, content: string): Promise<void> {\r\n    if (!this.isConnectedToChannel(channelId)) {\r\n      try {\r\n        await this.connect(channelId);\r\n      } catch (error) {\r\n        console.error('Failed to connect:', error);\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    const message = {\r\n      type: 'message',\r\n      channel_id: channelId,\r\n      content: content\r\n    };\r\n\r\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n      throw new Error('WebSocket is not connected');\r\n    }\r\n\r\n    this.socket.send(JSON.stringify(message));\r\n  }\r\n\r\n  private async attemptReconnect(): Promise<void> {\r\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\r\n      return;\r\n    }\r\n\r\n    this.isReconnecting = true;\r\n    this.reconnectAttempts++;\r\n\r\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\r\n\r\n    if (this.currentChannelId) {\r\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\r\n      \r\n      if (this.reconnectTimeout) {\r\n        clearTimeout(this.reconnectTimeout);\r\n      }\r\n\r\n      this.reconnectTimeout = setTimeout(async () => {\r\n        try {\r\n          await this.connect(this.currentChannelId!);\r\n          this.isReconnecting = false;\r\n          // Process any queued messages after successful reconnection\r\n          await this.processMessageQueue();\r\n        } catch (error) {\r\n          console.error('Reconnection failed:', error);\r\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n            this.isReconnecting = false; // Reset flag to allow next attempt\r\n            this.attemptReconnect();\r\n          } else {\r\n            console.log('Max reconnection attempts reached');\r\n            this.isReconnecting = false;\r\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\r\n          }\r\n        }\r\n      }, backoffTime);\r\n    } else {\r\n      this.isReconnecting = false;\r\n    }\r\n  }\r\n\r\n  public getChatSocketState(): number {\r\n    return this.socket?.readyState || WebSocket.CLOSED;\r\n  }\r\n\r\n  // Update message handler to track last message ID\r\n  private handleWebSocketMessage = (event: MessageEvent) => {\r\n    try {\r\n      const message = JSON.parse(event.data) as WebSocketMessage;\r\n      \r\n      // Handle channel join responses separately\r\n      if (message.type === 'channel_joined') {\r\n        this.joinedChannels.add(message.channel_id);\r\n        return;\r\n      }\r\n\r\n      // For message events, update lastMessageId and notify handlers\r\n      if (message.type === 'message' || message.type === 'message_sent') {\r\n        this.lastMessageId = message.message.id;\r\n      }\r\n\r\n      // Notify all message handlers\r\n      this.messageHandlers.forEach(handler => {\r\n        try {\r\n          handler(message);\r\n        } catch (error) {\r\n          console.error('Error in message handler:', error);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error handling WebSocket message:', error);\r\n    }\r\n  };\r\n}\r\n\r\nconst wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}