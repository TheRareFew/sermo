{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    fetchMessagesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchMessagesSuccess: (state, action) => {\n      state.loading = false;\n      state.error = null;\n      state.messagesByChannel[action.payload.channelId] = action.payload.messages;\n    },\n    fetchMessagesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId,\n        message\n      } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].push(message);\n    },\n    updateMessage: (state, action) => {\n      const {\n        channelId,\n        message\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex(m => m.id === message.id);\n        if (index !== -1) {\n          messages[index] = message;\n        }\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter(m => m.id !== messageId);\n      }\n    },\n    clearChannelMessages: (state, action) => {\n      delete state.messagesByChannel[action.payload];\n    },\n    clearAllMessages: state => {\n      state.messagesByChannel = {};\n    }\n  }\n});\nexport const {\n  fetchMessagesStart,\n  fetchMessagesSuccess,\n  fetchMessagesFailure,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  clearChannelMessages,\n  clearAllMessages\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","fetchMessagesStart","state","fetchMessagesSuccess","action","payload","channelId","messages","fetchMessagesFailure","addMessage","message","push","updateMessage","index","findIndex","m","id","deleteMessage","messageId","filter","clearChannelMessages","clearAllMessages","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Message } from '../../types';\r\n\r\ninterface MessagesState {\r\n  messagesByChannel: { [channelId: number]: Message[] };\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: MessagesState = {\r\n  messagesByChannel: {},\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst messagesSlice = createSlice({\r\n  name: 'messages',\r\n  initialState,\r\n  reducers: {\r\n    fetchMessagesStart: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    fetchMessagesSuccess: (state, action: PayloadAction<{ channelId: number; messages: Message[] }>) => {\r\n      state.loading = false;\r\n      state.error = null;\r\n      state.messagesByChannel[action.payload.channelId] = action.payload.messages;\r\n    },\r\n    fetchMessagesFailure: (state, action: PayloadAction<string>) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<{ channelId: number; message: Message }>) => {\r\n      const { channelId, message } = action.payload;\r\n      if (!state.messagesByChannel[channelId]) {\r\n        state.messagesByChannel[channelId] = [];\r\n      }\r\n      state.messagesByChannel[channelId].push(message);\r\n    },\r\n    updateMessage: (state, action: PayloadAction<{ channelId: number; message: Message }>) => {\r\n      const { channelId, message } = action.payload;\r\n      const messages = state.messagesByChannel[channelId];\r\n      if (messages) {\r\n        const index = messages.findIndex(m => m.id === message.id);\r\n        if (index !== -1) {\r\n          messages[index] = message;\r\n        }\r\n      }\r\n    },\r\n    deleteMessage: (state, action: PayloadAction<{ channelId: number; messageId: number }>) => {\r\n      const { channelId, messageId } = action.payload;\r\n      const messages = state.messagesByChannel[channelId];\r\n      if (messages) {\r\n        state.messagesByChannel[channelId] = messages.filter(m => m.id !== messageId);\r\n      }\r\n    },\r\n    clearChannelMessages: (state, action: PayloadAction<number>) => {\r\n      delete state.messagesByChannel[action.payload];\r\n    },\r\n    clearAllMessages: (state) => {\r\n      state.messagesByChannel = {};\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchMessagesStart,\r\n  fetchMessagesSuccess,\r\n  fetchMessagesFailure,\r\n  addMessage,\r\n  updateMessage,\r\n  deleteMessage,\r\n  clearChannelMessages,\r\n  clearAllMessages,\r\n} = messagesSlice.actions;\r\n\r\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}