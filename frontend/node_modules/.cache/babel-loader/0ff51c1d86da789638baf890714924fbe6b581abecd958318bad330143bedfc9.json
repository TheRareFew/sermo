{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  activeChannelId: null,\n  channels: [],\n  messages: {},\n  users: {},\n  loading: false,\n  error: null\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setActiveChannel: (state, action) => {\n      state.activeChannelId = action.payload;\n    },\n    setChannels: (state, action) => {\n      state.channels = action.payload;\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId,\n        message\n      } = action.payload;\n      if (!state.messages[channelId]) {\n        state.messages[channelId] = [];\n      }\n      state.messages[channelId].push(message);\n    },\n    setMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      state.messages[channelId] = messages;\n    },\n    setUsers: (state, action) => {\n      state.users = action.payload;\n    },\n    updateUserStatus: (state, action) => {\n      const {\n        userId,\n        status\n      } = action.payload;\n      if (state.users[userId]) {\n        state.users[userId].status = status;\n      }\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setActiveChannel,\n  setChannels,\n  addMessage,\n  setMessages,\n  setUsers,\n  updateUserStatus,\n  setLoading,\n  setError\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","activeChannelId","channels","messages","users","loading","error","chatSlice","name","reducers","setActiveChannel","state","action","payload","setChannels","addMessage","channelId","message","push","setMessages","setUsers","updateUserStatus","userId","status","setLoading","setError","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/chat/chatSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ChatState, Message, User } from '../../types';\n\nconst initialState: ChatState = {\n  activeChannelId: null,\n  channels: [],\n  messages: {},\n  users: {},\n  loading: false,\n  error: null\n};\n\ninterface AddMessagePayload {\n  channelId: string;\n  message: Message;\n}\n\ninterface SetMessagesPayload {\n  channelId: string;\n  messages: Message[];\n}\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setActiveChannel: (state, action: PayloadAction<number | null>) => {\n      state.activeChannelId = action.payload;\n    },\n    setChannels: (state, action: PayloadAction<any[]>) => {\n      state.channels = action.payload;\n    },\n    addMessage: (state, action: PayloadAction<AddMessagePayload>) => {\n      const { channelId, message } = action.payload;\n      if (!state.messages[channelId]) {\n        state.messages[channelId] = [];\n      }\n      state.messages[channelId].push(message);\n    },\n    setMessages: (state, action: PayloadAction<SetMessagesPayload>) => {\n      const { channelId, messages } = action.payload;\n      state.messages[channelId] = messages;\n    },\n    setUsers: (state, action: PayloadAction<{ [key: string]: User }>) => {\n      state.users = action.payload;\n    },\n    updateUserStatus: (state, action: PayloadAction<{ userId: string; status: User['status'] }>) => {\n      const { userId, status } = action.payload;\n      if (state.users[userId]) {\n        state.users[userId].status = status;\n      }\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    }\n  }\n});\n\nexport const {\n  setActiveChannel,\n  setChannels,\n  addMessage,\n  setMessages,\n  setUsers,\n  updateUserStatus,\n  setLoading,\n  setError\n} = chatSlice.actions;\n\nexport default chatSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAG7D,MAAMC,YAAuB,GAAG;EAC9BC,eAAe,EAAE,IAAI;EACrBC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,CAAC,CAAC;EACZC,KAAK,EAAE,CAAC,CAAC;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAYD,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IACRC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAoC,KAAK;MACjED,KAAK,CAACV,eAAe,GAAGW,MAAM,CAACC,OAAO;IACxC,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAA4B,KAAK;MACpDD,KAAK,CAACT,QAAQ,GAAGU,MAAM,CAACC,OAAO;IACjC,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAwC,KAAK;MAC/D,MAAM;QAAEI,SAAS;QAAEC;MAAQ,CAAC,GAAGL,MAAM,CAACC,OAAO;MAC7C,IAAI,CAACF,KAAK,CAACR,QAAQ,CAACa,SAAS,CAAC,EAAE;QAC9BL,KAAK,CAACR,QAAQ,CAACa,SAAS,CAAC,GAAG,EAAE;MAChC;MACAL,KAAK,CAACR,QAAQ,CAACa,SAAS,CAAC,CAACE,IAAI,CAACD,OAAO,CAAC;IACzC,CAAC;IACDE,WAAW,EAAEA,CAACR,KAAK,EAAEC,MAAyC,KAAK;MACjE,MAAM;QAAEI,SAAS;QAAEb;MAAS,CAAC,GAAGS,MAAM,CAACC,OAAO;MAC9CF,KAAK,CAACR,QAAQ,CAACa,SAAS,CAAC,GAAGb,QAAQ;IACtC,CAAC;IACDiB,QAAQ,EAAEA,CAACT,KAAK,EAAEC,MAA8C,KAAK;MACnED,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDQ,gBAAgB,EAAEA,CAACV,KAAK,EAAEC,MAAiE,KAAK;MAC9F,MAAM;QAAEU,MAAM;QAAEC;MAAO,CAAC,GAAGX,MAAM,CAACC,OAAO;MACzC,IAAIF,KAAK,CAACP,KAAK,CAACkB,MAAM,CAAC,EAAE;QACvBX,KAAK,CAACP,KAAK,CAACkB,MAAM,CAAC,CAACC,MAAM,GAAGA,MAAM;MACrC;IACF,CAAC;IACDC,UAAU,EAAEA,CAACb,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACDY,QAAQ,EAAEA,CAACd,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,gBAAgB;EAChBI,WAAW;EACXC,UAAU;EACVI,WAAW;EACXC,QAAQ;EACRC,gBAAgB;EAChBG,UAAU;EACVC;AACF,CAAC,GAAGlB,SAAS,CAACmB,OAAO;AAErB,eAAenB,SAAS,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}