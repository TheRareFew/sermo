{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useRef, useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { addReaction, removeReaction } from '../../../services/api/reactions';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { prependMessages, updateMessage } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  var _messages, _messages$, _messages$3;\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete,\n    channelId\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const lastMessageRef = useRef(((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.id) || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef(((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  const [selectedMessage, setSelectedMessage] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Add logging to debug user state\n  useEffect(() => {\n    console.log('Current user state:', currentUser);\n    console.log('Users state:', users);\n  }, [currentUser, users]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    var _messages$2;\n    if (!containerRef.current) return;\n    const newChannelId = (_messages$2 = messages[0]) === null || _messages$2 === void 0 ? void 0 : _messages$2.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      var _messages2;\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = (_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n    isInitialRender.current = false;\n  }, [(_messages$3 = messages[0]) === null || _messages$3 === void 0 ? void 0 : _messages$3.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage === null || oldFirstMessage === void 0 ? void 0 : oldFirstMessage.getBoundingClientRect().top;\n      const olderMessages = await getChannelMessages(channelId, 50,\n      // limit\n      messages.length // skip\n      );\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n\n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n\n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    var _messages3, _messages4, _messages5;\n    if (!containerRef.current || isInitialRender.current) return;\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = ((_messages3 = messages[messages.length - 1]) === null || _messages3 === void 0 ? void 0 : _messages3.id) !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && ((_messages4 = messages[messages.length - 1]) === null || _messages4 === void 0 ? void 0 : _messages4.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    }\n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || isNewMessage && isAtBottom) {\n      container.scrollTop = container.scrollHeight;\n    }\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = (_messages5 = messages[messages.length - 1]) === null || _messages5 === void 0 ? void 0 : _messages5.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = async messageId => {\n    console.log('Toggle replies:', messageId);\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If replies are not loaded yet, load them\n    if (!message.repliesLoaded) {\n      try {\n        const fetchedReplies = await getReplies(messageId);\n        const transformedReplies = fetchedReplies.map(transformMessage);\n        dispatch(updateMessage({\n          channelId: message.channelId,\n          messageId: messageId,\n          message: {\n            replies: transformedReplies,\n            repliesLoaded: true,\n            isExpanded: true\n          }\n        }));\n      } catch (error) {\n        console.error('Failed to load replies:', error);\n        dispatch(setError('Failed to load replies'));\n      }\n    } else {\n      // Just toggle visibility if replies are already loaded\n      dispatch(updateMessage({\n        channelId: message.channelId,\n        messageId: messageId,\n        message: {\n          isExpanded: !message.isExpanded\n        }\n      }));\n    }\n  };\n  const handleReply = messageId => {\n    console.log('Reply to message:', messageId);\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setSelectedMessage(message);\n      setReplyModalOpen(true);\n    }\n  };\n  const handleReplySubmit = async content => {\n    if (!selectedMessage) return;\n    try {\n      const reply = await createReply(selectedMessage.id, content);\n      console.log('Reply created:', reply);\n      // The WebSocket handler will add the message to the store\n    } catch (error) {\n      console.error('Failed to create reply:', error);\n      dispatch(setError('Failed to create reply'));\n    }\n  };\n  const handleReactionAdd = async (messageId, emoji) => {\n    try {\n      console.log('Adding reaction to message:', messageId, emoji);\n      await addReaction(messageId, emoji);\n      console.log('Reaction added successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to add reaction:', error);\n      dispatch(setError('Failed to add reaction'));\n    }\n  };\n  const handleReactionRemove = async (messageId, emoji) => {\n    try {\n      console.log('Removing reaction from message:', messageId, emoji);\n      await removeReaction(messageId, emoji);\n      console.log('Reaction removed successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to remove reaction:', error);\n      dispatch(setError('Failed to remove reaction'));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      children: /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n          children: \"Loading older messages...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this), [...messages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()).map(message => {\n          var _users$message$userId, _currentUser$id, _currentUser$id2;\n          return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n            $isSelected: message.id === selectedMessageId,\n            \"data-message-id\": message.id,\n            children: [/*#__PURE__*/_jsxDEV(Message, {\n              id: message.id,\n              content: message.content,\n              sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n              timestamp: message.createdAt,\n              userId: message.userId,\n              currentUserId: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$id = currentUser.id) === null || _currentUser$id === void 0 ? void 0 : _currentUser$id.toString(),\n              onDelete: () => handleDeleteMessage(message.id),\n              replyCount: message.replyCount || 0,\n              isExpanded: message.isExpanded || false,\n              onToggleReplies: () => handleToggleReplies(message.id),\n              onReply: () => handleReply(message.id),\n              isReply: false,\n              reactions: message.reactions || [],\n              onReactionAdd: emoji => handleReactionAdd(message.id, emoji),\n              onReactionRemove: emoji => handleReactionRemove(message.id, emoji)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, this), message.isExpanded && message.replies && /*#__PURE__*/_jsxDEV(MessageReplies, {\n              parentId: message.id,\n              replies: message.replies,\n              currentUserId: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$id2 = currentUser.id) === null || _currentUser$id2 === void 0 ? void 0 : _currentUser$id2.toString(),\n              isExpanded: message.isExpanded,\n              onToggleReplies: () => handleToggleReplies(message.id),\n              onDelete: handleDeleteMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this)]\n          }, message.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), selectedMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: replyModalOpen,\n      onClose: () => setReplyModalOpen(false),\n      onSubmit: handleReplySubmit,\n      parentMessage: selectedMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"cj3E4e7RsvsLCI18AazB9wBIaxA=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"cj3E4e7RsvsLCI18AazB9wBIaxA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","forwardRef","useRef","useState","useEffect","useCallback","useDispatch","useSelector","styled","Message","MessageReplies","ReplyModal","getChannelMessages","createReply","getReplies","addReaction","removeReaction","setError","prependMessages","updateMessage","transformMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","_messages","_messages$","_messages$3","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","channelId","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","lastMessageRef","length","id","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","isUserScrolling","currentChannelRef","isInitialRender","isLoadingMore","setIsLoadingMore","replyModalOpen","setReplyModalOpen","selectedMessage","setSelectedMessage","dispatch","currentUser","users","state","auth","user","chat","console","log","current","clearTimeout","_messages$2","newChannelId","channelChanged","_messages2","requestAnimationFrame","scrollTop","scrollHeight","setTimeout","loadOlderMessages","container","oldScrollHeight","oldFirstMessage","querySelector","oldFirstMessageTop","getBoundingClientRect","top","olderMessages","transformedMessages","map","newScrollHeight","heightDifference","newFirstMessageTop","topDifference","error","scrollTimeout","handleScroll","addEventListener","removeEventListener","_messages3","_messages4","_messages5","isAtBottom","clientHeight","hasNewMessages","isNewMessage","isOwnMessage","userId","messageElement","scrollIntoView","behavior","block","classList","add","remove","handleDeleteMessage","messageId","handleToggleReplies","message","find","m","repliesLoaded","fetchedReplies","transformedReplies","replies","isExpanded","handleReply","handleReplySubmit","content","reply","handleReactionAdd","emoji","handleReactionRemove","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","Date","createdAt","getTime","_users$message$userId","_currentUser$id","_currentUser$id2","sender","username","timestamp","currentUserId","toString","onDelete","replyCount","onToggleReplies","onReply","isReply","reactions","onReactionAdd","onReactionRemove","parentId","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { forwardRef, useRef, useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { RootState, User, StoreMessage } from '../../../types';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { addReaction, removeReaction } from '../../../services/api/reactions';\nimport { setError } from '../../../store/chat/chatSlice';\nimport { prependMessages, updateMessage } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n  channelId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete, channelId } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const lastMessageRef = useRef<string | null>(messages[messages.length - 1]?.id || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef<string | null>(messages[0]?.channelId || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  const [selectedMessage, setSelectedMessage] = useState<StoreMessage | null>(null);\n  const dispatch = useDispatch();\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Add logging to debug user state\n  useEffect(() => {\n    console.log('Current user state:', currentUser);\n    console.log('Users state:', users);\n  }, [currentUser, users]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const newChannelId = messages[0]?.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    \n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = messages[messages.length - 1]?.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n\n    isInitialRender.current = false;\n  }, [messages[0]?.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage?.getBoundingClientRect().top;\n\n      const olderMessages = await getChannelMessages(\n        channelId,\n        50, // limit\n        messages.length // skip\n      );\n\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n          \n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n          \n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current || isInitialRender.current) return;\n\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = messages[messages.length - 1]?.id !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && messages[messages.length - 1]?.userId === currentUser?.id;\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(\n        `[data-message-id=\"${selectedMessageId}\"]`\n      ) as HTMLElement;\n      \n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        \n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        \n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    } \n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || (isNewMessage && isAtBottom)) {\n      container.scrollTop = container.scrollHeight;\n    }\n\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = messages[messages.length - 1]?.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser?.id]);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = async (messageId: string) => {\n    console.log('Toggle replies:', messageId);\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    // If replies are not loaded yet, load them\n    if (!message.repliesLoaded) {\n      try {\n        const fetchedReplies = await getReplies(messageId);\n        const transformedReplies = fetchedReplies.map(transformMessage);\n        \n        dispatch(updateMessage({\n          channelId: message.channelId,\n          messageId: messageId,\n          message: {\n            replies: transformedReplies,\n            repliesLoaded: true,\n            isExpanded: true\n          }\n        }));\n      } catch (error) {\n        console.error('Failed to load replies:', error);\n        dispatch(setError('Failed to load replies'));\n      }\n    } else {\n      // Just toggle visibility if replies are already loaded\n      dispatch(updateMessage({\n        channelId: message.channelId,\n        messageId: messageId,\n        message: {\n          isExpanded: !message.isExpanded\n        }\n      }));\n    }\n  };\n\n  const handleReply = (messageId: string) => {\n    console.log('Reply to message:', messageId);\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setSelectedMessage(message);\n      setReplyModalOpen(true);\n    }\n  };\n\n  const handleReplySubmit = async (content: string) => {\n    if (!selectedMessage) return;\n    \n    try {\n      const reply = await createReply(selectedMessage.id, content);\n      console.log('Reply created:', reply);\n      // The WebSocket handler will add the message to the store\n    } catch (error) {\n      console.error('Failed to create reply:', error);\n      dispatch(setError('Failed to create reply'));\n    }\n  };\n\n  const handleReactionAdd = async (messageId: string, emoji: string) => {\n    try {\n      console.log('Adding reaction to message:', messageId, emoji);\n      await addReaction(messageId, emoji);\n      console.log('Reaction added successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to add reaction:', error);\n      dispatch(setError('Failed to add reaction'));\n    }\n  };\n\n  const handleReactionRemove = async (messageId: string, emoji: string) => {\n    try {\n      console.log('Removing reaction from message:', messageId, emoji);\n      await removeReaction(messageId, emoji);\n      console.log('Reaction removed successfully, waiting for WebSocket event');\n    } catch (error) {\n      console.error('Failed to remove reaction:', error);\n      dispatch(setError('Failed to remove reaction'));\n    }\n  };\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef}>\n        <MessagesWrapper>\n          {isLoadingMore && (\n            <LoadingIndicator>Loading older messages...</LoadingIndicator>\n          )}\n          {[...messages].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()).map(message => (\n            <MessageWrapper\n              key={message.id}\n              $isSelected={message.id === selectedMessageId}\n              data-message-id={message.id}\n            >\n              <Message\n                id={message.id}\n                content={message.content}\n                sender={users[message.userId]?.username || message.userId}\n                timestamp={message.createdAt}\n                userId={message.userId}\n                currentUserId={currentUser?.id?.toString()}\n                onDelete={() => handleDeleteMessage(message.id)}\n                replyCount={message.replyCount || 0}\n                isExpanded={message.isExpanded || false}\n                onToggleReplies={() => handleToggleReplies(message.id)}\n                onReply={() => handleReply(message.id)}\n                isReply={false}\n                reactions={message.reactions || []}\n                onReactionAdd={(emoji) => handleReactionAdd(message.id, emoji)}\n                onReactionRemove={(emoji) => handleReactionRemove(message.id, emoji)}\n              />\n              {message.isExpanded && message.replies && (\n                <MessageReplies\n                  parentId={message.id}\n                  replies={message.replies}\n                  currentUserId={currentUser?.id?.toString()}\n                  isExpanded={message.isExpanded}\n                  onToggleReplies={() => handleToggleReplies(message.id)}\n                  onDelete={handleDeleteMessage}\n                />\n              )}\n            </MessageWrapper>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      {selectedMessage && (\n        <ReplyModal\n          isOpen={replyModalOpen}\n          onClose={() => setReplyModalOpen(false)}\n          onSubmit={handleReplySubmit}\n          parentMessage={selectedMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}