{"ast":null,"code":"import { getAuthToken } from './auth';\n// Hardcode the API URL for now\nexport const API_URL = 'http://localhost:8000/api';\nexport async function apiRequest(endpoint, options = {}) {\n  const {\n    requiresAuth = true,\n    headers = {},\n    ...rest\n  } = options;\n  const requestHeaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    ...headers\n  };\n  if (requiresAuth) {\n    const token = getAuthToken();\n    if (!token) {\n      console.error('No auth token available');\n      throw new Error('No auth token available');\n    }\n    requestHeaders['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Remove any leading slashes from the endpoint\n  const cleanEndpoint = endpoint.replace(/^\\/+/, '');\n  const url = `${API_URL}/${cleanEndpoint}`;\n  console.log(`Making API request to ${url}`, {\n    method: rest.method || 'GET',\n    headers: requestHeaders,\n    body: rest.body ? JSON.parse(rest.body) : undefined\n  });\n  try {\n    const response = await fetch(url, {\n      headers: requestHeaders,\n      credentials: 'include',\n      ...rest\n    });\n    console.log(`Response status for ${endpoint}:`, response.status);\n    console.log(`Response headers for ${endpoint}:`, Object.fromEntries(response.headers.entries()));\n    let data;\n    const contentType = response.headers.get('content-type');\n    const responseText = await response.text();\n    console.log(`Raw response text for ${endpoint}:`, responseText);\n    try {\n      if (responseText) {\n        try {\n          data = JSON.parse(responseText);\n          console.log(`Parsed response data for ${endpoint}:`, data);\n        } catch (parseError) {\n          console.warn(`Response is not JSON for ${endpoint}, using raw text`);\n          data = responseText;\n        }\n      } else {\n        console.log(`Empty response for ${endpoint}`);\n        data = null;\n      }\n    } catch (error) {\n      console.error(`Error processing response for ${endpoint}:`, error);\n      throw new Error(`Failed to process response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n    if (!response.ok) {\n      console.error(`API error for ${endpoint}:`, {\n        status: response.status,\n        statusText: response.statusText,\n        data\n      });\n      let errorMessage = 'An error occurred';\n      if (typeof data === 'object' && data !== null) {\n        errorMessage = JSON.stringify(data);\n      } else if (typeof data === 'string') {\n        errorMessage = data;\n      }\n      throw new Error(`API error (${response.status}): ${errorMessage}`);\n    }\n    if (data === null && !response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error(`Request failed for ${endpoint}:`, {\n      error,\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n    throw error instanceof Error ? error : new Error('API request failed');\n  }\n}\nexport function getAuthHeaders() {\n  const token = getAuthToken();\n  if (!token) {\n    throw new Error('No auth token available');\n  }\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n}","map":{"version":3,"names":["getAuthToken","API_URL","apiRequest","endpoint","options","requiresAuth","headers","rest","requestHeaders","token","console","error","Error","cleanEndpoint","replace","url","log","method","body","JSON","parse","undefined","response","fetch","credentials","status","Object","fromEntries","entries","data","contentType","get","responseText","text","parseError","warn","message","ok","statusText","errorMessage","stringify","getAuthHeaders"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/utils.ts"],"sourcesContent":["import { getAuthToken } from './auth';\r\n\r\nexport interface ApiRequestOptions extends Omit<RequestInit, 'headers'> {\r\n  requiresAuth?: boolean;\r\n  headers?: Record<string, string>;\r\n}\r\n\r\n// Hardcode the API URL for now\r\nexport const API_URL = 'http://localhost:8000/api';\r\n\r\nexport async function apiRequest<T>(\r\n  endpoint: string,\r\n  options: ApiRequestOptions = {}\r\n): Promise<T> {\r\n  const { requiresAuth = true, headers = {}, ...rest } = options;\r\n  \r\n  const requestHeaders: Record<string, string> = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    ...headers,\r\n  };\r\n\r\n  if (requiresAuth) {\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      console.error('No auth token available');\r\n      throw new Error('No auth token available');\r\n    }\r\n    requestHeaders['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  // Remove any leading slashes from the endpoint\r\n  const cleanEndpoint = endpoint.replace(/^\\/+/, '');\r\n  const url = `${API_URL}/${cleanEndpoint}`;\r\n  \r\n  console.log(`Making API request to ${url}`, {\r\n    method: rest.method || 'GET',\r\n    headers: requestHeaders,\r\n    body: rest.body ? JSON.parse(rest.body as string) : undefined,\r\n  });\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: requestHeaders,\r\n      credentials: 'include',\r\n      ...rest,\r\n    });\r\n\r\n    console.log(`Response status for ${endpoint}:`, response.status);\r\n    console.log(`Response headers for ${endpoint}:`, Object.fromEntries(response.headers.entries()));\r\n\r\n    let data;\r\n    const contentType = response.headers.get('content-type');\r\n    const responseText = await response.text();\r\n    \r\n    console.log(`Raw response text for ${endpoint}:`, responseText);\r\n\r\n    try {\r\n      if (responseText) {\r\n        try {\r\n          data = JSON.parse(responseText);\r\n          console.log(`Parsed response data for ${endpoint}:`, data);\r\n        } catch (parseError) {\r\n          console.warn(`Response is not JSON for ${endpoint}, using raw text`);\r\n          data = responseText;\r\n        }\r\n      } else {\r\n        console.log(`Empty response for ${endpoint}`);\r\n        data = null;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error processing response for ${endpoint}:`, error);\r\n      throw new Error(`Failed to process response: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      console.error(`API error for ${endpoint}:`, {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        data\r\n      });\r\n\r\n      let errorMessage = 'An error occurred';\r\n      if (typeof data === 'object' && data !== null) {\r\n        errorMessage = JSON.stringify(data);\r\n      } else if (typeof data === 'string') {\r\n        errorMessage = data;\r\n      }\r\n\r\n      throw new Error(`API error (${response.status}): ${errorMessage}`);\r\n    }\r\n\r\n    if (data === null && !response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Request failed for ${endpoint}:`, {\r\n      error,\r\n      message: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n    throw error instanceof Error ? error : new Error('API request failed');\r\n  }\r\n}\r\n\r\nexport function getAuthHeaders(): Record<string, string> {\r\n  const token = getAuthToken();\r\n  if (!token) {\r\n    throw new Error('No auth token available');\r\n  }\r\n  \r\n  return {\r\n    'Authorization': `Bearer ${token}`,\r\n    'Content-Type': 'application/json',\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}