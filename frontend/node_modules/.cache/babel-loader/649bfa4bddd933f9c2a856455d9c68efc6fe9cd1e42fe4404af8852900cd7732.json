{"ast":null,"code":"import { store } from '../../store';\nimport { addMessage, updateMessage } from '../../store/messages/messagesSlice';\nimport { updateUserStatus } from '../../store/chat/chatSlice';\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.pingInterval = null;\n    this.channels = new Set();\n  }\n  connect() {\n    var _this$ws;\n    if (((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN) return;\n\n    // Use secure WebSocket if the page is served over HTTPS\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    this.ws = new WebSocket(wsUrl);\n    this.ws.onopen = this.handleOpen.bind(this);\n    this.ws.onmessage = this.handleMessage.bind(this);\n    this.ws.onclose = this.handleClose.bind(this);\n    this.ws.onerror = this.handleError.bind(this);\n  }\n  handleOpen() {\n    console.log('WebSocket connected');\n    this.reconnectAttempts = 0;\n    this.startPingInterval();\n\n    // Rejoin all channels\n    this.channels.forEach(channelId => {\n      this.joinChannel(channelId);\n    });\n  }\n  handleMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket message received:', data);\n      switch (data.type) {\n        case 'NEW_MESSAGE':\n          if (data.channelId && data.message) {\n            store.dispatch(addMessage({\n              channelId: data.channelId,\n              message: data.message\n            }));\n          }\n          break;\n        case 'UPDATE_MESSAGE':\n          if (data.channelId && data.id && data.updates) {\n            store.dispatch(updateMessage({\n              channelId: data.channelId,\n              id: data.id,\n              message: data.updates\n            }));\n          }\n          break;\n        case 'USER_STATUS':\n          if (data.userId && data.status) {\n            store.dispatch(updateUserStatus({\n              userId: data.userId,\n              status: data.status\n            }));\n          }\n          break;\n        case 'PONG':\n          // Handle pong response\n          break;\n        default:\n          console.warn('Unknown message type:', data.type);\n      }\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n    }\n  }\n  handleClose() {\n    console.log('WebSocket disconnected');\n    this.stopPingInterval();\n    this.attemptReconnect();\n  }\n  handleError(error) {\n    console.error('WebSocket error:', error);\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      return;\n    }\n    this.reconnectAttempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n    this.reconnectTimeout = setTimeout(() => {\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      this.connect();\n    }, delay);\n  }\n  startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      this.send({\n        type: 'PING'\n      });\n    }, 30000);\n  }\n  stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n  }\n  send(data) {\n    var _this$ws2;\n    if (((_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.readyState) === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n  joinChannel(channelId) {\n    this.channels.add(channelId);\n    this.send({\n      type: 'JOIN_CHANNEL',\n      channelId\n    });\n  }\n  leaveChannel(channelId) {\n    this.channels.delete(channelId);\n    this.send({\n      type: 'LEAVE_CHANNEL',\n      channelId\n    });\n  }\n  disconnect() {\n    this.channels.clear();\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    this.stopPingInterval();\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["store","addMessage","updateMessage","updateUserStatus","WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","pingInterval","channels","Set","connect","_this$ws","readyState","WebSocket","OPEN","protocol","window","location","wsUrl","host","onopen","handleOpen","bind","onmessage","handleMessage","onclose","handleClose","onerror","handleError","console","log","startPingInterval","forEach","channelId","joinChannel","event","data","JSON","parse","type","message","dispatch","id","updates","userId","status","warn","error","stopPingInterval","attemptReconnect","delay","Math","min","pow","setTimeout","setInterval","send","clearInterval","_this$ws2","stringify","add","leaveChannel","delete","disconnect","clear","close","clearTimeout"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { Message, User, StoreMessage } from '../../types';\r\nimport { store } from '../../store';\r\nimport { addMessage, updateMessage } from '../../store/messages/messagesSlice';\r\nimport { updateUserStatus } from '../../store/chat/chatSlice';\r\n\r\ninterface WebSocketMessage {\r\n  type: 'NEW_MESSAGE' | 'UPDATE_MESSAGE' | 'USER_STATUS' | 'PING' | 'PONG' | 'JOIN_CHANNEL' | 'LEAVE_CHANNEL';\r\n  channelId?: string;\r\n  message?: StoreMessage;\r\n  id?: string;\r\n  updates?: Partial<StoreMessage>;\r\n  userId?: string;\r\n  status?: 'online' | 'offline' | 'away' | 'busy';\r\n}\r\n\r\nclass WebSocketService {\r\n  private ws: WebSocket | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private pingInterval: NodeJS.Timeout | null = null;\r\n  private channels: Set<string> = new Set();\r\n\r\n  connect() {\r\n    if (this.ws?.readyState === WebSocket.OPEN) return;\r\n\r\n    // Use secure WebSocket if the page is served over HTTPS\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\r\n    \r\n    this.ws = new WebSocket(wsUrl);\r\n    \r\n    this.ws.onopen = this.handleOpen.bind(this);\r\n    this.ws.onmessage = this.handleMessage.bind(this);\r\n    this.ws.onclose = this.handleClose.bind(this);\r\n    this.ws.onerror = this.handleError.bind(this);\r\n  }\r\n\r\n  private handleOpen() {\r\n    console.log('WebSocket connected');\r\n    this.reconnectAttempts = 0;\r\n    this.startPingInterval();\r\n    \r\n    // Rejoin all channels\r\n    this.channels.forEach(channelId => {\r\n      this.joinChannel(channelId);\r\n    });\r\n  }\r\n\r\n  private handleMessage(event: MessageEvent) {\r\n    try {\r\n      const data = JSON.parse(event.data) as WebSocketMessage;\r\n      console.log('WebSocket message received:', data);\r\n\r\n      switch (data.type) {\r\n        case 'NEW_MESSAGE':\r\n          if (data.channelId && data.message) {\r\n            store.dispatch(addMessage({\r\n              channelId: data.channelId,\r\n              message: data.message\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'UPDATE_MESSAGE':\r\n          if (data.channelId && data.id && data.updates) {\r\n            store.dispatch(updateMessage({\r\n              channelId: data.channelId,\r\n              id: data.id,\r\n              message: data.updates\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'USER_STATUS':\r\n          if (data.userId && data.status) {\r\n            store.dispatch(updateUserStatus({\r\n              userId: data.userId,\r\n              status: data.status\r\n            }));\r\n          }\r\n          break;\r\n\r\n        case 'PONG':\r\n          // Handle pong response\r\n          break;\r\n\r\n        default:\r\n          console.warn('Unknown message type:', data.type);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling WebSocket message:', error);\r\n    }\r\n  }\r\n\r\n  private handleClose() {\r\n    console.log('WebSocket disconnected');\r\n    this.stopPingInterval();\r\n    this.attemptReconnect();\r\n  }\r\n\r\n  private handleError(error: Event) {\r\n    console.error('WebSocket error:', error);\r\n  }\r\n\r\n  private attemptReconnect() {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.error('Max reconnection attempts reached');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\r\n    \r\n    this.reconnectTimeout = setTimeout(() => {\r\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      this.connect();\r\n    }, delay);\r\n  }\r\n\r\n  private startPingInterval() {\r\n    this.pingInterval = setInterval(() => {\r\n      this.send({ type: 'PING' });\r\n    }, 30000);\r\n  }\r\n\r\n  private stopPingInterval() {\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n      this.pingInterval = null;\r\n    }\r\n  }\r\n\r\n  send(data: WebSocketMessage) {\r\n    if (this.ws?.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(data));\r\n    } else {\r\n      console.warn('WebSocket is not connected');\r\n    }\r\n  }\r\n\r\n  joinChannel(channelId: string) {\r\n    this.channels.add(channelId);\r\n    this.send({\r\n      type: 'JOIN_CHANNEL',\r\n      channelId\r\n    });\r\n  }\r\n\r\n  leaveChannel(channelId: string) {\r\n    this.channels.delete(channelId);\r\n    this.send({\r\n      type: 'LEAVE_CHANNEL',\r\n      channelId\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    this.channels.clear();\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n    this.stopPingInterval();\r\n  }\r\n}\r\n\r\nexport default new WebSocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}