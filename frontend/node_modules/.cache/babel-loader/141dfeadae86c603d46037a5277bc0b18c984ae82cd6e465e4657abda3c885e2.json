{"ast":null,"code":"import { apiRequest } from './utils';\n// Transform API user to our User type\nconst transformUser = apiUser => ({\n  ...apiUser,\n  email: '',\n  // Set default values for required fields that the channel API doesn't provide\n  full_name: apiUser.username // Use username as full_name if not provided\n});\nexport const getChannels = async () => {\n  console.log('Fetching channels...');\n  try {\n    const channels = await apiRequest('/api/channels');\n    console.log('Received channels:', channels);\n    return channels;\n  } catch (error) {\n    console.error('Error fetching channels:', error);\n    throw error;\n  }\n};\nexport const getChannelMessages = async (channelId, limit = 50, skip = 0) => {\n  console.log(`Fetching messages for channel ${channelId} with limit ${limit} and skip ${skip}...`);\n  try {\n    if (!channelId || channelId <= 0) {\n      throw new Error('Invalid channel ID');\n    }\n    if (limit <= 0) {\n      throw new Error('Invalid limit value');\n    }\n    if (skip < 0) {\n      throw new Error('Invalid skip value');\n    }\n    const messages = await apiRequest(`/api/channels/${channelId}/messages?limit=${limit}&skip=${skip}`);\n    console.log('Received messages:', messages);\n\n    // Validate and transform messages\n    const validMessages = messages.filter(msg => msg && msg.id && msg.content && msg.channel_id && msg.sender_id).map(msg => ({\n      ...msg,\n      id: String(msg.id),\n      channel_id: String(msg.channel_id),\n      sender_id: String(msg.sender_id),\n      created_at: msg.created_at || new Date().toISOString()\n    }));\n    console.log('Validated and transformed messages:', validMessages);\n    return validMessages;\n  } catch (error) {\n    console.error(`Error fetching messages for channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const getChannelUsers = async channelId => {\n  console.log(`Fetching users for channel ${channelId}...`);\n  try {\n    const apiUsers = await apiRequest(`/api/channels/${channelId}/users`);\n    console.log('Received users:', apiUsers);\n    const users = apiUsers.map(transformUser);\n    console.log('Transformed users:', users);\n    return users;\n  } catch (error) {\n    console.error(`Error fetching users for channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const createChannel = async (name, description) => {\n  console.log('Creating channel:', {\n    name,\n    description\n  });\n  try {\n    const channel = await apiRequest('/api/channels', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        description\n      })\n    });\n    console.log('Created channel:', channel);\n    return channel;\n  } catch (error) {\n    console.error('Error creating channel:', error);\n    throw error;\n  }\n};\nexport const joinChannel = async channelId => {\n  console.log(`Joining channel ${channelId}...`);\n  try {\n    await apiRequest(`/api/channels/${channelId}/join`, {\n      method: 'POST'\n    });\n    console.log(`Joined channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error joining channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const leaveChannel = async channelId => {\n  console.log(`Leaving channel ${channelId}...`);\n  try {\n    await apiRequest(`/api/channels/${channelId}/leave`, {\n      method: 'POST'\n    });\n    console.log(`Left channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error leaving channel ${channelId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiRequest","transformUser","apiUser","email","full_name","username","getChannels","console","log","channels","error","getChannelMessages","channelId","limit","skip","Error","messages","validMessages","filter","msg","id","content","channel_id","sender_id","map","String","created_at","Date","toISOString","getChannelUsers","apiUsers","users","createChannel","name","description","channel","method","body","JSON","stringify","joinChannel","leaveChannel"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/chat.ts"],"sourcesContent":["import { Channel, Message, User } from '../../types';\nimport { apiRequest } from './utils';\n\ninterface ApiUser {\n  id: number;\n  username: string;\n  status: 'online' | 'offline' | 'away' | 'busy';\n  last_seen: string;\n}\n\n// Transform API user to our User type\nconst transformUser = (apiUser: ApiUser): User => ({\n  ...apiUser,\n  email: '', // Set default values for required fields that the channel API doesn't provide\n  full_name: apiUser.username, // Use username as full_name if not provided\n});\n\nexport const getChannels = async (): Promise<Channel[]> => {\n  console.log('Fetching channels...');\n  try {\n    const channels = await apiRequest<Channel[]>('/api/channels');\n    console.log('Received channels:', channels);\n    return channels;\n  } catch (error) {\n    console.error('Error fetching channels:', error);\n    throw error;\n  }\n};\n\nexport const getChannelMessages = async (channelId: number, limit: number = 50, skip: number = 0): Promise<Message[]> => {\n  console.log(`Fetching messages for channel ${channelId} with limit ${limit} and skip ${skip}...`);\n  try {\n    if (!channelId || channelId <= 0) {\n      throw new Error('Invalid channel ID');\n    }\n\n    if (limit <= 0) {\n      throw new Error('Invalid limit value');\n    }\n\n    if (skip < 0) {\n      throw new Error('Invalid skip value');\n    }\n\n    const messages = await apiRequest<Message[]>(`/api/channels/${channelId}/messages?limit=${limit}&skip=${skip}`);\n    console.log('Received messages:', messages);\n\n    // Validate and transform messages\n    const validMessages = messages\n      .filter(msg => msg && msg.id && msg.content && msg.channel_id && msg.sender_id)\n      .map(msg => ({\n        ...msg,\n        id: String(msg.id),\n        channel_id: String(msg.channel_id),\n        sender_id: String(msg.sender_id),\n        created_at: msg.created_at || new Date().toISOString()\n      }));\n\n    console.log('Validated and transformed messages:', validMessages);\n    return validMessages;\n  } catch (error) {\n    console.error(`Error fetching messages for channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const getChannelUsers = async (channelId: number): Promise<User[]> => {\n  console.log(`Fetching users for channel ${channelId}...`);\n  try {\n    const apiUsers = await apiRequest<ApiUser[]>(`/api/channels/${channelId}/users`);\n    console.log('Received users:', apiUsers);\n    const users = apiUsers.map(transformUser);\n    console.log('Transformed users:', users);\n    return users;\n  } catch (error) {\n    console.error(`Error fetching users for channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const createChannel = async (name: string, description?: string): Promise<Channel> => {\n  console.log('Creating channel:', { name, description });\n  try {\n    const channel = await apiRequest<Channel>('/api/channels', {\n      method: 'POST',\n      body: JSON.stringify({ name, description }),\n    });\n    console.log('Created channel:', channel);\n    return channel;\n  } catch (error) {\n    console.error('Error creating channel:', error);\n    throw error;\n  }\n};\n\nexport const joinChannel = async (channelId: number): Promise<void> => {\n  console.log(`Joining channel ${channelId}...`);\n  try {\n    await apiRequest(`/api/channels/${channelId}/join`, {\n      method: 'POST',\n    });\n    console.log(`Joined channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error joining channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const leaveChannel = async (channelId: number): Promise<void> => {\n  console.log(`Leaving channel ${channelId}...`);\n  try {\n    await apiRequest(`/api/channels/${channelId}/leave`, {\n      method: 'POST',\n    });\n    console.log(`Left channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error leaving channel ${channelId}:`, error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}