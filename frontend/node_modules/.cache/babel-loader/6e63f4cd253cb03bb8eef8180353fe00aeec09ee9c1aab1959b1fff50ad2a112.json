{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, addMessage, setMessages, setUsers, updateUserStatus } from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n_c7 = ChatMessages;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c8 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c9 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c10 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c11 = CreateChannelButton;\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = NoChannelMessage;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n_c13 = LoadingMessage;\nconst validateMessage = msg => {\n  const isValid = typeof msg === 'object' && msg !== null && typeof msg.id === 'number' && typeof msg.content === 'string' && typeof msg.sender_id === 'number' && typeof msg.channel_id === 'number' && typeof msg.created_at === 'string' && (msg.is_system === undefined || typeof msg.is_system === 'boolean');\n  if (!isValid) {\n    console.error('Invalid message format:', {\n      message: msg,\n      validations: {\n        isObject: typeof msg === 'object',\n        notNull: msg !== null,\n        hasValidId: typeof (msg === null || msg === void 0 ? void 0 : msg.id) === 'number',\n        hasValidContent: typeof (msg === null || msg === void 0 ? void 0 : msg.content) === 'string',\n        hasValidSenderId: typeof (msg === null || msg === void 0 ? void 0 : msg.sender_id) === 'number',\n        hasValidChannelId: typeof (msg === null || msg === void 0 ? void 0 : msg.channel_id) === 'number',\n        hasValidCreatedAt: typeof (msg === null || msg === void 0 ? void 0 : msg.created_at) === 'string',\n        hasValidIsSystem: (msg === null || msg === void 0 ? void 0 : msg.is_system) === undefined || typeof (msg === null || msg === void 0 ? void 0 : msg.is_system) === 'boolean'\n      }\n    });\n  }\n  return isValid;\n};\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef(null);\n  const messagesContainerRef = useRef(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const channels = useSelector(state => state.chat.channels);\n  const messages = useSelector(state => {\n    const channelMessages = state.chat.messages[activeChannelId] || [];\n    console.log('Raw messages from state:', JSON.stringify(channelMessages, null, 2));\n\n    // Validate message format\n    const validMessages = channelMessages.filter(validateMessage);\n    if (validMessages.length !== channelMessages.length) {\n      console.error('Some messages have invalid format:', channelMessages.filter(msg => !validateMessage(msg)));\n    }\n    return validMessages;\n  });\n  const users = useSelector(state => state.chat.users);\n  const MESSAGES_PER_PAGE = 30;\n\n  // Function to scroll to bottom of messages\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // Handle scroll to load more messages\n  const handleScroll = async e => {\n    const div = e.currentTarget;\n    if (div.scrollTop === 0 && !isLoadingMore && hasMoreMessages && activeChannelId) {\n      setIsLoadingMore(true);\n      try {\n        var _messages$;\n        const oldestMessageId = (_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.id;\n        const olderMessages = await getChannelMessages(activeChannelId, MESSAGES_PER_PAGE);\n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        if (olderMessages.length > 0) {\n          // Filter out messages we already have\n          const newMessages = olderMessages.filter(msg => !messages.some(existing => existing.id === msg.id));\n          if (newMessages.length > 0) {\n            dispatch(setMessages({\n              channelId: activeChannelId,\n              messages: [...newMessages, ...messages].sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n            }));\n\n            // Maintain scroll position\n            const currentMessage = document.getElementById(`message-${oldestMessageId}`);\n            if (currentMessage) {\n              currentMessage.scrollIntoView();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n  useEffect(() => {\n    // Initial data fetch\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const channelsData = await getChannels();\n        console.log('Channels data:', channelsData);\n        dispatch(setChannels(channelsData));\n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          console.log('Setting active channel:', firstChannelId);\n          dispatch(setActiveChannel(firstChannelId));\n          const [messagesData, usersData] = await Promise.all([getChannelMessages(firstChannelId, MESSAGES_PER_PAGE), getChannelUsers(firstChannelId)]);\n          console.log('Raw messages data:', JSON.stringify(messagesData, null, 2));\n\n          // Validate messages before dispatching\n          const validMessages = messagesData.filter(validateMessage);\n          if (validMessages.length !== messagesData.length) {\n            console.error('Some messages have invalid format:', messagesData.filter(msg => !validateMessage(msg)));\n          }\n          dispatch(setMessages({\n            channelId: firstChannelId,\n            messages: validMessages.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n          }));\n          dispatch(setUsers(usersData));\n          wsService.joinChannel(firstChannelId);\n          setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    wsService.connect();\n    fetchInitialData();\n\n    // WebSocket event handlers\n    const messageHandler = data => {\n      console.log('Received WebSocket message:', data);\n      if (data.type === 'message' && data.id && data.content && data.sender_id && data.channel_id && data.created_at) {\n        const message = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at,\n          is_system: data.is_system\n        };\n        console.log('Adding new message:', message);\n        dispatch(addMessage(message));\n        scrollToBottom();\n      }\n    };\n    const presenceHandler = data => {\n      if (data.type === 'presence_update' && data.user_id && data.status) {\n        dispatch(updateUserStatus({\n          userId: data.user_id,\n          status: data.status\n        }));\n      }\n    };\n    wsService.onMessage(messageHandler);\n    wsService.onPresence(presenceHandler);\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n  const handleChannelClick = async channelId => {\n    if (channelId === activeChannelId) return;\n    console.log('Switching to channel:', channelId);\n    dispatch(setActiveChannel(channelId));\n    setHasMoreMessages(true);\n    try {\n      const [messagesData, usersData] = await Promise.all([getChannelMessages(channelId, MESSAGES_PER_PAGE), getChannelUsers(channelId)]);\n      console.log('Channel messages:', messagesData);\n      console.log('Channel users:', usersData);\n      dispatch(setMessages({\n        channelId,\n        messages: messagesData.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n      }));\n      dispatch(setUsers(usersData));\n      wsService.joinChannel(channelId);\n      setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n      scrollToBottom();\n    } catch (error) {\n      console.error('Failed to fetch channel data:', error);\n    }\n  };\n\n  // Scroll to bottom on initial load and channel change\n  useEffect(() => {\n    scrollToBottom();\n  }, [activeChannelId]);\n  const handleLogout = () => {\n    wsService.disconnect();\n    dispatch(logout());\n  };\n  const activeChannel = channels.find(c => c.id === activeChannelId);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n          name: channel.name,\n          isActive: channel.id === activeChannelId,\n          hasUnread: false // TODO: Implement unread tracking\n          ,\n          isDirect: channel.is_direct_message,\n          onClick: () => handleChannelClick(channel.id)\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: messagesContainerRef,\n        onScroll: handleScroll,\n        children: !activeChannel ? /*#__PURE__*/_jsxDEV(NoChannelMessage, {\n          children: channels.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Welcome to SERMO! Click the \\\"+New\\\" button above to create your first channel.\"\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Select a channel from the sidebar to start chatting.\"\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n            children: \"Loading older messages...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 17\n          }, this), console.log('Rendering messages:', messages), messages.map(msg => {\n            var _users$msg$sender_id;\n            console.log('Rendering message:', msg);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              id: `message-${msg.id}`,\n              children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n                content: msg.content,\n                sender: ((_users$msg$sender_id = users[msg.sender_id]) === null || _users$msg$sender_id === void 0 ? void 0 : _users$msg$sender_id.username) || 'Unknown',\n                timestamp: msg.created_at,\n                isSystem: msg.is_system\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 21\n              }, this)\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 19\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef,\n            style: {\n              height: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: activeChannel && /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannel.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"5KLg5hYxltn5WOQoMkgaVSYoPpA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c14 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatMessages\");\n$RefreshReg$(_c8, \"ChatInput\");\n$RefreshReg$(_c9, \"LogoutButton\");\n$RefreshReg$(_c10, \"ChannelHeader\");\n$RefreshReg$(_c11, \"CreateChannelButton\");\n$RefreshReg$(_c12, \"NoChannelMessage\");\n$RefreshReg$(_c13, \"LoadingMessage\");\n$RefreshReg$(_c14, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","addMessage","setMessages","setUsers","updateUserStatus","Button","ChatMessage","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","wsService","getChannels","getChannelMessages","getChannelUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatMessages","_c7","ChatInput","_c8","LogoutButton","button","error","_c9","ChannelHeader","_c10","CreateChannelButton","_c11","NoChannelMessage","secondary","_c12","LoadingMessage","textSecondary","_c13","validateMessage","msg","isValid","id","content","sender_id","channel_id","created_at","is_system","undefined","console","message","validations","isObject","notNull","hasValidId","hasValidContent","hasValidSenderId","hasValidChannelId","hasValidCreatedAt","hasValidIsSystem","MainLayout","_s","dispatch","messagesEndRef","messagesContainerRef","isCreateModalOpen","setIsCreateModalOpen","isLoadingMore","setIsLoadingMore","hasMoreMessages","setHasMoreMessages","activeChannelId","state","chat","channels","messages","channelMessages","log","JSON","stringify","validMessages","filter","length","users","MESSAGES_PER_PAGE","scrollToBottom","current","scrollIntoView","behavior","handleScroll","e","currentTarget","scrollTop","_messages$","oldestMessageId","olderMessages","newMessages","some","existing","channelId","sort","a","b","Date","getTime","currentMessage","document","getElementById","fetchInitialData","channelsData","firstChannelId","messagesData","usersData","Promise","all","joinChannel","connect","messageHandler","data","type","presenceHandler","user_id","status","userId","onMessage","onPresence","disconnect","handleChannelClick","handleLogout","activeChannel","find","c","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","map","channel","name","isActive","hasUnread","isDirect","is_direct_message","Object","values","user","username","ref","onScroll","_users$msg$sender_id","sender","timestamp","isSystem","style","height","isOpen","onClose","_c14","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  addMessage,\n  setMessages,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport Button from '../../common/Button';\nimport ChatMessage from '../../common/ChatMessage';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelMessages, getChannelUsers } from '../../../services/api/chat';\nimport { Message, WebSocketMessage } from '../../../types';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst NoChannelMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n\nconst validateMessage = (msg: any): msg is Message => {\n  const isValid = (\n    typeof msg === 'object' &&\n    msg !== null &&\n    typeof msg.id === 'number' &&\n    typeof msg.content === 'string' &&\n    typeof msg.sender_id === 'number' &&\n    typeof msg.channel_id === 'number' &&\n    typeof msg.created_at === 'string' &&\n    (msg.is_system === undefined || typeof msg.is_system === 'boolean')\n  );\n\n  if (!isValid) {\n    console.error('Invalid message format:', {\n      message: msg,\n      validations: {\n        isObject: typeof msg === 'object',\n        notNull: msg !== null,\n        hasValidId: typeof msg?.id === 'number',\n        hasValidContent: typeof msg?.content === 'string',\n        hasValidSenderId: typeof msg?.sender_id === 'number',\n        hasValidChannelId: typeof msg?.channel_id === 'number',\n        hasValidCreatedAt: typeof msg?.created_at === 'string',\n        hasValidIsSystem: msg?.is_system === undefined || typeof msg?.is_system === 'boolean'\n      }\n    });\n  }\n\n  return isValid;\n};\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  \n  const activeChannelId = useSelector((state: any) => state.chat.activeChannelId);\n  const channels = useSelector((state: any) => state.chat.channels);\n  const messages = useSelector((state: any) => {\n    const channelMessages = state.chat.messages[activeChannelId] || [];\n    console.log('Raw messages from state:', JSON.stringify(channelMessages, null, 2));\n    \n    // Validate message format\n    const validMessages = channelMessages.filter(validateMessage);\n    if (validMessages.length !== channelMessages.length) {\n      console.error('Some messages have invalid format:', \n        channelMessages.filter((msg: unknown) => !validateMessage(msg))\n      );\n    }\n    \n    return validMessages;\n  });\n  const users = useSelector((state: any) => state.chat.users);\n\n  const MESSAGES_PER_PAGE = 30;\n\n  // Function to scroll to bottom of messages\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  // Handle scroll to load more messages\n  const handleScroll = async (e: React.UIEvent<HTMLDivElement>) => {\n    const div = e.currentTarget;\n    if (div.scrollTop === 0 && !isLoadingMore && hasMoreMessages && activeChannelId) {\n      setIsLoadingMore(true);\n      try {\n        const oldestMessageId = messages[0]?.id;\n        const olderMessages = await getChannelMessages(activeChannelId, MESSAGES_PER_PAGE);\n        \n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n\n        if (olderMessages.length > 0) {\n          // Filter out messages we already have\n          const newMessages = olderMessages.filter(msg => \n            !messages.some((existing: Message) => existing.id === msg.id)\n          );\n          if (newMessages.length > 0) {\n            dispatch(setMessages({ \n              channelId: activeChannelId, \n              messages: [...newMessages, ...messages].sort((a, b) => \n                new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n              )\n            }));\n            \n            // Maintain scroll position\n            const currentMessage = document.getElementById(`message-${oldestMessageId}`);\n            if (currentMessage) {\n              currentMessage.scrollIntoView();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Initial data fetch\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const channelsData = await getChannels();\n        console.log('Channels data:', channelsData);\n        dispatch(setChannels(channelsData));\n        \n        if (channelsData.length > 0) {\n          const firstChannelId = channelsData[0].id;\n          console.log('Setting active channel:', firstChannelId);\n          dispatch(setActiveChannel(firstChannelId));\n          \n          const [messagesData, usersData] = await Promise.all([\n            getChannelMessages(firstChannelId, MESSAGES_PER_PAGE),\n            getChannelUsers(firstChannelId)\n          ]);\n          \n          console.log('Raw messages data:', JSON.stringify(messagesData, null, 2));\n          \n          // Validate messages before dispatching\n          const validMessages = messagesData.filter(validateMessage);\n          if (validMessages.length !== messagesData.length) {\n            console.error('Some messages have invalid format:', \n              messagesData.filter(msg => !validateMessage(msg))\n            );\n          }\n          \n          dispatch(setMessages({ \n            channelId: firstChannelId, \n            messages: validMessages.sort((a, b) => \n              new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n            )\n          }));\n          dispatch(setUsers(usersData));\n          wsService.joinChannel(firstChannelId);\n          setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    wsService.connect();\n    fetchInitialData();\n\n    // WebSocket event handlers\n    const messageHandler = (data: WebSocketMessage) => {\n      console.log('Received WebSocket message:', data);\n      if (data.type === 'message' && data.id && data.content && data.sender_id && \n          data.channel_id && data.created_at) {\n        const message: Message = {\n          id: data.id,\n          content: data.content,\n          sender_id: data.sender_id,\n          channel_id: data.channel_id,\n          created_at: data.created_at,\n          is_system: data.is_system\n        };\n        console.log('Adding new message:', message);\n        dispatch(addMessage(message));\n        scrollToBottom();\n      }\n    };\n\n    const presenceHandler = (data: WebSocketMessage) => {\n      if (data.type === 'presence_update' && data.user_id && data.status) {\n        dispatch(updateUserStatus({\n          userId: data.user_id,\n          status: data.status\n        }));\n      }\n    };\n\n    wsService.onMessage(messageHandler);\n    wsService.onPresence(presenceHandler);\n\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  const handleChannelClick = async (channelId: number) => {\n    if (channelId === activeChannelId) return;\n    \n    console.log('Switching to channel:', channelId);\n    dispatch(setActiveChannel(channelId));\n    setHasMoreMessages(true);\n    try {\n      const [messagesData, usersData] = await Promise.all([\n        getChannelMessages(channelId, MESSAGES_PER_PAGE),\n        getChannelUsers(channelId)\n      ]);\n      \n      console.log('Channel messages:', messagesData);\n      console.log('Channel users:', usersData);\n      \n      dispatch(setMessages({ \n        channelId, \n        messages: messagesData.sort((a, b) => \n          new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n        )\n      }));\n      dispatch(setUsers(usersData));\n      wsService.joinChannel(channelId);\n      setHasMoreMessages(messagesData.length === MESSAGES_PER_PAGE);\n      scrollToBottom();\n    } catch (error) {\n      console.error('Failed to fetch channel data:', error);\n    }\n  };\n\n  // Scroll to bottom on initial load and channel change\n  useEffect(() => {\n    scrollToBottom();\n  }, [activeChannelId]);\n\n  const handleLogout = () => {\n    wsService.disconnect();\n    dispatch(logout());\n  };\n\n  const activeChannel = channels.find((c: any) => c.id === activeChannelId);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n          {channels.map((channel: any) => (\n            <ChannelListItem\n              key={channel.id}\n              name={channel.name}\n              isActive={channel.id === activeChannelId}\n              hasUnread={false} // TODO: Implement unread tracking\n              isDirect={channel.is_direct_message}\n              onClick={() => handleChannelClick(channel.id)}\n            />\n          ))}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: any) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'}</h1>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </ChatHeader>\n        <ChatMessages \n          ref={messagesContainerRef} \n          onScroll={handleScroll}\n        >\n          {!activeChannel ? (\n            <NoChannelMessage>\n              {channels.length === 0 ? (\n                <>\n                  Welcome to SERMO! Click the \"+New\" button above to create your first channel.\n                </>\n              ) : (\n                <>\n                  Select a channel from the sidebar to start chatting.\n                </>\n              )}\n            </NoChannelMessage>\n          ) : (\n            <>\n              {isLoadingMore && (\n                <LoadingMessage>Loading older messages...</LoadingMessage>\n              )}\n              {console.log('Rendering messages:', messages)}\n              {messages.map((msg: Message) => {\n                console.log('Rendering message:', msg);\n                return (\n                  <div key={msg.id} id={`message-${msg.id}`}>\n                    <ChatMessage\n                      content={msg.content}\n                      sender={users[msg.sender_id]?.username || 'Unknown'}\n                      timestamp={msg.created_at}\n                      isSystem={msg.is_system}\n                    />\n                  </div>\n                );\n              })}\n              <div ref={messagesEndRef} style={{ height: 1 }} />\n            </>\n          )}\n        </ChatMessages>\n        <ChatInput>\n          {activeChannel && (\n            <MessageInput\n              channelId={activeChannel.id}\n            />\n          )}\n        </ChatInput>\n      </ChatArea>\n      <CreateChannelModal\n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n      />\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}