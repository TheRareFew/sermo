{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c3 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c4 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const prevScrollHeightRef = useRef(0);\n  const prevScrollTopRef = useRef(0);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Store scroll position before messages update\n  useEffect(() => {\n    if (containerRef.current) {\n      prevScrollHeightRef.current = containerRef.current.scrollHeight;\n      prevScrollTopRef.current = containerRef.current.scrollTop;\n    }\n  }, [messages]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Clear any existing scroll timeout\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      scrollTimeoutRef.current = setTimeout(() => {\n        if (!containerRef.current) return;\n        const messageElement = containerRef.current.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          if (highlightTimeoutRef.current) {\n            clearTimeout(highlightTimeoutRef.current);\n          }\n          highlightTimeoutRef.current = setTimeout(() => {\n            messageElement.classList.remove('highlight');\n          }, 1000);\n        }\n      }, 100);\n    }\n    // Only scroll to bottom if no message is selected and we haven't completed initial scroll\n    else if (!selectedMessageId && !initialScrollComplete && messages.length > 0) {\n      scrollTimeoutRef.current = setTimeout(() => {\n        if (!containerRef.current) return;\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n        setInitialScrollComplete(true);\n      }, 100);\n    }\n    // Maintain scroll position when new messages are loaded\n    else if (messages.length !== prevMessagesRef.current.length) {\n      const heightDiff = containerRef.current.scrollHeight - prevScrollHeightRef.current;\n      if (heightDiff > 0 && prevScrollTopRef.current > 0) {\n        containerRef.current.scrollTop = prevScrollTopRef.current + heightDiff;\n      }\n    }\n    prevSelectedMessageRef.current = selectedMessageId;\n  }, [selectedMessageId, messages, initialScrollComplete]);\n\n  // Reset scroll state only on channel changes\n  useEffect(() => {\n    var _messages$, _prevMessagesRef$curr;\n    const channelChanged = ((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) !== ((_prevMessagesRef$curr = prevMessagesRef.current[0]) === null || _prevMessagesRef$curr === void 0 ? void 0 : _prevMessagesRef$curr.channelId);\n    if (channelChanged) {\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      prevScrollHeightRef.current = 0;\n      prevScrollTopRef.current = 0;\n    }\n    prevMessagesRef.current = messages;\n  }, [messages]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = messageId => {\n    console.log('Toggle replies:', messageId);\n  };\n  const handleReply = messageId => {\n    console.log('Reply to message:', messageId);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: messages.map(message => {\n        var _users$message$userId;\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          $isSelected: message.id === selectedMessageId,\n          \"data-message-id\": message.id,\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            content: message.content,\n            sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n            timestamp: message.createdAt,\n            userId: message.userId,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            onDelete: () => handleDeleteMessage(message.id),\n            replyCount: message.replyCount || 0,\n            isExpanded: message.isExpanded || false,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onReply: () => handleReply(message.id),\n            isReply: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), message.isExpanded && message.replies && /*#__PURE__*/_jsxDEV(MessageReplies, {\n            parentId: message.id,\n            replies: message.replies,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            isExpanded: message.isExpanded,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onDelete: handleDeleteMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}, \"t8NtrwZk+V7gQa19oRa8PVE3IjU=\", false, function () {\n  return [useSelector];\n})), \"t8NtrwZk+V7gQa19oRa8PVE3IjU=\", false, function () {\n  return [useSelector];\n});\n_c5 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"MessageWrapper\");\n$RefreshReg$(_c4, \"MessageList$forwardRef\");\n$RefreshReg$(_c5, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","styled","useSelector","Message","MessageReplies","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","MessageWrapper","$isSelected","_c3","MessageList","_s","_c4","ref","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","prevScrollHeightRef","prevScrollTopRef","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","currentUser","users","state","auth","user","chat","current","scrollHeight","scrollTop","clearTimeout","setTimeout","messageElement","querySelector","scrollIntoView","behavior","block","classList","add","remove","length","heightDiff","_messages$","_prevMessagesRef$curr","channelChanged","channelId","handleDeleteMessage","messageId","console","log","handleToggleReplies","handleReply","children","map","message","_users$message$userId","id","content","sender","userId","username","timestamp","createdAt","currentUserId","onDelete","replyCount","isExpanded","onToggleReplies","onReply","isReply","fileName","_jsxFileName","lineNumber","columnNumber","replies","parentId","_c5","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message, { ChatMessageProps } from '../Message';\nimport MessageReplies from '../MessageReplies';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const prevScrollHeightRef = useRef<number>(0);\n  const prevScrollTopRef = useRef<number>(0);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Store scroll position before messages update\n  useEffect(() => {\n    if (containerRef.current) {\n      prevScrollHeightRef.current = containerRef.current.scrollHeight;\n      prevScrollTopRef.current = containerRef.current.scrollTop;\n    }\n  }, [messages]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Clear any existing scroll timeout\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      scrollTimeoutRef.current = setTimeout(() => {\n        if (!containerRef.current) return;\n\n        const messageElement = containerRef.current.querySelector(\n          `[data-message-id=\"${selectedMessageId}\"]`\n        ) as HTMLElement;\n        \n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          \n          if (highlightTimeoutRef.current) {\n            clearTimeout(highlightTimeoutRef.current);\n          }\n          \n          highlightTimeoutRef.current = setTimeout(() => {\n            messageElement.classList.remove('highlight');\n          }, 1000);\n        }\n      }, 100);\n    } \n    // Only scroll to bottom if no message is selected and we haven't completed initial scroll\n    else if (!selectedMessageId && !initialScrollComplete && messages.length > 0) {\n      scrollTimeoutRef.current = setTimeout(() => {\n        if (!containerRef.current) return;\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n        setInitialScrollComplete(true);\n      }, 100);\n    }\n    // Maintain scroll position when new messages are loaded\n    else if (messages.length !== prevMessagesRef.current.length) {\n      const heightDiff = containerRef.current.scrollHeight - prevScrollHeightRef.current;\n      if (heightDiff > 0 && prevScrollTopRef.current > 0) {\n        containerRef.current.scrollTop = prevScrollTopRef.current + heightDiff;\n      }\n    }\n\n    prevSelectedMessageRef.current = selectedMessageId;\n  }, [selectedMessageId, messages, initialScrollComplete]);\n\n  // Reset scroll state only on channel changes\n  useEffect(() => {\n    const channelChanged = messages[0]?.channelId !== prevMessagesRef.current[0]?.channelId;\n    if (channelChanged) {\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      prevScrollHeightRef.current = 0;\n      prevScrollTopRef.current = 0;\n    }\n    prevMessagesRef.current = messages;\n  }, [messages]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    console.log('Toggle replies:', messageId);\n  };\n\n  const handleReply = (messageId: string) => {\n    console.log('Reply to message:', messageId);\n  };\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      <MessagesWrapper>\n        {messages.map(message => (\n          <MessageWrapper\n            key={message.id}\n            $isSelected={message.id === selectedMessageId}\n            data-message-id={message.id}\n          >\n            <Message\n              content={message.content}\n              sender={users[message.userId]?.username || message.userId}\n              timestamp={message.createdAt}\n              userId={message.userId}\n              currentUserId={currentUser?.id}\n              onDelete={() => handleDeleteMessage(message.id)}\n              replyCount={message.replyCount || 0}\n              isExpanded={message.isExpanded || false}\n              onToggleReplies={() => handleToggleReplies(message.id)}\n              onReply={() => handleReply(message.id)}\n              isReply={false}\n            />\n            {message.isExpanded && message.replies && (\n              <MessageReplies\n                parentId={message.id}\n                replies={message.replies}\n                currentUserId={currentUser?.id}\n                isExpanded={message.isExpanded}\n                onToggleReplies={() => handleToggleReplies(message.id)}\n                onDelete={handleDeleteMessage}\n              />\n            )}\n          </MessageWrapper>\n        ))}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}