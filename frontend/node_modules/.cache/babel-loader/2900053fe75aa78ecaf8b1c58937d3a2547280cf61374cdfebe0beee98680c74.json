{"ast":null,"code":"import { apiRequest } from './utils';\nimport { store } from '../../store';\n// Transform API user to our User type\nconst transformUser = apiUser => ({\n  id: apiUser.id,\n  username: apiUser.username,\n  status: apiUser.status || 'offline',\n  avatar_url: undefined\n});\nexport const getChannels = async () => {\n  console.log('Fetching channels...');\n  try {\n    // All channels are accessible by default to all users\n    const channels = await apiRequest('/channels');\n    console.log('Received channels:', channels);\n    return channels;\n  } catch (error) {\n    console.error('Error fetching channels:', error);\n    throw error;\n  }\n};\nexport const getChannelMessages = async (channelId, limit = 50, skip = 0) => {\n  console.log(`[DEBUG] Fetching messages for channel ${channelId} with limit ${limit} and skip ${skip}...`);\n  try {\n    if (!channelId) {\n      throw new Error('Invalid channel ID');\n    }\n    if (limit <= 0) {\n      throw new Error('Invalid limit value');\n    }\n    if (skip < 0) {\n      throw new Error('Invalid skip value');\n    }\n    const messages = await apiRequest(`/channels/${channelId}/messages?limit=${limit}&skip=${skip}`);\n    console.log('[DEBUG] Raw messages from API:', JSON.stringify(messages, null, 2));\n\n    // Validate and transform messages\n    const validMessages = messages.filter(msg => msg && msg.id && msg.content && msg.channel_id && msg.sender_id).map(msg => {\n      console.log('[DEBUG] Processing message:', {\n        id: msg.id,\n        content: msg.content.slice(0, 50),\n        reactions: msg.reactions,\n        parent_id: msg.parent_id\n      });\n      return {\n        ...msg,\n        created_at: msg.created_at || new Date().toISOString(),\n        is_system: msg.is_system || false,\n        parent_id: msg.parent_id || undefined,\n        reply_count: msg.reply_count || 0,\n        reactions: Array.isArray(msg.reactions) ? msg.reactions.map(r => {\n          var _r$id, _ref;\n          return {\n            id: ((_r$id = r.id) === null || _r$id === void 0 ? void 0 : _r$id.toString()) || `${msg.id}_${r.user_id || r.userId}_${r.emoji}`,\n            messageId: msg.id.toString(),\n            userId: ((_ref = r.user_id || r.userId) === null || _ref === void 0 ? void 0 : _ref.toString()) || '',\n            emoji: r.emoji || '',\n            createdAt: r.created_at || r.createdAt || new Date().toISOString()\n          };\n        }) : [],\n        attachments: Array.isArray(msg.attachments) ? msg.attachments : []\n      };\n    });\n    console.log('[DEBUG] Validated and transformed messages:', JSON.stringify(validMessages, null, 2));\n    return validMessages;\n  } catch (error) {\n    console.error(`[DEBUG] Error fetching messages for channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const getChannelUsers = async channelId => {\n  console.log(`Fetching users for channel ${channelId}...`);\n  try {\n    const apiUsers = await apiRequest(`/channels/${channelId}/members`);\n    console.log('Received users:', apiUsers);\n    const users = apiUsers.map(transformUser);\n    console.log('Transformed users:', users);\n    return users;\n  } catch (error) {\n    console.error(`Error fetching users for channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const createChannel = async params => {\n  console.log('Creating channel:', params);\n  try {\n    const channel = await apiRequest('/channels', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n    console.log('Created channel:', channel);\n    return channel;\n  } catch (error) {\n    console.error('Error creating channel:', error);\n    throw error;\n  }\n};\nexport const joinChannel = async channelId => {\n  console.log(`Joining channel ${channelId}...`);\n  try {\n    // Get the current user's ID from the auth state\n    const currentUser = store.getState().auth.user;\n    if (!currentUser) {\n      throw new Error('No authenticated user');\n    }\n    const payload = {\n      user_id: currentUser.id\n    };\n    console.log('[DEBUG] Join channel payload:', payload);\n\n    // Add the current user as a member\n    await apiRequest(`/channels/${channelId}/members`, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n    console.log(`Channel ${channelId} joined`);\n  } catch (error) {\n    console.error(`Error joining channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const leaveChannel = async channelId => {\n  console.log(`Leaving channel ${channelId}...`);\n  try {\n    await apiRequest(`/channels/${channelId}/leave`, {\n      method: 'POST'\n    });\n    console.log(`Left channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error leaving channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const addChannelMember = async (channelId, userId) => {\n  console.log(`Adding user ${userId} to channel ${channelId}...`);\n  try {\n    await apiRequest(`/channels/${channelId}/members`, {\n      method: 'POST',\n      body: JSON.stringify({\n        user_id: userId\n      })\n    });\n    console.log(`Added user ${userId} to channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error adding member to channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const removeChannelMember = async (channelId, userId) => {\n  console.log(`Removing user ${userId} from channel ${channelId}...`);\n  try {\n    await apiRequest(`/channels/${channelId}/members/${userId}`, {\n      method: 'DELETE'\n    });\n    console.log(`Removed user ${userId} from channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error removing member from channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const deleteMessage = async messageId => {\n  console.log(`Deleting message ${messageId}...`);\n  try {\n    await apiRequest(`/messages/${messageId}`, {\n      method: 'DELETE'\n    });\n    console.log(`Message ${messageId} deleted successfully`);\n  } catch (error) {\n    console.error(`Error deleting message ${messageId}:`, error);\n    throw error;\n  }\n};\nexport const getReplies = async messageId => {\n  console.log(`Fetching replies for message ${messageId}...`);\n  try {\n    const replies = await apiRequest(`/messages/${messageId}/replies`);\n    console.log('Received replies:', replies);\n\n    // Validate and transform replies\n    const validReplies = replies.filter(msg => msg && msg.id && msg.content && msg.channel_id && msg.sender_id).map(msg => ({\n      ...msg,\n      created_at: msg.created_at || new Date().toISOString(),\n      is_system: msg.is_system || false\n    }));\n    console.log('Validated and transformed replies:', validReplies);\n    return validReplies;\n  } catch (error) {\n    console.error(`Error fetching replies for message ${messageId}:`, error);\n    throw error;\n  }\n};\nexport const createReply = async (messageId, content) => {\n  console.log(`Creating reply to message ${messageId}:`, content);\n  try {\n    // First get the parent message to ensure we use the correct channel\n    const parentMessage = await apiRequest(`/messages/${messageId}`);\n    const channelId = parentMessage.channel_id.toString();\n    const reply = await apiRequest(`/messages/${messageId}/replies`, {\n      method: 'POST',\n      body: JSON.stringify({\n        content,\n        channel_id: channelId\n      })\n    });\n    return reply;\n  } catch (error) {\n    console.error(`Error creating reply to message ${messageId}:`, error);\n    throw error;\n  }\n};\nexport const sendMessage = async params => {\n  console.log('Sending message:', params);\n  try {\n    const message = await apiRequest('/messages', {\n      method: 'POST',\n      body: JSON.stringify({\n        content: params.content,\n        channel_id: params.channelId,\n        parent_id: params.parentId,\n        file_id: params.fileId\n      })\n    });\n    console.log('Message sent:', message);\n    return message;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\nexport const getMessagePosition = async (channelId, messageId) => {\n  console.log(`Getting position for message ${messageId} in channel ${channelId}...`);\n  try {\n    const position = await apiRequest(`/messages/${messageId}/position`);\n    console.log(`Message position:`, position);\n    return position;\n  } catch (error) {\n    console.error(`Error getting message position:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiRequest","store","transformUser","apiUser","id","username","status","avatar_url","undefined","getChannels","console","log","channels","error","getChannelMessages","channelId","limit","skip","Error","messages","JSON","stringify","validMessages","filter","msg","content","channel_id","sender_id","map","slice","reactions","parent_id","created_at","Date","toISOString","is_system","reply_count","Array","isArray","r","_r$id","_ref","toString","user_id","userId","emoji","messageId","createdAt","attachments","getChannelUsers","apiUsers","users","createChannel","params","channel","method","body","joinChannel","currentUser","getState","auth","user","payload","leaveChannel","addChannelMember","removeChannelMember","deleteMessage","getReplies","replies","validReplies","createReply","parentMessage","reply","sendMessage","message","parentId","file_id","fileId","getMessagePosition","position"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/chat.ts"],"sourcesContent":["import { User, Channel, Message, ApiAuthResponse, RawReaction } from '../../types';\nimport { apiRequest } from './utils';\nimport { store } from '../../store';\n\ninterface ApiUser {\n  id: string;\n  username: string;\n  email: string;\n  full_name: string;\n  status: 'online' | 'offline' | 'away' | 'busy';\n  last_seen: string;\n}\n\n// Transform API user to our User type\nconst transformUser = (apiUser: ApiUser): User => ({\n  id: apiUser.id,\n  username: apiUser.username,\n  status: apiUser.status || 'offline',\n  avatar_url: undefined\n});\n\ninterface CreateChannelParams {\n  name: string;\n  description?: string;\n  is_public: boolean;\n  member_ids?: string[];\n}\n\ninterface SendMessageParams {\n  content: string;\n  channelId: string;\n  parentId?: string;\n  fileId?: number;\n}\n\nexport const getChannels = async (): Promise<Channel[]> => {\n  console.log('Fetching channels...');\n  try {\n    // All channels are accessible by default to all users\n    const channels = await apiRequest<Channel[]>('/channels');\n    console.log('Received channels:', channels);\n    return channels;\n  } catch (error) {\n    console.error('Error fetching channels:', error);\n    throw error;\n  }\n};\n\nexport const getChannelMessages = async (channelId: string, limit: number = 50, skip: number = 0): Promise<Message[]> => {\n  console.log(`[DEBUG] Fetching messages for channel ${channelId} with limit ${limit} and skip ${skip}...`);\n  try {\n    if (!channelId) {\n      throw new Error('Invalid channel ID');\n    }\n\n    if (limit <= 0) {\n      throw new Error('Invalid limit value');\n    }\n\n    if (skip < 0) {\n      throw new Error('Invalid skip value');\n    }\n\n    const messages = await apiRequest<Message[]>(`/channels/${channelId}/messages?limit=${limit}&skip=${skip}`);\n    console.log('[DEBUG] Raw messages from API:', JSON.stringify(messages, null, 2));\n\n    // Validate and transform messages\n    const validMessages = messages\n      .filter(msg => msg && msg.id && msg.content && msg.channel_id && msg.sender_id)\n      .map(msg => {\n        console.log('[DEBUG] Processing message:', {\n          id: msg.id,\n          content: msg.content.slice(0, 50),\n          reactions: msg.reactions,\n          parent_id: msg.parent_id\n        });\n        \n        return {\n          ...msg,\n          created_at: msg.created_at || new Date().toISOString(),\n          is_system: msg.is_system || false,\n          parent_id: msg.parent_id || undefined,\n          reply_count: msg.reply_count || 0,\n          reactions: Array.isArray(msg.reactions) ? msg.reactions.map((r: RawReaction) => ({\n            id: r.id?.toString() || `${msg.id}_${r.user_id || r.userId}_${r.emoji}`,\n            messageId: msg.id.toString(),\n            userId: (r.user_id || r.userId)?.toString() || '',\n            emoji: r.emoji || '',\n            createdAt: r.created_at || r.createdAt || new Date().toISOString()\n          })) : [],\n          attachments: Array.isArray(msg.attachments) ? msg.attachments : []\n        };\n      });\n\n    console.log('[DEBUG] Validated and transformed messages:', JSON.stringify(validMessages, null, 2));\n    return validMessages;\n  } catch (error) {\n    console.error(`[DEBUG] Error fetching messages for channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const getChannelUsers = async (channelId: string): Promise<User[]> => {\n  console.log(`Fetching users for channel ${channelId}...`);\n  try {\n    const apiUsers = await apiRequest<ApiUser[]>(`/channels/${channelId}/members`);\n    console.log('Received users:', apiUsers);\n    const users = apiUsers.map(transformUser);\n    console.log('Transformed users:', users);\n    return users;\n  } catch (error) {\n    console.error(`Error fetching users for channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const createChannel = async (params: CreateChannelParams): Promise<Channel> => {\n  console.log('Creating channel:', params);\n  try {\n    const channel = await apiRequest<Channel>('/channels', {\n      method: 'POST',\n      body: JSON.stringify(params),\n    });\n    console.log('Created channel:', channel);\n    return channel;\n  } catch (error) {\n    console.error('Error creating channel:', error);\n    throw error;\n  }\n};\n\nexport const joinChannel = async (channelId: string): Promise<void> => {\n  console.log(`Joining channel ${channelId}...`);\n  try {\n    // Get the current user's ID from the auth state\n    const currentUser = store.getState().auth.user;\n    if (!currentUser) {\n      throw new Error('No authenticated user');\n    }\n\n    const payload = {\n      user_id: currentUser.id\n    };\n    console.log('[DEBUG] Join channel payload:', payload);\n\n    // Add the current user as a member\n    await apiRequest(`/channels/${channelId}/members`, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n    });\n    console.log(`Channel ${channelId} joined`);\n  } catch (error) {\n    console.error(`Error joining channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const leaveChannel = async (channelId: string): Promise<void> => {\n  console.log(`Leaving channel ${channelId}...`);\n  try {\n    await apiRequest(`/channels/${channelId}/leave`, {\n      method: 'POST',\n    });\n    console.log(`Left channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error leaving channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const addChannelMember = async (channelId: string, userId: string): Promise<void> => {\n  console.log(`Adding user ${userId} to channel ${channelId}...`);\n  try {\n    await apiRequest(`/channels/${channelId}/members`, {\n      method: 'POST',\n      body: JSON.stringify({ user_id: userId }),\n    });\n    console.log(`Added user ${userId} to channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error adding member to channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const removeChannelMember = async (channelId: string, userId: string): Promise<void> => {\n  console.log(`Removing user ${userId} from channel ${channelId}...`);\n  try {\n    await apiRequest(`/channels/${channelId}/members/${userId}`, {\n      method: 'DELETE',\n    });\n    console.log(`Removed user ${userId} from channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error removing member from channel ${channelId}:`, error);\n    throw error;\n  }\n};\n\nexport const deleteMessage = async (messageId: string): Promise<void> => {\n  console.log(`Deleting message ${messageId}...`);\n  try {\n    await apiRequest(`/messages/${messageId}`, {\n      method: 'DELETE',\n    });\n    console.log(`Message ${messageId} deleted successfully`);\n  } catch (error) {\n    console.error(`Error deleting message ${messageId}:`, error);\n    throw error;\n  }\n};\n\nexport const getReplies = async (messageId: string): Promise<Message[]> => {\n  console.log(`Fetching replies for message ${messageId}...`);\n  try {\n    const replies = await apiRequest<Message[]>(`/messages/${messageId}/replies`);\n    console.log('Received replies:', replies);\n\n    // Validate and transform replies\n    const validReplies = replies\n      .filter(msg => msg && msg.id && msg.content && msg.channel_id && msg.sender_id)\n      .map(msg => ({\n        ...msg,\n        created_at: msg.created_at || new Date().toISOString(),\n        is_system: msg.is_system || false\n      }));\n\n    console.log('Validated and transformed replies:', validReplies);\n    return validReplies;\n  } catch (error) {\n    console.error(`Error fetching replies for message ${messageId}:`, error);\n    throw error;\n  }\n};\n\nexport const createReply = async (messageId: string, content: string): Promise<Message> => {\n  console.log(`Creating reply to message ${messageId}:`, content);\n  try {\n    // First get the parent message to ensure we use the correct channel\n    const parentMessage = await apiRequest<Message>(`/messages/${messageId}`);\n    const channelId = parentMessage.channel_id.toString();\n\n    const reply = await apiRequest<Message>(`/messages/${messageId}/replies`, {\n      method: 'POST',\n      body: JSON.stringify({ \n        content,\n        channel_id: channelId\n      }),\n    });\n\n    return reply;\n  } catch (error) {\n    console.error(`Error creating reply to message ${messageId}:`, error);\n    throw error;\n  }\n};\n\nexport const sendMessage = async (params: SendMessageParams): Promise<Message> => {\n  console.log('Sending message:', params);\n  try {\n    const message = await apiRequest<Message>('/messages', {\n      method: 'POST',\n      body: JSON.stringify({\n        content: params.content,\n        channel_id: params.channelId,\n        parent_id: params.parentId,\n        file_id: params.fileId\n      }),\n    });\n    console.log('Message sent:', message);\n    return message;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\nexport const getMessagePosition = async (channelId: string, messageId: string): Promise<number> => {\n  console.log(`Getting position for message ${messageId} in channel ${channelId}...`);\n  try {\n    const position = await apiRequest<number>(`/messages/${messageId}/position`);\n    console.log(`Message position:`, position);\n    return position;\n  } catch (error) {\n    console.error(`Error getting message position:`, error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}