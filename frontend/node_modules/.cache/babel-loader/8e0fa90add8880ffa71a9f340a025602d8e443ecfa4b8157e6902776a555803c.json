{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport MessageComponent from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, setReplies, toggleExpanded, addReply } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getReplies as getRepliesApi, createReply } from '../../../services/api/chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 16px;\n  overflow-y: auto;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  background-color: ${props => props.$isSelected ? props.theme.colors.hover : 'transparent'};\n  border-radius: 4px;\n  padding: 4px;\n`;\n_c2 = MessageWrapper;\nconst MessageList = ({\n  messages,\n  selectedMessageId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const users = useSelector(state => state.users.users);\n  const currentUser = useSelector(state => state.auth.user);\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n  const selectedMessageRef = useRef(null);\n  const containerRef = useRef(null);\n  const loadedRepliesRef = useRef(new Set());\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  const [selectedMessage, setSelectedMessage] = useState(null);\n  const currentUserId = currentUser !== null && currentUser !== void 0 && currentUser.id ? currentUser.id.toString() : undefined;\n  const handleReply = message => {\n    setSelectedMessage(message);\n    setReplyModalOpen(true);\n  };\n  const handleDelete = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: Number(activeChannelId),\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleLoadReplies = async messageId => {\n    if (!loadedRepliesRef.current.has(messageId) && activeChannelId) {\n      try {\n        const replies = await getRepliesApi(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        dispatch(setReplies({\n          channelId: Number(activeChannelId),\n          parentMessageId: messageId,\n          replies: transformedReplies\n        }));\n        loadedRepliesRef.current.add(messageId);\n      } catch (error) {\n        console.error('Error loading replies:', error);\n      }\n    }\n  };\n  const handleToggleReplies = messageId => {\n    if (activeChannelId) {\n      dispatch(toggleExpanded({\n        channelId: Number(activeChannelId),\n        messageId\n      }));\n    }\n  };\n  const handleSendReply = async content => {\n    if (!selectedMessage || !activeChannelId) return;\n    try {\n      const reply = await createReply(selectedMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      dispatch(addReply({\n        channelId: Number(activeChannelId),\n        parentMessageId: selectedMessage.id,\n        reply: transformedReply\n      }));\n      setReplyModalOpen(false);\n      setSelectedMessage(null);\n    } catch (error) {\n      console.error('Error sending reply:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: [messages.map(message => {\n      var _users$message$userId;\n      return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n        $isSelected: message.id === selectedMessageId,\n        ref: message.id === selectedMessageId ? selectedMessageRef : undefined,\n        children: [/*#__PURE__*/_jsxDEV(MessageComponent, {\n          content: message.content,\n          sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId.toString(),\n          timestamp: message.createdAt,\n          currentUserId: currentUserId,\n          userId: message.userId,\n          onReply: () => handleReply(message),\n          onDelete: () => handleDelete(message.id),\n          replyCount: message.replyCount,\n          isExpanded: message.isExpanded,\n          onToggleReplies: () => handleToggleReplies(message.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), message.replyCount > 0 && /*#__PURE__*/_jsxDEV(MessageReplies, {\n          parentId: message.id,\n          replies: message.replies || [],\n          isExpanded: message.isExpanded,\n          onToggleReplies: () => handleToggleReplies(message.id),\n          onDelete: handleDelete,\n          currentUserId: currentUserId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this);\n    }), selectedMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: replyModalOpen,\n      onClose: () => setReplyModalOpen(false),\n      onSubmit: handleSendReply,\n      parentMessage: selectedMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"2BHi6DBjeuy3xl8QWw5oE2CjVd8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c3 = MessageList;\nexport default MessageList;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessageWrapper\");\n$RefreshReg$(_c3, \"MessageList\");","map":{"version":3,"names":["React","useRef","useState","styled","useSelector","useDispatch","transformMessage","MessageComponent","MessageReplies","ReplyModal","deleteMessage","setReplies","toggleExpanded","addReply","deleteMessageApi","getReplies","getRepliesApi","createReply","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessageWrapper","props","$isSelected","theme","colors","hover","_c2","MessageList","messages","selectedMessageId","_s","dispatch","users","state","currentUser","auth","user","activeChannelId","chat","selectedMessageRef","containerRef","loadedRepliesRef","Set","replyModalOpen","setReplyModalOpen","selectedMessage","setSelectedMessage","currentUserId","id","toString","undefined","handleReply","message","handleDelete","messageId","channelId","Number","error","console","handleLoadReplies","current","has","replies","transformedReplies","map","parentMessageId","add","handleToggleReplies","handleSendReply","content","reply","transformedReply","ref","children","_users$message$userId","sender","userId","username","timestamp","createdAt","onReply","onDelete","replyCount","isExpanded","onToggleReplies","fileName","_jsxFileName","lineNumber","columnNumber","parentId","isOpen","onClose","onSubmit","parentMessage","_c3","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User, WebSocketMessage, RawMessage, isMessageData } from '../../../types';\nimport type { Message } from '../../../types';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport MessageComponent from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { addMessage, updateMessage, deleteMessage, setReplies, toggleExpanded, setExpanded, addReply } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getReplies as getRepliesApi, createReply } from '../../../services/api/chat';\n\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 16px;\n  overflow-y: auto;\n  height: 100%;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  background-color: ${props => props.$isSelected ? props.theme.colors.hover : 'transparent'};\n  border-radius: 4px;\n  padding: 4px;\n`;\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: number;\n}\n\nconst MessageList: React.FC<MessageListProps> = ({ messages, selectedMessageId }) => {\n  const dispatch = useDispatch();\n  const users = useSelector((state: RootState) => state.users.users);\n  const currentUser = useSelector((state: RootState) => state.auth.user);\n  const activeChannelId = useSelector((state: RootState) => state.chat.activeChannelId);\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const loadedRepliesRef = useRef<Set<number>>(new Set());\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  const [selectedMessage, setSelectedMessage] = useState<StoreMessage | null>(null);\n\n  const currentUserId = currentUser?.id ? currentUser.id.toString() : undefined;\n\n  const handleReply = (message: StoreMessage) => {\n    setSelectedMessage(message);\n    setReplyModalOpen(true);\n  };\n\n  const handleDelete = async (messageId: number) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: Number(activeChannelId), messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleLoadReplies = async (messageId: number) => {\n    if (!loadedRepliesRef.current.has(messageId) && activeChannelId) {\n      try {\n        const replies = await getRepliesApi(messageId);\n        const transformedReplies = replies.map(transformMessage);\n        dispatch(setReplies({ \n          channelId: Number(activeChannelId), \n          parentMessageId: messageId, \n          replies: transformedReplies \n        }));\n        loadedRepliesRef.current.add(messageId);\n      } catch (error) {\n        console.error('Error loading replies:', error);\n      }\n    }\n  };\n\n  const handleToggleReplies = (messageId: number) => {\n    if (activeChannelId) {\n      dispatch(toggleExpanded({ channelId: Number(activeChannelId), messageId }));\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!selectedMessage || !activeChannelId) return;\n    \n    try {\n      const reply = await createReply(selectedMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      dispatch(addReply({ \n        channelId: Number(activeChannelId), \n        parentMessageId: selectedMessage.id,\n        reply: transformedReply \n      }));\n      setReplyModalOpen(false);\n      setSelectedMessage(null);\n    } catch (error) {\n      console.error('Error sending reply:', error);\n    }\n  };\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      {messages.map((message) => (\n        <MessageWrapper\n          key={message.id}\n          $isSelected={message.id === selectedMessageId}\n          ref={message.id === selectedMessageId ? selectedMessageRef : undefined}\n        >\n          <MessageComponent\n            content={message.content}\n            sender={users[message.userId]?.username || message.userId.toString()}\n            timestamp={message.createdAt}\n            currentUserId={currentUserId}\n            userId={message.userId}\n            onReply={() => handleReply(message)}\n            onDelete={() => handleDelete(message.id)}\n            replyCount={message.replyCount}\n            isExpanded={message.isExpanded}\n            onToggleReplies={() => handleToggleReplies(message.id)}\n          />\n          {message.replyCount > 0 && (\n            <MessageReplies\n              parentId={message.id}\n              replies={message.replies || []}\n              isExpanded={message.isExpanded}\n              onToggleReplies={() => handleToggleReplies(message.id)}\n              onDelete={handleDelete}\n              currentUserId={currentUserId}\n            />\n          )}\n        </MessageWrapper>\n      ))}\n      {selectedMessage && (\n        <ReplyModal\n          isOpen={replyModalOpen}\n          onClose={() => setReplyModalOpen(false)}\n          onSubmit={handleSendReply}\n          parentMessage={selectedMessage}\n        />\n      )}\n    </MessageListContainer>\n  );\n};\n\nexport default MessageList; "],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,MAAM,EAAcC,QAAQ,QAA8B,OAAO;AAC5F,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAGtD,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,OAAOC,gBAAgB,MAAM,YAAY;AACzC,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,OAAOC,UAAU,MAAM,eAAe;AACtC,SAAoCC,aAAa,EAAEC,UAAU,EAAEC,cAAc,EAAeC,QAAQ,QAAQ,uCAAuC;AACnJ,SAASH,aAAa,IAAII,gBAAgB,EAAEC,UAAU,IAAIC,aAAa,EAAEC,WAAW,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzH,MAAMC,oBAAoB,GAAGjB,MAAM,CAACkB,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAPIF,oBAAoB;AAS1B,MAAMG,cAAc,GAAGpB,MAAM,CAACkB,GAA8B;AAC5D;AACA;AACA;AACA,sBAAsBG,KAAK,IAAIA,KAAK,CAACC,WAAW,GAAGD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,GAAG,aAAa;AAC3F;AACA;AACA,CAAC;AAACC,GAAA,GAPIN,cAAc;AAcpB,MAAMO,WAAuC,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAMC,QAAQ,GAAG7B,WAAW,CAAC,CAAC;EAC9B,MAAM8B,KAAK,GAAG/B,WAAW,CAAEgC,KAAgB,IAAKA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EAClE,MAAME,WAAW,GAAGjC,WAAW,CAAEgC,KAAgB,IAAKA,KAAK,CAACE,IAAI,CAACC,IAAI,CAAC;EACtE,MAAMC,eAAe,GAAGpC,WAAW,CAAEgC,KAAgB,IAAKA,KAAK,CAACK,IAAI,CAACD,eAAe,CAAC;EACrF,MAAME,kBAAkB,GAAGzC,MAAM,CAAiB,IAAI,CAAC;EACvD,MAAM0C,YAAY,GAAG1C,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAM2C,gBAAgB,GAAG3C,MAAM,CAAc,IAAI4C,GAAG,CAAC,CAAC,CAAC;EACvD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC8C,eAAe,EAAEC,kBAAkB,CAAC,GAAG/C,QAAQ,CAAsB,IAAI,CAAC;EAEjF,MAAMgD,aAAa,GAAGb,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEc,EAAE,GAAGd,WAAW,CAACc,EAAE,CAACC,QAAQ,CAAC,CAAC,GAAGC,SAAS;EAE7E,MAAMC,WAAW,GAAIC,OAAqB,IAAK;IAC7CN,kBAAkB,CAACM,OAAO,CAAC;IAC3BR,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMS,YAAY,GAAG,MAAOC,SAAiB,IAAK;IAChD,IAAI;MACF,MAAM3C,gBAAgB,CAAC2C,SAAS,CAAC;MACjC,IAAIjB,eAAe,EAAE;QACnBN,QAAQ,CAACxB,aAAa,CAAC;UAAEgD,SAAS,EAAEC,MAAM,CAACnB,eAAe,CAAC;UAAEiB;QAAU,CAAC,CAAC,CAAC;MAC5E;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAME,iBAAiB,GAAG,MAAOL,SAAiB,IAAK;IACrD,IAAI,CAACb,gBAAgB,CAACmB,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC,IAAIjB,eAAe,EAAE;MAC/D,IAAI;QACF,MAAMyB,OAAO,GAAG,MAAMjD,aAAa,CAACyC,SAAS,CAAC;QAC9C,MAAMS,kBAAkB,GAAGD,OAAO,CAACE,GAAG,CAAC7D,gBAAgB,CAAC;QACxD4B,QAAQ,CAACvB,UAAU,CAAC;UAClB+C,SAAS,EAAEC,MAAM,CAACnB,eAAe,CAAC;UAClC4B,eAAe,EAAEX,SAAS;UAC1BQ,OAAO,EAAEC;QACX,CAAC,CAAC,CAAC;QACHtB,gBAAgB,CAACmB,OAAO,CAACM,GAAG,CAACZ,SAAS,CAAC;MACzC,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF;EACF,CAAC;EAED,MAAMU,mBAAmB,GAAIb,SAAiB,IAAK;IACjD,IAAIjB,eAAe,EAAE;MACnBN,QAAQ,CAACtB,cAAc,CAAC;QAAE8C,SAAS,EAAEC,MAAM,CAACnB,eAAe,CAAC;QAAEiB;MAAU,CAAC,CAAC,CAAC;IAC7E;EACF,CAAC;EAED,MAAMc,eAAe,GAAG,MAAOC,OAAe,IAAK;IACjD,IAAI,CAACxB,eAAe,IAAI,CAACR,eAAe,EAAE;IAE1C,IAAI;MACF,MAAMiC,KAAK,GAAG,MAAMxD,WAAW,CAAC+B,eAAe,CAACG,EAAE,EAAEqB,OAAO,CAAC;MAC5D,MAAME,gBAAgB,GAAGpE,gBAAgB,CAACmE,KAAK,CAAC;MAChDvC,QAAQ,CAACrB,QAAQ,CAAC;QAChB6C,SAAS,EAAEC,MAAM,CAACnB,eAAe,CAAC;QAClC4B,eAAe,EAAEpB,eAAe,CAACG,EAAE;QACnCsB,KAAK,EAAEC;MACT,CAAC,CAAC,CAAC;MACH3B,iBAAiB,CAAC,KAAK,CAAC;MACxBE,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEzC,OAAA,CAACC,oBAAoB;IAACuD,GAAG,EAAEhC,YAAa;IAAAiC,QAAA,GACrC7C,QAAQ,CAACoC,GAAG,CAAEZ,OAAO;MAAA,IAAAsB,qBAAA;MAAA,oBACpB1D,OAAA,CAACI,cAAc;QAEbE,WAAW,EAAE8B,OAAO,CAACJ,EAAE,KAAKnB,iBAAkB;QAC9C2C,GAAG,EAAEpB,OAAO,CAACJ,EAAE,KAAKnB,iBAAiB,GAAGU,kBAAkB,GAAGW,SAAU;QAAAuB,QAAA,gBAEvEzD,OAAA,CAACZ,gBAAgB;UACfiE,OAAO,EAAEjB,OAAO,CAACiB,OAAQ;UACzBM,MAAM,EAAE,EAAAD,qBAAA,GAAA1C,KAAK,CAACoB,OAAO,CAACwB,MAAM,CAAC,cAAAF,qBAAA,uBAArBA,qBAAA,CAAuBG,QAAQ,KAAIzB,OAAO,CAACwB,MAAM,CAAC3B,QAAQ,CAAC,CAAE;UACrE6B,SAAS,EAAE1B,OAAO,CAAC2B,SAAU;UAC7BhC,aAAa,EAAEA,aAAc;UAC7B6B,MAAM,EAAExB,OAAO,CAACwB,MAAO;UACvBI,OAAO,EAAEA,CAAA,KAAM7B,WAAW,CAACC,OAAO,CAAE;UACpC6B,QAAQ,EAAEA,CAAA,KAAM5B,YAAY,CAACD,OAAO,CAACJ,EAAE,CAAE;UACzCkC,UAAU,EAAE9B,OAAO,CAAC8B,UAAW;UAC/BC,UAAU,EAAE/B,OAAO,CAAC+B,UAAW;UAC/BC,eAAe,EAAEA,CAAA,KAAMjB,mBAAmB,CAACf,OAAO,CAACJ,EAAE;QAAE;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,EACDpC,OAAO,CAAC8B,UAAU,GAAG,CAAC,iBACrBlE,OAAA,CAACX,cAAc;UACboF,QAAQ,EAAErC,OAAO,CAACJ,EAAG;UACrBc,OAAO,EAAEV,OAAO,CAACU,OAAO,IAAI,EAAG;UAC/BqB,UAAU,EAAE/B,OAAO,CAAC+B,UAAW;UAC/BC,eAAe,EAAEA,CAAA,KAAMjB,mBAAmB,CAACf,OAAO,CAACJ,EAAE,CAAE;UACvDiC,QAAQ,EAAE5B,YAAa;UACvBN,aAAa,EAAEA;QAAc;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CACF;MAAA,GAzBIpC,OAAO,CAACJ,EAAE;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA0BD,CAAC;IAAA,CAClB,CAAC,EACD3C,eAAe,iBACd7B,OAAA,CAACV,UAAU;MACToF,MAAM,EAAE/C,cAAe;MACvBgD,OAAO,EAAEA,CAAA,KAAM/C,iBAAiB,CAAC,KAAK,CAAE;MACxCgD,QAAQ,EAAExB,eAAgB;MAC1ByB,aAAa,EAAEhD;IAAgB;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAE3B,CAAC;AAAC1D,EAAA,CAhHIH,WAAuC;EAAA,QAC1BzB,WAAW,EACdD,WAAW,EACLA,WAAW,EACPA,WAAW;AAAA;AAAA6F,GAAA,GAJ/BnE,WAAuC;AAkH7C,eAAeA,WAAW;AAAC,IAAAR,EAAA,EAAAO,GAAA,EAAAoE,GAAA;AAAAC,YAAA,CAAA5E,EAAA;AAAA4E,YAAA,CAAArE,GAAA;AAAAqE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}