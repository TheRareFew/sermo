{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setUsers, updateUserStatus } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages\n  const transformToStoreMessage = msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    // Initialize empty arrays for reactions and attachments\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    // Use created_at as updatedAt if not provided\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  });\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout;\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n      setIsConnecting(true);\n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n\n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        if (!isMounted) return;\n\n        // After joining, fetch channel users and messages\n        const [channelUsers, channelMessages] = await Promise.all([getChannelUsers(activeChannelId), getChannelMessages(activeChannelId)]);\n        if (isMounted) {\n          dispatch(setUsers(channelUsers));\n          // Transform messages to match StoreMessage type\n          const transformedMessages = channelMessages.map(transformToStoreMessage);\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: transformedMessages\n          }));\n        }\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n\n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = msg => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n          if (message.type === 'new_reply' && message.parentId) {\n            storeMessage.parentId = message.parentId.toString();\n          }\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = msg => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, transformToStoreMessage]);\n  const handleChannelClick = async channelId => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n    }\n  };\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        dispatch(setActiveChannel(channelId));\n        // Wait for channel switch to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Set the selected message ID\n      setSelectedMessageId(messageId);\n\n      // Clear search results\n      setSearchResults(null);\n\n      // Scroll to message after a short delay to ensure the message list has updated\n      setTimeout(() => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        }\n      }, 500);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              isLoading: isSearching,\n              channels: searchResults.channels,\n              messages: searchResults.messages,\n              files: searchResults.files,\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: () => dispatch(logout()),\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      onClose: () => setIsSettingsOpen(false),\n      channel: activeChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"HdZP+irgmkirbVZspMzw2E3UQkw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","styled","useDispatch","useSelector","logout","setActiveChannel","setUsers","updateUserStatus","addMessage","setMessages","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","transformToStoreMessage","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","isMounted","connectionTimeout","connectToChannel","disconnect","Promise","resolve","setTimeout","connect","joinChannel","channelUsers","channelMessages","all","transformedMessages","map","messages","console","clearTimeout","handleWebSocketMessage","message","log","type","isChannelMessage","storeMessage","isStatusMessage","user_id","status","unsubscribe","onMessage","handleChannelClick","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","handleSearch","query","trim","undefined","results","handleSelectMessage","messageId","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","length","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","user","username","onSearch","placeholder","isLoading","files","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","onClose","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult, Message } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  \n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages\n  const transformToStoreMessage = (msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [], // Initialize empty arrays for reactions and attachments\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at, // Use created_at as updatedAt if not provided\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  });\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout: NodeJS.Timeout;\n\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n\n      setIsConnecting(true);\n      \n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n        \n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // After joining, fetch channel users and messages\n        const [channelUsers, channelMessages] = await Promise.all([\n          getChannelUsers(activeChannelId),\n          getChannelMessages(activeChannelId)\n        ]);\n\n        if (isMounted) {\n          dispatch(setUsers(channelUsers));\n          // Transform messages to match StoreMessage type\n          const transformedMessages = channelMessages.map(transformToStoreMessage);\n          dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n        }\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n          if (message.type === 'new_reply' && message.parentId) {\n            storeMessage.parentId = message.parentId.toString();\n          }\n\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = (msg: WebSocketMessage): msg is WebSocketStatusMessage => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, transformToStoreMessage]);\n\n  const handleChannelClick = async (channelId: string) => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        dispatch(setActiveChannel(channelId));\n        // Wait for channel switch to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Set the selected message ID\n      setSelectedMessageId(messageId);\n\n      // Clear search results\n      setSearchResults(null);\n\n      // Scroll to message after a short delay to ensure the message list has updated\n      setTimeout(() => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        }\n      }, 500);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  isLoading={isSearching}\n                  channels={searchResults.channels}\n                  messages={searchResults.messages}\n                  files={searchResults.files}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={() => dispatch(logout())}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput channelId={activeChannelId || ''} />\n        </ChatInput>\n      </ChatArea>\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          onClose={() => setIsSettingsOpen(false)}\n          channel={activeChannel}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}