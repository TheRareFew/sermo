{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      console.log('Setting messages for channel:', channelId, messages);\n      state.messagesByChannel[channelId] = messages.map(message => ({\n        ...message,\n        reactions: message.reactions || [],\n        attachments: message.attachments || [],\n        replyCount: message.replyCount || 0,\n        isExpanded: false,\n        repliesLoaded: false\n      }));\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId,\n        message\n      } = action.payload;\n      console.log('Adding message:', {\n        channelId,\n        message\n      });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n\n      // If this is a reply, update the parent message's reply count and replies array\n      if (message.parentId) {\n        const parentIndex = state.messagesByChannel[channelId].findIndex(m => m.id === message.parentId);\n        if (parentIndex !== -1) {\n          const parent = state.messagesByChannel[channelId][parentIndex];\n          parent.replyCount = (parent.replyCount || 0) + 1;\n          parent.replies = [...(parent.replies || []), {\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: 0,\n            isExpanded: false,\n            repliesLoaded: false\n          }];\n          // Update the parent message\n          state.messagesByChannel[channelId][parentIndex] = {\n            ...parent\n          };\n        }\n      }\n\n      // Add the message to the main array only if it's not a reply\n      if (!message.parentId) {\n        state.messagesByChannel[channelId].push({\n          ...message,\n          reactions: message.reactions || [],\n          attachments: message.attachments || [],\n          replyCount: message.replyCount || 0,\n          isExpanded: false,\n          repliesLoaded: false,\n          replies: message.replies || []\n        });\n      }\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    prependMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      console.log('Prepending messages:', {\n        channelId,\n        messages\n      });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].unshift(...messages.map(message => ({\n        ...message,\n        reactions: message.reactions || [],\n        attachments: message.attachments || [],\n        replyCount: message.replyCount || 0,\n        isExpanded: false,\n        repliesLoaded: false\n      })));\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    updateMessage: (state, action) => {\n      var _state$messagesByChan;\n      const {\n        channelId,\n        messageId,\n        message\n      } = action.payload;\n      console.log('Updating message:', {\n        channelId,\n        messageId,\n        message\n      });\n      const messageIndex = (_state$messagesByChan = state.messagesByChannel[channelId]) === null || _state$messagesByChan === void 0 ? void 0 : _state$messagesByChan.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex] = {\n          ...state.messagesByChannel[channelId][messageIndex],\n          ...message,\n          reactions: message.reactions || state.messagesByChannel[channelId][messageIndex].reactions || [],\n          attachments: message.attachments || state.messagesByChannel[channelId][messageIndex].attachments || []\n        };\n        console.log('Updated message:', state.messagesByChannel[channelId][messageIndex]);\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      if (state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = state.messagesByChannel[channelId].filter(message => message.id !== messageId);\n      }\n    },\n    toggleReplies: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      console.log('toggleReplies reducer:', {\n        channelId,\n        messageId\n      });\n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n      console.log('Current message state:', messages[messageIndex]);\n\n      // Toggle the isExpanded state\n      messages[messageIndex] = {\n        ...messages[messageIndex],\n        isExpanded: !messages[messageIndex].isExpanded\n      };\n\n      // Force a state update by creating a new array reference\n      state.messagesByChannel[channelId] = [...messages];\n      console.log('Updated message state:', messages[messageIndex]);\n    },\n    addReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reaction\n      } = action.payload;\n      console.log('Adding reaction:', {\n        channelId,\n        messageId,\n        reaction\n      });\n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        message.reactions = [];\n      }\n      const existingIndex = message.reactions.findIndex(r => r.userId === reaction.userId && r.emoji === reaction.emoji);\n      console.log('Existing reaction index:', existingIndex);\n      if (existingIndex === -1) {\n        message.reactions = [...message.reactions, reaction];\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Added reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('Reaction already exists, skipping');\n      }\n    },\n    removeReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        userId,\n        emoji\n      } = action.payload;\n      console.log('Removing reaction:', {\n        channelId,\n        messageId,\n        userId,\n        emoji\n      });\n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        console.warn('Message has no reactions:', messageId);\n        return;\n      }\n      const initialLength = message.reactions.length;\n      message.reactions = message.reactions.filter(r => !(r.userId === userId && r.emoji === emoji));\n      if (message.reactions.length !== initialLength) {\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Removed reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('No reaction was removed');\n      }\n    }\n  }\n});\nexport const {\n  setMessages,\n  addMessage,\n  prependMessages,\n  updateMessage,\n  deleteMessage,\n  toggleReplies,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","setMessages","state","action","channelId","messages","payload","console","log","map","message","reactions","attachments","replyCount","isExpanded","repliesLoaded","addMessage","parentId","parentIndex","findIndex","m","id","parent","replies","push","prependMessages","unshift","updateMessage","_state$messagesByChan","messageId","messageIndex","undefined","deleteMessage","filter","toggleReplies","warn","addReaction","reaction","existingIndex","r","userId","emoji","removeReaction","initialLength","length","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { StoreMessage, Reaction } from '../../types';\n\ninterface MessagesState {\n  messagesByChannel: {\n    [channelId: string]: StoreMessage[];\n  };\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: MessagesState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      console.log('Setting messages for channel:', channelId, messages);\n      state.messagesByChannel[channelId] = messages.map(message => ({\n        ...message,\n        reactions: message.reactions || [],\n        attachments: message.attachments || [],\n        replyCount: message.replyCount || 0,\n        isExpanded: false,\n        repliesLoaded: false\n      }));\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    addMessage: (state, action: PayloadAction<{ channelId: string; message: StoreMessage }>) => {\n      const { channelId, message } = action.payload;\n      console.log('Adding message:', { channelId, message });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n\n      // If this is a reply, update the parent message's reply count and replies array\n      if (message.parentId) {\n        const parentIndex = state.messagesByChannel[channelId].findIndex(\n          m => m.id === message.parentId\n        );\n        if (parentIndex !== -1) {\n          const parent = state.messagesByChannel[channelId][parentIndex];\n          parent.replyCount = (parent.replyCount || 0) + 1;\n          parent.replies = [...(parent.replies || []), {\n            ...message,\n            reactions: message.reactions || [],\n            attachments: message.attachments || [],\n            replyCount: 0,\n            isExpanded: false,\n            repliesLoaded: false\n          }];\n          // Update the parent message\n          state.messagesByChannel[channelId][parentIndex] = { ...parent };\n        }\n      }\n\n      // Add the message to the main array only if it's not a reply\n      if (!message.parentId) {\n        state.messagesByChannel[channelId].push({\n          ...message,\n          reactions: message.reactions || [],\n          attachments: message.attachments || [],\n          replyCount: message.replyCount || 0,\n          isExpanded: false,\n          repliesLoaded: false,\n          replies: message.replies || []\n        });\n      }\n      \n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    prependMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      console.log('Prepending messages:', { channelId, messages });\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      state.messagesByChannel[channelId].unshift(...messages.map(message => ({\n        ...message,\n        reactions: message.reactions || [],\n        attachments: message.attachments || [],\n        replyCount: message.replyCount || 0,\n        isExpanded: false,\n        repliesLoaded: false\n      })));\n      console.log('Updated messages state:', state.messagesByChannel[channelId]);\n    },\n    updateMessage: (state, action: PayloadAction<{ channelId: string; messageId: string; message: Partial<StoreMessage> }>) => {\n      const { channelId, messageId, message } = action.payload;\n      console.log('Updating message:', { channelId, messageId, message });\n      const messageIndex = state.messagesByChannel[channelId]?.findIndex(m => m.id === messageId);\n      if (messageIndex !== undefined && messageIndex !== -1) {\n        state.messagesByChannel[channelId][messageIndex] = {\n          ...state.messagesByChannel[channelId][messageIndex],\n          ...message,\n          reactions: message.reactions || state.messagesByChannel[channelId][messageIndex].reactions || [],\n          attachments: message.attachments || state.messagesByChannel[channelId][messageIndex].attachments || []\n        };\n        console.log('Updated message:', state.messagesByChannel[channelId][messageIndex]);\n      }\n    },\n    deleteMessage: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      if (state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = state.messagesByChannel[channelId].filter(message => message.id !== messageId);\n      }\n    },\n    toggleReplies: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      console.log('toggleReplies reducer:', { channelId, messageId });\n      \n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n\n      console.log('Current message state:', messages[messageIndex]);\n      \n      // Toggle the isExpanded state\n      messages[messageIndex] = {\n        ...messages[messageIndex],\n        isExpanded: !messages[messageIndex].isExpanded\n      };\n      \n      // Force a state update by creating a new array reference\n      state.messagesByChannel[channelId] = [...messages];\n      \n      console.log('Updated message state:', messages[messageIndex]);\n    },\n    addReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reaction: Reaction }>) => {\n      const { channelId, messageId, reaction } = action.payload;\n      console.log('Adding reaction:', {\n        channelId,\n        messageId,\n        reaction\n      });\n      \n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        message.reactions = [];\n      }\n      \n      const existingIndex = message.reactions.findIndex(r => \n        r.userId === reaction.userId && r.emoji === reaction.emoji\n      );\n      console.log('Existing reaction index:', existingIndex);\n      \n      if (existingIndex === -1) {\n        message.reactions = [...message.reactions, reaction];\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Added reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('Reaction already exists, skipping');\n      }\n    },\n    removeReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; userId: string; emoji: string }>) => {\n      const { channelId, messageId, userId, emoji } = action.payload;\n      console.log('Removing reaction:', {\n        channelId,\n        messageId,\n        userId,\n        emoji\n      });\n      \n      const messages = state.messagesByChannel[channelId];\n      if (!messages) {\n        console.warn('Channel not found:', channelId);\n        return;\n      }\n\n      const messageIndex = messages.findIndex(m => m.id === messageId);\n      if (messageIndex === -1) {\n        console.warn('Message not found:', messageId);\n        return;\n      }\n\n      const message = messages[messageIndex];\n      if (!message.reactions) {\n        console.warn('Message has no reactions:', messageId);\n        return;\n      }\n      \n      const initialLength = message.reactions.length;\n      message.reactions = message.reactions.filter(r => \n        !(r.userId === userId && r.emoji === emoji)\n      );\n      \n      if (message.reactions.length !== initialLength) {\n        state.messagesByChannel[channelId] = [...messages];\n        console.log('Removed reaction, new state:', state.messagesByChannel[channelId][messageIndex]);\n      } else {\n        console.log('No reaction was removed');\n      }\n    },\n  },\n});\n\nexport const { \n  setMessages, \n  addMessage, \n  prependMessages, \n  updateMessage, \n  deleteMessage, \n  toggleReplies,\n  addReaction,\n  removeReaction\n} = messagesSlice.actions;\n\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}