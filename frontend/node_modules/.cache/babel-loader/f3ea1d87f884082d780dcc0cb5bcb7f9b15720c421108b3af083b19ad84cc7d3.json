{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, addChannel, removeChannel, updateChannelUnreadCount } from '../../../store/chat/chatSlice';\nimport { setMessages } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? {\n        parentId: msg.parent_id.toString()\n      } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback(msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          // Transform users array to object with user IDs as keys\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    console.log('[DEBUG] WebSocket effect triggered:', {\n      activeChannelId,\n      isConnecting,\n      wsState: wsService.getChatSocketState()\n    });\n    let isMounted = true;\n    let connectionTimeout;\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) {\n        console.log('[DEBUG] No active channel ID or already connecting');\n        return;\n      }\n      try {\n        setIsConnecting(true);\n        isChannelSwitching.current = true;\n\n        // Fetch initial messages for the channel\n        const messages = await getChannelMessages(activeChannelId);\n        if (!isMounted) return;\n\n        // Transform and set messages\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: transformedMessages\n        }));\n\n        // Connect to WebSocket for the channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Set up connection timeout\n        connectionTimeout = setTimeout(() => {\n          if (isMounted && wsService.getChatSocketState() !== WebSocket.OPEN) {\n            console.error('WebSocket connection timeout');\n            wsService.disconnect();\n            connectToChannel();\n          }\n        }, 10000);\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n          isChannelSwitching.current = false;\n        }\n      }\n    };\n    connectToChannel();\n    return () => {\n      isMounted = false;\n      if (connectionTimeout) {\n        clearTimeout(connectionTimeout);\n      }\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n      switch (message.type) {\n        case 'channel_created':\n          if ('channel' in message) {\n            console.log('New channel created:', message.channel);\n            dispatch(addChannel(message.channel));\n          }\n          break;\n        case 'channel_deleted':\n          if ('channelId' in message) {\n            console.log('Channel deleted:', message.channelId);\n            dispatch(removeChannel(message.channelId));\n            // If we're currently in the deleted channel, switch to another one\n            if (activeChannelId === message.channelId) {\n              const firstAvailableChannel = channels.find(ch => ch.id !== message.channelId);\n              if (firstAvailableChannel) {\n                dispatch(setActiveChannel(firstAvailableChannel.id));\n              }\n            }\n          }\n          break;\n        case 'channel_updated':\n          if ('channel' in message) {\n            console.log('Channel updated:', message.channel);\n            dispatch(setChannels(channels.map(ch => ch.id === message.channel.id ? message.channel : ch)));\n          }\n          break;\n        case 'unread_count_updated':\n          if ('channelId' in message && 'count' in message) {\n            console.log('Unread count updated:', message.channelId, message.count);\n            dispatch(updateChannelUnreadCount({\n              channelId: message.channelId,\n              count: message.count\n            }));\n          }\n          break;\n        case 'message':\n        case 'message_sent':\n          if ('message' in message) {\n            const channelId = message.message.channel_id.toString();\n            if (channelId !== activeChannelId) {\n              // If message is for another channel, increment its unread count\n              const channel = channels.find(ch => ch.id === channelId);\n              if (channel) {\n                dispatch(updateChannelUnreadCount({\n                  channelId,\n                  count: (channel.unreadCount || 0) + 1\n                }));\n              }\n            }\n          }\n          break;\n        case 'new_reply':\n          if ('message' in message && 'parentId' in message) {\n            const channelId = message.message.channel_id.toString();\n            // Update unread count for the channel if we're not currently viewing it\n            if (channelId !== activeChannelId) {\n              const channel = channels.find(ch => ch.id === channelId);\n              if (channel) {\n                dispatch(updateChannelUnreadCount({\n                  channelId,\n                  count: (channel.unreadCount || 0) + 1\n                }));\n              }\n            }\n            // If we're in the channel where the reply was added, update the parent message\n            else if (message.parentId) {\n              const parentMessage = messages.find(msg => msg.id === message.parentId);\n              if (parentMessage) {\n                dispatch(setMessages({\n                  channelId: activeChannelId,\n                  messages: messages.map(msg => msg.id === message.parentId ? {\n                    ...msg,\n                    replyCount: (msg.replyCount || 0) + 1,\n                    isExpanded: true,\n                    repliesLoaded: true,\n                    replies: [...(msg.replies || []), {\n                      id: message.message.id.toString(),\n                      content: message.message.content,\n                      channelId: message.message.channel_id.toString(),\n                      userId: message.message.sender_id.toString(),\n                      reactions: [],\n                      attachments: [],\n                      createdAt: message.message.created_at,\n                      updatedAt: message.message.updated_at || message.message.created_at,\n                      parentId: message.parentId,\n                      replyCount: 0,\n                      isExpanded: false\n                    }]\n                  } : msg)\n                }));\n              }\n            }\n          }\n          break;\n        case 'user_status':\n        case 'presence_update':\n          if ('user_id' in message && 'status' in message) {\n            dispatch(updateUserStatus({\n              userId: message.user_id.toString(),\n              status: message.status\n            }));\n          }\n          break;\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, activeChannelId, channels, messages]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async channelId => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n    const previousChannelId = activeChannelId;\n    isChannelSwitching.current = true;\n    try {\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n      setIsConnecting(false);\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n      if (previousChannelId) {\n        dispatch(setActiveChannel(previousChannelId));\n      }\n    } finally {\n      isChannelSwitching.current = false;\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector(state => {\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    return channelMessages;\n  });\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: messages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 539,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"L3FhQfaKUYJGgBKGO4wWvVbAMQ0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addChannel","removeChannel","updateChannelUnreadCount","setMessages","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","transformMessagesInChunks","messages","map","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","transformToStoreMessage","fetchInitialData","fetchedChannels","length","channelUsers","usersObject","reduce","acc","user","console","disconnect","log","wsState","getChatSocketState","isMounted","connectionTimeout","connectToChannel","current","transformedMessages","connect","setTimeout","WebSocket","OPEN","clearTimeout","handleWebSocketMessage","message","type","firstAvailableChannel","ch","count","unreadCount","parentMessage","repliesLoaded","replies","updated_at","user_id","status","unsubscribe","onMessage","handleSearch","query","trim","undefined","results","handleChannelClick","previousChannelId","c","handleSelectMessage","messageId","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","requestAnimationFrame","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","channelMessages","messagesByChannel","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","isDirect","isPublic","Object","values","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount\n} from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult, Message } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n    } as StoreMessage));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback((msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          // Transform users array to object with user IDs as keys\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    \n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    console.log('[DEBUG] WebSocket effect triggered:', {\n      activeChannelId,\n      isConnecting,\n      wsState: wsService.getChatSocketState()\n    });\n\n    let isMounted = true;\n    let connectionTimeout: NodeJS.Timeout;\n\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) {\n        console.log('[DEBUG] No active channel ID or already connecting');\n        return;\n      }\n\n      try {\n        setIsConnecting(true);\n        isChannelSwitching.current = true;\n\n        // Fetch initial messages for the channel\n        const messages = await getChannelMessages(activeChannelId);\n        if (!isMounted) return;\n\n        // Transform and set messages\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n\n        // Connect to WebSocket for the channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Set up connection timeout\n        connectionTimeout = setTimeout(() => {\n          if (isMounted && wsService.getChatSocketState() !== WebSocket.OPEN) {\n            console.error('WebSocket connection timeout');\n            wsService.disconnect();\n            connectToChannel();\n          }\n        }, 10000);\n\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n          isChannelSwitching.current = false;\n        }\n      }\n    };\n\n    connectToChannel();\n\n    return () => {\n      isMounted = false;\n      if (connectionTimeout) {\n        clearTimeout(connectionTimeout);\n      }\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      switch (message.type) {\n        case 'channel_created':\n          if ('channel' in message) {\n            console.log('New channel created:', message.channel);\n            dispatch(addChannel(message.channel));\n          }\n          break;\n\n        case 'channel_deleted':\n          if ('channelId' in message) {\n            console.log('Channel deleted:', message.channelId);\n            dispatch(removeChannel(message.channelId));\n            // If we're currently in the deleted channel, switch to another one\n            if (activeChannelId === message.channelId) {\n              const firstAvailableChannel = channels.find(ch => ch.id !== message.channelId);\n              if (firstAvailableChannel) {\n                dispatch(setActiveChannel(firstAvailableChannel.id));\n              }\n            }\n          }\n          break;\n\n        case 'channel_updated':\n          if ('channel' in message) {\n            console.log('Channel updated:', message.channel);\n            dispatch(setChannels(\n              channels.map(ch => ch.id === message.channel.id ? message.channel : ch)\n            ));\n          }\n          break;\n\n        case 'unread_count_updated':\n          if ('channelId' in message && 'count' in message) {\n            console.log('Unread count updated:', message.channelId, message.count);\n            dispatch(updateChannelUnreadCount({\n              channelId: message.channelId,\n              count: message.count\n            }));\n          }\n          break;\n\n        case 'message':\n        case 'message_sent':\n          if ('message' in message) {\n            const channelId = message.message.channel_id.toString();\n            if (channelId !== activeChannelId) {\n              // If message is for another channel, increment its unread count\n              const channel = channels.find(ch => ch.id === channelId);\n              if (channel) {\n                dispatch(updateChannelUnreadCount({\n                  channelId,\n                  count: (channel.unreadCount || 0) + 1\n                }));\n              }\n            }\n          }\n          break;\n\n        case 'new_reply':\n          if ('message' in message && 'parentId' in message) {\n            const channelId = message.message.channel_id.toString();\n            // Update unread count for the channel if we're not currently viewing it\n            if (channelId !== activeChannelId) {\n              const channel = channels.find(ch => ch.id === channelId);\n              if (channel) {\n                dispatch(updateChannelUnreadCount({\n                  channelId,\n                  count: (channel.unreadCount || 0) + 1\n                }));\n              }\n            }\n            // If we're in the channel where the reply was added, update the parent message\n            else if (message.parentId) {\n              const parentMessage = messages.find(msg => msg.id === message.parentId);\n              if (parentMessage) {\n                dispatch(setMessages({\n                  channelId: activeChannelId,\n                  messages: messages.map(msg =>\n                    msg.id === message.parentId\n                      ? {\n                          ...msg,\n                          replyCount: (msg.replyCount || 0) + 1,\n                          isExpanded: true,\n                          repliesLoaded: true,\n                          replies: [\n                            ...(msg.replies || []),\n                            {\n                              id: message.message.id.toString(),\n                              content: message.message.content,\n                              channelId: message.message.channel_id.toString(),\n                              userId: message.message.sender_id.toString(),\n                              reactions: [],\n                              attachments: [],\n                              createdAt: message.message.created_at,\n                              updatedAt: message.message.updated_at || message.message.created_at,\n                              parentId: message.parentId,\n                              replyCount: 0,\n                              isExpanded: false\n                            }\n                          ]\n                        }\n                      : msg\n                  )\n                }));\n              }\n            }\n          }\n          break;\n\n        case 'user_status':\n        case 'presence_update':\n          if ('user_id' in message && 'status' in message) {\n            dispatch(updateUserStatus({\n              userId: message.user_id.toString(),\n              status: message.status\n            }));\n          }\n          break;\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, activeChannelId, channels, messages]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async (channelId: string) => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n\n    const previousChannelId = activeChannelId;\n    isChannelSwitching.current = true;\n\n    try {\n      const channel = channels.find((c: Channel) => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      setIsConnecting(false);\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({ channelId, messages: [] }));\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n      if (previousChannelId) {\n        dispatch(setActiveChannel(previousChannelId));\n      }\n    } finally {\n      isChannelSwitching.current = false;\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector((state: RootState) => {\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    return channelMessages;\n  });\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={messages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}