{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  activeChannelId: null,\n  channels: [],\n  users: {},\n  loading: false,\n  error: null\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setActiveChannel: (state, action) => {\n      console.log('Setting active channel:', action.payload);\n      state.activeChannelId = action.payload;\n    },\n    setChannels: (state, action) => {\n      console.log('Setting channels:', action.payload);\n      state.channels = action.payload;\n    },\n    addChannel: (state, action) => {\n      console.log('Adding channel:', action.payload);\n      state.channels.push(action.payload);\n    },\n    removeChannel: (state, action) => {\n      console.log('Removing channel:', action.payload);\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\n    },\n    setUsers: (state, action) => {\n      console.log('Setting users:', action.payload);\n      const users = {};\n      action.payload.forEach(user => {\n        users[user.id] = user;\n      });\n      state.users = users;\n    },\n    updateUserStatus: (state, action) => {\n      console.log('Updating user status:', action.payload);\n      if (state.users[action.payload.userId]) {\n        state.users[action.payload.userId].status = action.payload.status;\n        state.users[action.payload.userId].last_seen = new Date().toISOString();\n      }\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setActiveChannel,\n  setChannels,\n  addChannel,\n  removeChannel,\n  setUsers,\n  updateUserStatus,\n  setLoading,\n  setError\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","activeChannelId","channels","users","loading","error","chatSlice","name","reducers","setActiveChannel","state","action","console","log","payload","setChannels","addChannel","push","removeChannel","filter","channel","id","setUsers","forEach","user","updateUserStatus","userId","status","last_seen","Date","toISOString","setLoading","setError","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/chat/chatSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ChatState, Channel, User } from '../../types';\n\nconst initialState: ChatState = {\n  activeChannelId: null,\n  channels: [],\n  users: {},\n  loading: false,\n  error: null,\n};\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setActiveChannel: (state, action: PayloadAction<number>) => {\n      console.log('Setting active channel:', action.payload);\n      state.activeChannelId = action.payload;\n    },\n    \n    setChannels: (state, action: PayloadAction<Channel[]>) => {\n      console.log('Setting channels:', action.payload);\n      state.channels = action.payload;\n    },\n    \n    addChannel: (state, action: PayloadAction<Channel>) => {\n      console.log('Adding channel:', action.payload);\n      state.channels.push(action.payload);\n    },\n    \n    removeChannel: (state, action: PayloadAction<number>) => {\n      console.log('Removing channel:', action.payload);\n      state.channels = state.channels.filter(channel => channel.id !== action.payload);\n    },\n    \n    setUsers: (state, action: PayloadAction<User[]>) => {\n      console.log('Setting users:', action.payload);\n      const users: { [userId: number]: User } = {};\n      action.payload.forEach(user => {\n        users[user.id] = user;\n      });\n      state.users = users;\n    },\n    \n    updateUserStatus: (state, action: PayloadAction<{ userId: number; status: User['status'] }>) => {\n      console.log('Updating user status:', action.payload);\n      if (state.users[action.payload.userId]) {\n        state.users[action.payload.userId].status = action.payload.status;\n        state.users[action.payload.userId].last_seen = new Date().toISOString();\n      }\n    },\n    \n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    \n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const {\n  setActiveChannel,\n  setChannels,\n  addChannel,\n  removeChannel,\n  setUsers,\n  updateUserStatus,\n  setLoading,\n  setError,\n} = chatSlice.actions;\n\nexport default chatSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}