{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n\n      // Organize messages by parent/reply relationship\n      const mainMessages = [];\n      const repliesByParentId = {};\n\n      // First pass: separate messages into main messages and replies\n      messages.forEach(msg => {\n        if (msg.parentId) {\n          // This is a reply\n          if (!repliesByParentId[msg.parentId]) {\n            repliesByParentId[msg.parentId] = [];\n          }\n          repliesByParentId[msg.parentId].push(msg);\n        } else {\n          // This is a main message\n          mainMessages.push(msg);\n        }\n      });\n\n      // Second pass: attach replies to their parent messages\n      mainMessages.forEach(msg => {\n        if (repliesByParentId[msg.id]) {\n          msg.replies = repliesByParentId[msg.id];\n          msg.replyCount = repliesByParentId[msg.id].length;\n          msg.repliesLoaded = true;\n        }\n      });\n\n      // Update the state with organized messages\n      state.messagesByChannel[channelId] = mainMessages;\n      state.loading = false;\n      state.error = null;\n    },\n    prependMessages: (state, action) => {\n      const {\n        channelId,\n        messages\n      } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      // Add messages to the beginning of the array, avoiding duplicates\n      const existingIds = new Set(state.messagesByChannel[channelId].map(msg => msg.id));\n      const newMessages = messages.filter(msg => !existingIds.has(msg.id));\n      state.messagesByChannel[channelId] = [...newMessages, ...state.messagesByChannel[channelId]];\n    },\n    addMessage: (state, action) => {\n      const {\n        channelId\n      } = action.payload;\n\n      // Initialize channel messages array if it doesn't exist\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n\n      // Check if message already exists by ID\n      const existingMessageIndex = state.messagesByChannel[channelId].findIndex(msg => msg.id === action.payload.id);\n      if (existingMessageIndex === -1) {\n        // Add new message\n        state.messagesByChannel[channelId].push(action.payload);\n\n        // Sort messages by creation time, ensuring chronological order\n        state.messagesByChannel[channelId].sort((a, b) => {\n          const timeA = new Date(a.createdAt).getTime();\n          const timeB = new Date(b.createdAt).getTime();\n          return timeA - timeB;\n        });\n\n        // Ensure parent messages are marked as having replies\n        if (action.payload.parentId) {\n          const parentMessage = state.messagesByChannel[channelId].find(msg => msg.id === action.payload.parentId);\n          if (parentMessage) {\n            parentMessage.replyCount = (parentMessage.replyCount || 0) + 1;\n          }\n        }\n      } else {\n        // Update existing message if it has changed\n        const existingMessage = state.messagesByChannel[channelId][existingMessageIndex];\n        if (existingMessage.updatedAt !== action.payload.updatedAt || existingMessage.content !== action.payload.content || existingMessage.replyCount !== action.payload.replyCount) {\n          state.messagesByChannel[channelId][existingMessageIndex] = {\n            ...existingMessage,\n            ...action.payload,\n            reactions: [...existingMessage.reactions] // Preserve existing reactions\n          };\n        }\n      }\n    },\n    updateMessage: (state, action) => {\n      const {\n        channelId,\n        id\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex(msg => msg.id === id);\n        if (index !== -1) {\n          messages[index] = action.payload.message;\n        }\n      }\n    },\n    deleteMessage: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter(msg => msg.id !== messageId);\n      }\n    },\n    addReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reaction\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          // Check if reaction already exists\n          const existingReactionIndex = message.reactions.findIndex(r => r.id === reaction.id || r.emoji === reaction.emoji && r.userId === reaction.userId);\n          if (existingReactionIndex === -1) {\n            message.reactions.push(reaction);\n          }\n        }\n      }\n    },\n    removeReaction: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        reactionId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.reactions = message.reactions.filter(reaction => reaction.id !== reactionId);\n        }\n      }\n    },\n    setReplies: (state, action) => {\n      const {\n        channelId,\n        messageId,\n        replies\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const messageIndex = messages.findIndex(msg => msg.id === messageId);\n        if (messageIndex !== -1) {\n          // Create a new message object with the updated replies\n          const updatedMessage = {\n            ...messages[messageIndex],\n            replies: [...(messages[messageIndex].replies || []), ...replies.filter(reply => {\n              var _messages$messageInde;\n              return !((_messages$messageInde = messages[messageIndex].replies) !== null && _messages$messageInde !== void 0 && _messages$messageInde.some(existingReply => existingReply.id === reply.id));\n            })],\n            repliesLoaded: true,\n            isExpanded: true // Auto-expand when new replies are added\n          };\n\n          // Update reply count\n          updatedMessage.replyCount = updatedMessage.replies.length;\n\n          // Update the message in the array\n          messages[messageIndex] = updatedMessage;\n        }\n      }\n    },\n    toggleExpanded: (state, action) => {\n      const {\n        channelId,\n        messageId\n      } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find(msg => msg.id === messageId);\n        if (message) {\n          message.isExpanded = !message.isExpanded;\n        }\n      }\n    }\n  }\n});\nexport const {\n  setMessages,\n  prependMessages,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  addReaction,\n  removeReaction,\n  setReplies,\n  toggleExpanded\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","messagesByChannel","loading","error","messagesSlice","name","reducers","setMessages","state","action","channelId","messages","payload","mainMessages","repliesByParentId","forEach","msg","parentId","push","id","replies","replyCount","length","repliesLoaded","prependMessages","existingIds","Set","map","newMessages","filter","has","addMessage","existingMessageIndex","findIndex","sort","a","b","timeA","Date","createdAt","getTime","timeB","parentMessage","find","existingMessage","updatedAt","content","reactions","updateMessage","index","message","deleteMessage","messageId","addReaction","reaction","existingReactionIndex","r","emoji","userId","removeReaction","reactionId","setReplies","messageIndex","updatedMessage","reply","_messages$messageInde","some","existingReply","isExpanded","toggleExpanded","actions","reducer"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/store/messages/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MessagesState, Reaction, StoreMessage } from '../../types';\n\nconst initialState: MessagesState = {\n  messagesByChannel: {},\n  loading: false,\n  error: null,\n};\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      \n      // Organize messages by parent/reply relationship\n      const mainMessages: StoreMessage[] = [];\n      const repliesByParentId: { [key: string]: StoreMessage[] } = {};\n\n      // First pass: separate messages into main messages and replies\n      messages.forEach(msg => {\n        if (msg.parentId) {\n          // This is a reply\n          if (!repliesByParentId[msg.parentId]) {\n            repliesByParentId[msg.parentId] = [];\n          }\n          repliesByParentId[msg.parentId].push(msg);\n        } else {\n          // This is a main message\n          mainMessages.push(msg);\n        }\n      });\n\n      // Second pass: attach replies to their parent messages\n      mainMessages.forEach(msg => {\n        if (repliesByParentId[msg.id]) {\n          msg.replies = repliesByParentId[msg.id];\n          msg.replyCount = repliesByParentId[msg.id].length;\n          msg.repliesLoaded = true;\n        }\n      });\n\n      // Update the state with organized messages\n      state.messagesByChannel[channelId] = mainMessages;\n      state.loading = false;\n      state.error = null;\n    },\n    prependMessages: (state, action: PayloadAction<{ channelId: string; messages: StoreMessage[] }>) => {\n      const { channelId, messages } = action.payload;\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n      // Add messages to the beginning of the array, avoiding duplicates\n      const existingIds = new Set(state.messagesByChannel[channelId].map(msg => msg.id));\n      const newMessages = messages.filter(msg => !existingIds.has(msg.id));\n      state.messagesByChannel[channelId] = [...newMessages, ...state.messagesByChannel[channelId]];\n    },\n    addMessage: (state, action: PayloadAction<StoreMessage>) => {\n      const { channelId } = action.payload;\n      \n      // Initialize channel messages array if it doesn't exist\n      if (!state.messagesByChannel[channelId]) {\n        state.messagesByChannel[channelId] = [];\n      }\n\n      // Check if message already exists by ID\n      const existingMessageIndex = state.messagesByChannel[channelId].findIndex(\n        (msg: StoreMessage) => msg.id === action.payload.id\n      );\n\n      if (existingMessageIndex === -1) {\n        // Add new message\n        state.messagesByChannel[channelId].push(action.payload);\n        \n        // Sort messages by creation time, ensuring chronological order\n        state.messagesByChannel[channelId].sort((a, b) => {\n          const timeA = new Date(a.createdAt).getTime();\n          const timeB = new Date(b.createdAt).getTime();\n          return timeA - timeB;\n        });\n\n        // Ensure parent messages are marked as having replies\n        if (action.payload.parentId) {\n          const parentMessage = state.messagesByChannel[channelId].find(\n            msg => msg.id === action.payload.parentId\n          );\n          if (parentMessage) {\n            parentMessage.replyCount = (parentMessage.replyCount || 0) + 1;\n          }\n        }\n      } else {\n        // Update existing message if it has changed\n        const existingMessage = state.messagesByChannel[channelId][existingMessageIndex];\n        if (\n          existingMessage.updatedAt !== action.payload.updatedAt ||\n          existingMessage.content !== action.payload.content ||\n          existingMessage.replyCount !== action.payload.replyCount\n        ) {\n          state.messagesByChannel[channelId][existingMessageIndex] = {\n            ...existingMessage,\n            ...action.payload,\n            reactions: [...existingMessage.reactions] // Preserve existing reactions\n          };\n        }\n      }\n    },\n    updateMessage: (state, action: PayloadAction<{ channelId: string; id: string; message: StoreMessage }>) => {\n      const { channelId, id } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const index = messages.findIndex((msg: StoreMessage) => msg.id === id);\n        if (index !== -1) {\n          messages[index] = action.payload.message;\n        }\n      }\n    },\n    deleteMessage: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        state.messagesByChannel[channelId] = messages.filter((msg: StoreMessage) => msg.id !== messageId);\n      }\n    },\n    addReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reaction: Reaction }>) => {\n      const { channelId, messageId, reaction } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find((msg: StoreMessage) => msg.id === messageId);\n        if (message) {\n          // Check if reaction already exists\n          const existingReactionIndex = message.reactions.findIndex(\n            (r: Reaction) => r.id === reaction.id || (r.emoji === reaction.emoji && r.userId === reaction.userId)\n          );\n          if (existingReactionIndex === -1) {\n            message.reactions.push(reaction);\n          }\n        }\n      }\n    },\n    removeReaction: (state, action: PayloadAction<{ channelId: string; messageId: string; reactionId: string }>) => {\n      const { channelId, messageId, reactionId } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find((msg: StoreMessage) => msg.id === messageId);\n        if (message) {\n          message.reactions = message.reactions.filter((reaction: Reaction) => reaction.id !== reactionId);\n        }\n      }\n    },\n    setReplies: (state, action: PayloadAction<{ channelId: string; messageId: string; replies: StoreMessage[] }>) => {\n      const { channelId, messageId, replies } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const messageIndex = messages.findIndex((msg: StoreMessage) => msg.id === messageId);\n        if (messageIndex !== -1) {\n          // Create a new message object with the updated replies\n          const updatedMessage = {\n            ...messages[messageIndex],\n            replies: [\n              ...(messages[messageIndex].replies || []),\n              ...replies.filter(reply => \n                !messages[messageIndex].replies?.some(existingReply => \n                  existingReply.id === reply.id\n                )\n              )\n            ],\n            repliesLoaded: true,\n            isExpanded: true // Auto-expand when new replies are added\n          };\n          \n          // Update reply count\n          updatedMessage.replyCount = updatedMessage.replies.length;\n          \n          // Update the message in the array\n          messages[messageIndex] = updatedMessage;\n        }\n      }\n    },\n    toggleExpanded: (state, action: PayloadAction<{ channelId: string; messageId: string }>) => {\n      const { channelId, messageId } = action.payload;\n      const messages = state.messagesByChannel[channelId];\n      if (messages) {\n        const message = messages.find((msg: StoreMessage) => msg.id === messageId);\n        if (message) {\n          message.isExpanded = !message.isExpanded;\n        }\n      }\n    },\n  },\n});\n\nexport const {\n  setMessages,\n  prependMessages,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  addReaction,\n  removeReaction,\n  setReplies,\n  toggleExpanded\n} = messagesSlice.actions;\n\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}