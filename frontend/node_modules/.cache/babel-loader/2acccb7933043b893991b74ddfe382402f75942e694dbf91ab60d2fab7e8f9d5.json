{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const login = async credentials => {\n  const response = await fetch(`${API_URL}/api/v1/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to login');\n  }\n  const data = await response.json();\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', data.token);\n  return data;\n};\nexport const signup = async credentials => {\n  const response = await fetch(`${API_URL}/api/v1/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to sign up');\n  }\n  const data = await response.json();\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', data.token);\n  return data;\n};\nexport const forgotPassword = async email => {\n  const response = await fetch(`${API_URL}/api/v1/auth/forgot-password`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    }),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to send password reset email');\n  }\n};\nexport const logout = async () => {\n  const token = localStorage.getItem('auth_token');\n  if (!token) return;\n  try {\n    const response = await fetch(`${API_URL}/api/v1/auth/logout`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Failed to logout');\n    }\n  } finally {\n    // Always remove the token from localStorage\n    localStorage.removeItem('auth_token');\n  }\n};\n\n// Helper function to get the auth token\nexport const getAuthToken = () => {\n  return localStorage.getItem('auth_token');\n};\n\n// Helper function to check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!getAuthToken();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","detail","data","localStorage","setItem","token","signup","forgotPassword","email","logout","getItem","removeItem","getAuthToken","isAuthenticated"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/auth.ts"],"sourcesContent":["import { User } from '../../store/types';\r\n\r\ninterface LoginCredentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupCredentials {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface AuthResponse {\r\n  user: User;\r\n  token: string;\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nexport const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/api/v1/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to login');\r\n  }\r\n\r\n  const data = await response.json();\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', data.token);\r\n  return data;\r\n};\r\n\r\nexport const signup = async (credentials: SignupCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/api/v1/auth/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to sign up');\r\n  }\r\n\r\n  const data = await response.json();\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', data.token);\r\n  return data;\r\n};\r\n\r\nexport const forgotPassword = async (email: string): Promise<void> => {\r\n  const response = await fetch(`${API_URL}/api/v1/auth/forgot-password`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email }),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to send password reset email');\r\n  }\r\n};\r\n\r\nexport const logout = async (): Promise<void> => {\r\n  const token = localStorage.getItem('auth_token');\r\n  if (!token) return;\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/api/v1/auth/logout`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.detail || 'Failed to logout');\r\n    }\r\n  } finally {\r\n    // Always remove the token from localStorage\r\n    localStorage.removeItem('auth_token');\r\n  }\r\n};\r\n\r\n// Helper function to get the auth token\r\nexport const getAuthToken = (): string | null => {\r\n  return localStorage.getItem('auth_token');\r\n};\r\n\r\n// Helper function to check if user is authenticated\r\nexport const isAuthenticated = (): boolean => {\r\n  return !!getAuthToken();\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}