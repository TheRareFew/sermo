{"ast":null,"code":"import { getAuthToken } from '../api/auth';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.currentChannelId = null;\n  }\n  connect(channelId) {\n    var _this$socket, _this$socket2;\n    // If already connected to this channel, do nothing\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN && this.currentChannelId === channelId) {\n      console.log('WebSocket already connected to channel', channelId);\n      return;\n    }\n\n    // If connected to a different channel, disconnect first\n    if (((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.readyState) === WebSocket.OPEN && this.currentChannelId !== channelId) {\n      console.log('Disconnecting from channel', this.currentChannelId);\n      this.disconnect();\n    }\n    const token = getAuthToken();\n    if (!token) {\n      console.error('No auth token available for WebSocket connection');\n      return;\n    }\n    const baseWsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n    console.log('Base WebSocket URL:', baseWsUrl);\n    const wsUrl = `${baseWsUrl}/chat?token=${token}`;\n    console.log('Full WebSocket URL:', wsUrl);\n    try {\n      this.socket = new WebSocket(wsUrl);\n      console.log('WebSocket instance created');\n    } catch (error) {\n      console.error('Error creating WebSocket:', error);\n    }\n    this.currentChannelId = channelId;\n    this.socket.onopen = () => {\n      console.log('WebSocket connected to channel', channelId);\n      // After connection, join the channel\n      this.joinChannel(channelId);\n    };\n    this.socket.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('WebSocket message received:', message);\n\n        // Handle error messages\n        if (message.type === 'error') {\n          console.error('WebSocket error message:', message);\n          this.errorHandlers.forEach(handler => handler({\n            code: message.code || 'UNKNOWN_ERROR',\n            message: message.content || 'Unknown error occurred'\n          }));\n          return;\n        }\n\n        // Handle channel access errors\n        if (message.type === 'channel_access_denied') {\n          console.error('Channel access denied:', message);\n          this.errorHandlers.forEach(handler => handler({\n            code: 'CHANNEL_ACCESS_DENIED',\n            message: message.content || 'Access to this channel was denied'\n          }));\n          return;\n        }\n\n        // Handle successful messages\n        this.messageHandlers.forEach(handler => handler(message));\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n      this.errorHandlers.forEach(handler => handler({\n        code: 'WEBSOCKET_ERROR',\n        message: 'WebSocket connection error'\n      }));\n    };\n    this.socket.onclose = event => {\n      console.log('WebSocket disconnected with code:', event.code);\n      this.socket = null;\n      this.currentChannelId = null;\n\n      // Handle specific close codes\n      switch (event.code) {\n        case 1003:\n          // Unsupported\n          this.errorHandlers.forEach(handler => handler({\n            code: 'UNSUPPORTED',\n            message: 'WebSocket connection not supported'\n          }));\n          break;\n        case 4001:\n          // Channel access denied\n          this.errorHandlers.forEach(handler => handler({\n            code: 'CHANNEL_ACCESS_DENIED',\n            message: 'Access to the channel was denied'\n          }));\n          break;\n        case 4002:\n          // Authentication failed\n          this.errorHandlers.forEach(handler => handler({\n            code: 'AUTH_FAILED',\n            message: 'Authentication failed'\n          }));\n          break;\n        default:\n          // Try to reconnect for other close codes\n          if (channelId) {\n            setTimeout(() => {\n              console.log('Attempting to reconnect WebSocket...');\n              this.connect(channelId);\n            }, 5000);\n          }\n      }\n    };\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n      this.currentChannelId = null;\n    }\n  }\n  sendMessage(channelId, content) {\n    var _this$socket3;\n    // If not connected to the right channel, connect first\n    if (this.currentChannelId !== channelId) {\n      console.log('Connecting to channel before sending message');\n      this.connect(channelId);\n    }\n    if (((_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.readyState) === WebSocket.OPEN) {\n      const message = {\n        type: 'message',\n        channel_id: channelId,\n        content: content\n      };\n      this.socket.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n      this.errorHandlers.forEach(handler => handler({\n        code: 'NOT_CONNECTED',\n        message: 'WebSocket is not connected'\n      }));\n    }\n  }\n  async joinChannel(channelId) {\n    var _this$socket4;\n    if (((_this$socket4 = this.socket) === null || _this$socket4 === void 0 ? void 0 : _this$socket4.readyState) === WebSocket.OPEN) {\n      console.log('Joining channel:', channelId);\n      const message = {\n        type: 'join_channel',\n        channel_id: parseInt(channelId)\n      };\n      this.socket.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n      this.errorHandlers.forEach(handler => handler({\n        code: 'NOT_CONNECTED',\n        message: 'WebSocket is not connected'\n      }));\n    }\n  }\n  leaveChannel(channelId) {\n    var _this$socket5;\n    if (((_this$socket5 = this.socket) === null || _this$socket5 === void 0 ? void 0 : _this$socket5.readyState) === WebSocket.OPEN && this.currentChannelId === channelId) {\n      const message = {\n        type: 'leave_channel',\n        channel_id: channelId\n      };\n      this.socket.send(JSON.stringify(message));\n      this.disconnect();\n    }\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onError(handler) {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n  getChatSocketState() {\n    var _this$socket6;\n    return ((_this$socket6 = this.socket) === null || _this$socket6 === void 0 ? void 0 : _this$socket6.readyState) || WebSocket.CLOSED;\n  }\n  getCurrentChannelId() {\n    return this.currentChannelId;\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WebSocketService","constructor","socket","messageHandlers","errorHandlers","currentChannelId","connect","channelId","_this$socket","_this$socket2","readyState","WebSocket","OPEN","console","log","disconnect","token","error","baseWsUrl","process","env","REACT_APP_WS_URL","wsUrl","onopen","joinChannel","onmessage","event","message","JSON","parse","data","type","forEach","handler","code","content","onerror","onclose","setTimeout","close","sendMessage","_this$socket3","channel_id","send","stringify","_this$socket4","parseInt","leaveChannel","_this$socket5","onMessage","push","filter","h","onError","getChatSocketState","_this$socket6","CLOSED","getCurrentChannelId","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage } from '../../types';\r\nimport { getAuthToken } from '../api/auth';\r\n\r\nclass WebSocketService {\r\n  private socket: WebSocket | null = null;\r\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private errorHandlers: ((error: { code: string; message: string }) => void)[] = [];\r\n  private currentChannelId: string | null = null;\r\n\r\n  connect(channelId: string) {\r\n    // If already connected to this channel, do nothing\r\n    if (this.socket?.readyState === WebSocket.OPEN && this.currentChannelId === channelId) {\r\n      console.log('WebSocket already connected to channel', channelId);\r\n      return;\r\n    }\r\n\r\n    // If connected to a different channel, disconnect first\r\n    if (this.socket?.readyState === WebSocket.OPEN && this.currentChannelId !== channelId) {\r\n      console.log('Disconnecting from channel', this.currentChannelId);\r\n      this.disconnect();\r\n    }\r\n\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      console.error('No auth token available for WebSocket connection');\r\n      return;\r\n    }\r\n\r\n    const baseWsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\r\n    console.log('Base WebSocket URL:', baseWsUrl);\r\n    const wsUrl = `${baseWsUrl}/chat?token=${token}`;\r\n    console.log('Full WebSocket URL:', wsUrl);\r\n    \r\n    try {\r\n      this.socket = new WebSocket(wsUrl);\r\n      console.log('WebSocket instance created');\r\n    } catch (error) {\r\n      console.error('Error creating WebSocket:', error);\r\n    }\r\n    this.currentChannelId = channelId;\r\n\r\n    this.socket.onopen = () => {\r\n      console.log('WebSocket connected to channel', channelId);\r\n      // After connection, join the channel\r\n      this.joinChannel(channelId);\r\n    };\r\n\r\n    this.socket.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data) as WebSocketMessage;\r\n        console.log('WebSocket message received:', message);\r\n\r\n        // Handle error messages\r\n        if (message.type === 'error') {\r\n          console.error('WebSocket error message:', message);\r\n          this.errorHandlers.forEach(handler => handler({\r\n            code: message.code || 'UNKNOWN_ERROR',\r\n            message: message.content || 'Unknown error occurred'\r\n          }));\r\n          return;\r\n        }\r\n\r\n        // Handle channel access errors\r\n        if (message.type === 'channel_access_denied') {\r\n          console.error('Channel access denied:', message);\r\n          this.errorHandlers.forEach(handler => handler({\r\n            code: 'CHANNEL_ACCESS_DENIED',\r\n            message: message.content || 'Access to this channel was denied'\r\n          }));\r\n          return;\r\n        }\r\n\r\n        // Handle successful messages\r\n        this.messageHandlers.forEach(handler => handler(message));\r\n      } catch (error) {\r\n        console.error('Error parsing WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    this.socket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n      this.errorHandlers.forEach(handler => handler({\r\n        code: 'WEBSOCKET_ERROR',\r\n        message: 'WebSocket connection error'\r\n      }));\r\n    };\r\n\r\n    this.socket.onclose = (event) => {\r\n      console.log('WebSocket disconnected with code:', event.code);\r\n      this.socket = null;\r\n      this.currentChannelId = null;\r\n\r\n      // Handle specific close codes\r\n      switch (event.code) {\r\n        case 1003: // Unsupported\r\n          this.errorHandlers.forEach(handler => handler({\r\n            code: 'UNSUPPORTED',\r\n            message: 'WebSocket connection not supported'\r\n          }));\r\n          break;\r\n        case 4001: // Channel access denied\r\n          this.errorHandlers.forEach(handler => handler({\r\n            code: 'CHANNEL_ACCESS_DENIED',\r\n            message: 'Access to the channel was denied'\r\n          }));\r\n          break;\r\n        case 4002: // Authentication failed\r\n          this.errorHandlers.forEach(handler => handler({\r\n            code: 'AUTH_FAILED',\r\n            message: 'Authentication failed'\r\n          }));\r\n          break;\r\n        default:\r\n          // Try to reconnect for other close codes\r\n          if (channelId) {\r\n            setTimeout(() => {\r\n              console.log('Attempting to reconnect WebSocket...');\r\n              this.connect(channelId);\r\n            }, 5000);\r\n          }\r\n      }\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.close();\r\n      this.socket = null;\r\n      this.currentChannelId = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(channelId: string, content: string) {\r\n    // If not connected to the right channel, connect first\r\n    if (this.currentChannelId !== channelId) {\r\n      console.log('Connecting to channel before sending message');\r\n      this.connect(channelId);\r\n    }\r\n\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      const message = {\r\n        type: 'message',\r\n        channel_id: channelId,\r\n        content: content\r\n      };\r\n      this.socket.send(JSON.stringify(message));\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n      this.errorHandlers.forEach(handler => handler({\r\n        code: 'NOT_CONNECTED',\r\n        message: 'WebSocket is not connected'\r\n      }));\r\n    }\r\n  }\r\n\r\n  async joinChannel(channelId: string) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      console.log('Joining channel:', channelId);\r\n      const message = {\r\n        type: 'join_channel',\r\n        channel_id: parseInt(channelId)\r\n      };\r\n      this.socket.send(JSON.stringify(message));\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n      this.errorHandlers.forEach(handler => handler({\r\n        code: 'NOT_CONNECTED',\r\n        message: 'WebSocket is not connected'\r\n      }));\r\n    }\r\n  }\r\n\r\n  leaveChannel(channelId: string) {\r\n    if (this.socket?.readyState === WebSocket.OPEN && this.currentChannelId === channelId) {\r\n      const message = {\r\n        type: 'leave_channel',\r\n        channel_id: channelId\r\n      };\r\n      this.socket.send(JSON.stringify(message));\r\n      this.disconnect();\r\n    }\r\n  }\r\n\r\n  onMessage(handler: (message: WebSocketMessage) => void) {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  onError(handler: (error: { code: string; message: string }) => void) {\r\n    this.errorHandlers.push(handler);\r\n    return () => {\r\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  getChatSocketState() {\r\n    return this.socket?.readyState || WebSocket.CLOSED;\r\n  }\r\n\r\n  getCurrentChannelId() {\r\n    return this.currentChannelId;\r\n  }\r\n}\r\n\r\nconst wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}