{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport { deleteMessage, addMessage, setReplies, updateMessage } from '../../../store/messages/messagesSlice';\nimport wsService from '../../../services/websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\nconst MessageWrapper = styled.div`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n\n// Type guard functions\nconst isMessageWithMessage = message => {\n  return (message.type === 'message' || message.type === 'message_sent' || message.type === 'message_updated') && 'message' in message && message.message !== undefined;\n};\nconst isReplyMessage = message => {\n  return message.type === 'new_reply' && 'message' in message && 'parentId' in message;\n};\nconst isDeleteMessage = message => {\n  return message.type === 'message_deleted';\n};\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c2 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const activeChannelId = useSelector(state => state.chat.activeChannelId);\n\n  // WebSocket message handler\n  const handleWebSocketMessage = message => {\n    // Check if message belongs to current channel\n    if (isMessageWithMessage(message)) {\n      var _message$message$chan;\n      const channelId = (_message$message$chan = message.message.channel_id) === null || _message$message$chan === void 0 ? void 0 : _message$message$chan.toString();\n      if (channelId && channelId !== activeChannelId) {\n        console.log('Ignoring message from different channel:', channelId, 'current:', activeChannelId);\n        return; // Ignore messages from other channels\n      }\n    }\n    switch (message.type) {\n      case 'message':\n      case 'message_sent':\n        if (isMessageWithMessage(message)) {\n          const transformedMessage = transformMessage(message.message);\n          console.log('Adding new message:', transformedMessage);\n          dispatch(addMessage({\n            channelId: transformedMessage.channelId,\n            message: transformedMessage\n          }));\n        }\n        break;\n      case 'new_reply':\n        if (isReplyMessage(message)) {\n          console.log('Adding new reply:', message);\n          const transformedReply = transformMessage(message.message);\n          dispatch(setReplies({\n            channelId: transformedReply.channelId,\n            messageId: message.parentId,\n            replies: [transformedReply]\n          }));\n        }\n        break;\n      case 'message_deleted':\n        if (isDeleteMessage(message)) {\n          dispatch(deleteMessage({\n            channelId: message.channelId,\n            messageId: message.messageId\n          }));\n        }\n        break;\n      case 'message_updated':\n        if (isMessageWithMessage(message)) {\n          const transformedUpdatedMessage = transformMessage(message.message);\n          dispatch(updateMessage({\n            channelId: transformedUpdatedMessage.channelId,\n            id: transformedUpdatedMessage.id,\n            message: transformedUpdatedMessage\n          }));\n        }\n        break;\n      default:\n        console.warn('Unknown message type:', message.type);\n        break;\n    }\n  };\n\n  // Add WebSocket message handler\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [activeChannelId, messages, dispatch]);\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: ref,\n    children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      isSelected: message.id === selectedMessageId\n    }, message.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 7\n  }, this);\n}, \"Bv9j27OdpFylUKXtmiwKmjq8Hng=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"Bv9j27OdpFylUKXtmiwKmjq8Hng=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c3 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessageList$forwardRef\");\n$RefreshReg$(_c3, \"MessageList\");","map":{"version":3,"names":["React","forwardRef","useEffect","styled","useSelector","useDispatch","transformMessage","Message","deleteMessage","addMessage","setReplies","updateMessage","wsService","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","LoadingIndicator","props","theme","colors","textLight","MessageWrapper","$isSelected","isMessageWithMessage","message","type","undefined","isReplyMessage","isDeleteMessage","MessageList","_s","_c2","ref","messages","selectedMessageId","dispatch","activeChannelId","state","chat","handleWebSocketMessage","_message$message$chan","channelId","channel_id","toString","console","log","transformedMessage","transformedReply","messageId","parentId","replies","transformedUpdatedMessage","id","warn","unsubscribe","onMessage","children","map","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","_c3","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { forwardRef, ForwardedRef, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { \n  RootState, \n  StoreMessage, \n  User, \n  Message as ApiMessage, \n  WebSocketMessage, \n  WebSocketMessageWithMessage,\n  WebSocketReplyMessage,\n  WebSocketDeleteMessage\n} from '../../../types';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Message from '../Message';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies, updateMessage } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { toast } from 'react-toastify';\nimport wsService from '../../../services/websocket';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n\n// Type guard functions\nconst isMessageWithMessage = (message: WebSocketMessage): message is WebSocketMessageWithMessage => {\n  return (message.type === 'message' || message.type === 'message_sent' || message.type === 'message_updated') &&\n         'message' in message && message.message !== undefined;\n};\n\nconst isReplyMessage = (message: WebSocketMessage): message is WebSocketReplyMessage => {\n  return message.type === 'new_reply' && 'message' in message && 'parentId' in message;\n};\n\nconst isDeleteMessage = (message: WebSocketMessage): message is WebSocketDeleteMessage => {\n  return message.type === 'message_deleted';\n};\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>(\n  (props: MessageListProps, ref: ForwardedRef<HTMLDivElement>) => {\n    const { messages, selectedMessageId } = props;\n    const dispatch = useDispatch();\n    const activeChannelId = useSelector((state: RootState) => state.chat.activeChannelId);\n\n    // WebSocket message handler\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      // Check if message belongs to current channel\n      if (isMessageWithMessage(message)) {\n        const channelId = message.message.channel_id?.toString();\n        if (channelId && channelId !== activeChannelId) {\n          console.log('Ignoring message from different channel:', channelId, 'current:', activeChannelId);\n          return; // Ignore messages from other channels\n        }\n      }\n\n      switch (message.type) {\n        case 'message':\n        case 'message_sent':\n          if (isMessageWithMessage(message)) {\n            const transformedMessage = transformMessage(message.message);\n            console.log('Adding new message:', transformedMessage);\n            \n            dispatch(addMessage({\n              channelId: transformedMessage.channelId,\n              message: transformedMessage\n            }));\n          }\n          break;\n\n        case 'new_reply':\n          if (isReplyMessage(message)) {\n            console.log('Adding new reply:', message);\n            const transformedReply = transformMessage(message.message);\n            \n            dispatch(setReplies({\n              channelId: transformedReply.channelId,\n              messageId: message.parentId,\n              replies: [transformedReply]\n            }));\n          }\n          break;\n\n        case 'message_deleted':\n          if (isDeleteMessage(message)) {\n            dispatch(deleteMessage({\n              channelId: message.channelId,\n              messageId: message.messageId\n            }));\n          }\n          break;\n\n        case 'message_updated':\n          if (isMessageWithMessage(message)) {\n            const transformedUpdatedMessage = transformMessage(message.message);\n            dispatch(updateMessage({\n              channelId: transformedUpdatedMessage.channelId,\n              id: transformedUpdatedMessage.id,\n              message: transformedUpdatedMessage\n            }));\n          }\n          break;\n\n        default:\n          console.warn('Unknown message type:', message.type);\n          break;\n      }\n    };\n\n    // Add WebSocket message handler\n    useEffect(() => {\n      if (!activeChannelId) return;\n\n      const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n      return () => unsubscribe();\n    }, [activeChannelId, messages, dispatch]);\n\n    return (\n      <MessageListContainer ref={ref}>\n        {messages.map((message) => (\n          <Message\n            key={message.id}\n            message={message}\n            isSelected={message.id === selectedMessageId}\n          />\n        ))}\n      </MessageListContainer>\n    );\n  }\n);\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}