{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nexport const login = async credentials => {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Login failed');\n    }\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\nexport const register = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Registration failed');\n    }\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\nexport const resetPassword = async email => {\n  try {\n    const response = await fetch(`${API_URL}/auth/reset-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Password reset request failed');\n    }\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","detail","register","userData","resetPassword","email"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/auth.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.detail || 'Login failed');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.detail || 'Registration failed');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const resetPassword = async (email) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/reset-password`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.detail || 'Password reset request failed');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAAW,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,EAAE;MACpDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAI,cAAc,CAAC;IACjD;IAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,gBAAgB,EAAE;MACvDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAI,qBAAqB,CAAC;IACxD;IAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMM,aAAa,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,sBAAsB,EAAE;MAC7DQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAES;MAAM,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAI,+BAA+B,CAAC;IAClE;IAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}