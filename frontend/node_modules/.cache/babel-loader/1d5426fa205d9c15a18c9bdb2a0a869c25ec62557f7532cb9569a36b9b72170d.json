{"ast":null,"code":"import { getAuthToken } from './auth';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n// Transform API user to our User type\nconst transformUser = apiUser => ({\n  ...apiUser,\n  email: '',\n  // Set default values for required fields that the channel API doesn't provide\n  full_name: apiUser.username // Use username as full_name if not provided\n});\nexport const getChannels = async () => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/channels/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to fetch channels');\n  }\n  return response.json();\n};\nexport const getChannelMessages = async (channelId, limit = 50) => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/messages?limit=${limit}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to fetch messages');\n  }\n  return response.json();\n};\nexport const getChannelUsers = async channelId => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/users`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to fetch channel users');\n  }\n  const apiUsers = await response.json();\n  return apiUsers.map(transformUser);\n};\nexport const createChannel = async (name, description) => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  console.log('Creating channel with token:', token);\n  const response = await fetch(`${API_URL}/api/channels/`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      description\n    }),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      detail: 'Unknown error'\n    }));\n    console.error('Channel creation failed:', {\n      status: response.status,\n      statusText: response.statusText,\n      error: errorData\n    });\n    throw new Error(errorData.detail || `Failed to create channel: ${response.statusText}`);\n  }\n  return response.json();\n};\nexport const joinChannel = async channelId => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/join`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to join channel');\n  }\n};\nexport const leaveChannel = async channelId => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/leave`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to leave channel');\n  }\n};","map":{"version":3,"names":["getAuthToken","API_URL","process","env","REACT_APP_API_URL","transformUser","apiUser","email","full_name","username","getChannels","token","Error","response","fetch","headers","credentials","ok","error","json","detail","getChannelMessages","channelId","limit","getChannelUsers","apiUsers","map","createChannel","name","description","console","log","method","body","JSON","stringify","errorData","catch","status","statusText","joinChannel","leaveChannel"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/chat.ts"],"sourcesContent":["import { getAuthToken } from './auth';\r\nimport { Channel, Message, User } from '../../types';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\ninterface ApiUser {\r\n  id: number;\r\n  username: string;\r\n  status: 'online' | 'offline' | 'away' | 'busy';\r\n  last_seen: string;\r\n}\r\n\r\n// Transform API user to our User type\r\nconst transformUser = (apiUser: ApiUser): User => ({\r\n  ...apiUser,\r\n  email: '', // Set default values for required fields that the channel API doesn't provide\r\n  full_name: apiUser.username, // Use username as full_name if not provided\r\n});\r\n\r\nexport const getChannels = async (): Promise<Channel[]> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/channels/`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to fetch channels');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getChannelMessages = async (channelId: number, limit: number = 50): Promise<Message[]> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/messages?limit=${limit}`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to fetch messages');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getChannelUsers = async (channelId: number): Promise<User[]> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/users`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to fetch channel users');\r\n  }\r\n\r\n  const apiUsers: ApiUser[] = await response.json();\r\n  return apiUsers.map(transformUser);\r\n};\r\n\r\nexport const createChannel = async (name: string, description?: string): Promise<Channel> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  console.log('Creating channel with token:', token);\r\n  \r\n  const response = await fetch(`${API_URL}/api/channels/`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ name, description }),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\r\n    console.error('Channel creation failed:', {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      error: errorData\r\n    });\r\n    throw new Error(errorData.detail || `Failed to create channel: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const joinChannel = async (channelId: number): Promise<void> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/join`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to join channel');\r\n  }\r\n};\r\n\r\nexport const leaveChannel = async (channelId: number): Promise<void> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/channels/${channelId}/leave`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to leave channel');\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,QAAQ;AAGrC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AASxE;AACA,MAAMC,aAAa,GAAIC,OAAgB,KAAY;EACjD,GAAGA,OAAO;EACVC,KAAK,EAAE,EAAE;EAAE;EACXC,SAAS,EAAEF,OAAO,CAACG,QAAQ,CAAE;AAC/B,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAgC;EACzD,MAAMC,KAAK,GAAGX,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACW,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAEtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,gBAAgB,EAAE;IACvDc,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDK,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIP,KAAK,CAACM,KAAK,CAACE,MAAM,IAAI,0BAA0B,CAAC;EAC7D;EAEA,OAAOP,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,KAAa,GAAG,EAAE,KAAyB;EACrG,MAAMZ,KAAK,GAAGX,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACW,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAEtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,iBAAiBqB,SAAS,mBAAmBC,KAAK,EAAE,EAAE;IAC3FR,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDK,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIP,KAAK,CAACM,KAAK,CAACE,MAAM,IAAI,0BAA0B,CAAC;EAC7D;EAEA,OAAOP,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMK,eAAe,GAAG,MAAOF,SAAiB,IAAsB;EAC3E,MAAMX,KAAK,GAAGX,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACW,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAEtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,iBAAiBqB,SAAS,QAAQ,EAAE;IACzEP,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDK,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIP,KAAK,CAACM,KAAK,CAACE,MAAM,IAAI,+BAA+B,CAAC;EAClE;EAEA,MAAMK,QAAmB,GAAG,MAAMZ,QAAQ,CAACM,IAAI,CAAC,CAAC;EACjD,OAAOM,QAAQ,CAACC,GAAG,CAACrB,aAAa,CAAC;AACpC,CAAC;AAED,OAAO,MAAMsB,aAAa,GAAG,MAAAA,CAAOC,IAAY,EAAEC,WAAoB,KAAuB;EAC3F,MAAMlB,KAAK,GAAGX,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACW,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAEtDkB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEpB,KAAK,CAAC;EAElD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,gBAAgB,EAAE;IACvD+B,MAAM,EAAE,MAAM;IACdjB,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,IAAI;MAAEC;IAAY,CAAC,CAAC;IAC3Cb,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMmB,SAAS,GAAG,MAAMvB,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACkB,KAAK,CAAC,OAAO;MAAEjB,MAAM,EAAE;IAAgB,CAAC,CAAC,CAAC;IAClFU,OAAO,CAACZ,KAAK,CAAC,0BAA0B,EAAE;MACxCoB,MAAM,EAAEzB,QAAQ,CAACyB,MAAM;MACvBC,UAAU,EAAE1B,QAAQ,CAAC0B,UAAU;MAC/BrB,KAAK,EAAEkB;IACT,CAAC,CAAC;IACF,MAAM,IAAIxB,KAAK,CAACwB,SAAS,CAAChB,MAAM,IAAI,6BAA6BP,QAAQ,CAAC0B,UAAU,EAAE,CAAC;EACzF;EAEA,OAAO1B,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMqB,WAAW,GAAG,MAAOlB,SAAiB,IAAoB;EACrE,MAAMX,KAAK,GAAGX,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACW,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAEtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,iBAAiBqB,SAAS,OAAO,EAAE;IACxEU,MAAM,EAAE,MAAM;IACdjB,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK;IAClC,CAAC;IACDK,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIP,KAAK,CAACM,KAAK,CAACE,MAAM,IAAI,wBAAwB,CAAC;EAC3D;AACF,CAAC;AAED,OAAO,MAAMqB,YAAY,GAAG,MAAOnB,SAAiB,IAAoB;EACtE,MAAMX,KAAK,GAAGX,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACW,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAEtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,iBAAiBqB,SAAS,QAAQ,EAAE;IACzEU,MAAM,EAAE,MAAM;IACdjB,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK;IAClC,CAAC;IACDK,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIP,KAAK,CAACM,KAAK,CAACE,MAAM,IAAI,yBAAyB,CAAC;EAC5D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}