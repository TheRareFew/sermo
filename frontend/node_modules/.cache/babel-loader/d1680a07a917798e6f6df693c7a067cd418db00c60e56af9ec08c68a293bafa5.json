{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageInput\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport wsService from '../../../services/websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputContainer = styled.div`\n  padding: 16px 32px;\n  background: ${props => props.theme.colors.background};\n  display: flex;\n  justify-content: center;\n`;\n_c = InputContainer;\nconst StyledInput = styled.input`\n  width: 100%;\n  max-width: 800px;\n  padding: 12px 16px;\n  background: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  border: 2px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n    box-shadow: 0 0 0 1px ${props => props.theme.colors.primary};\n  }\n\n  &::placeholder {\n    color: ${props => props.theme.colors.textSecondary};\n  }\n`;\n_c2 = StyledInput;\nconst MessageInput = ({\n  channelId\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && message.trim()) {\n      const wsState = wsService.getChatSocketState();\n      console.log('WebSocket state:', {\n        state: wsState,\n        isConnected: wsState === WebSocket.OPEN,\n        channelId,\n        content: message.trim()\n      });\n      if (wsState === WebSocket.OPEN) {\n        wsService.sendMessage(channelId, message.trim());\n        setMessage('');\n      } else {\n        console.error('WebSocket is not connected. State:', wsState);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(InputContainer, {\n    children: /*#__PURE__*/_jsxDEV(StyledInput, {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      onKeyPress: handleKeyPress,\n      placeholder: \"> Type your message and press Enter...\",\n      \"aria-label\": \"Message input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageInput, \"bGPKBe2V1vyt2i0iGlh2UJTgFRs=\", false, function () {\n  return [useDispatch];\n});\n_c3 = MessageInput;\nexport default MessageInput;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"InputContainer\");\n$RefreshReg$(_c2, \"StyledInput\");\n$RefreshReg$(_c3, \"MessageInput\");","map":{"version":3,"names":["React","useState","styled","useDispatch","wsService","jsxDEV","_jsxDEV","InputContainer","div","props","theme","colors","background","_c","StyledInput","input","text","border","primary","textSecondary","_c2","MessageInput","channelId","_s","message","setMessage","dispatch","handleKeyPress","e","key","trim","wsState","getChatSocketState","console","log","state","isConnected","WebSocket","OPEN","content","sendMessage","error","children","type","value","onChange","target","onKeyPress","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageInput/index.tsx"],"sourcesContent":["import React, { useState, KeyboardEvent } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport wsService from '../../../services/websocket';\n\ninterface MessageInputProps {\n  channelId: number;\n}\n\nconst InputContainer = styled.div`\n  padding: 16px 32px;\n  background: ${props => props.theme.colors.background};\n  display: flex;\n  justify-content: center;\n`;\n\nconst StyledInput = styled.input`\n  width: 100%;\n  max-width: 800px;\n  padding: 12px 16px;\n  background: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  border: 2px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n    box-shadow: 0 0 0 1px ${props => props.theme.colors.primary};\n  }\n\n  &::placeholder {\n    color: ${props => props.theme.colors.textSecondary};\n  }\n`;\n\nconst MessageInput: React.FC<MessageInputProps> = ({ channelId }) => {\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && message.trim()) {\n      const wsState = wsService.getChatSocketState();\n      console.log('WebSocket state:', {\n        state: wsState,\n        isConnected: wsState === WebSocket.OPEN,\n        channelId,\n        content: message.trim()\n      });\n      \n      if (wsState === WebSocket.OPEN) {\n        wsService.sendMessage(channelId, message.trim());\n        setMessage('');\n      } else {\n        console.error('WebSocket is not connected. State:', wsState);\n      }\n    }\n  };\n\n  return (\n    <InputContainer>\n      <StyledInput\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={handleKeyPress}\n        placeholder=\"> Type your message and press Enter...\"\n        aria-label=\"Message input\"\n      />\n    </InputContainer>\n  );\n};\n\nexport default MessageInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}