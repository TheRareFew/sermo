{"ast":null,"code":"class SearchCache {\n  // Time to live in milliseconds\n\n  constructor(maxEntries = 50, ttlMinutes = 5) {\n    this.cache = void 0;\n    this.maxEntries = void 0;\n    this.ttl = void 0;\n    this.cache = new Map();\n    this.maxEntries = maxEntries;\n    this.ttl = ttlMinutes * 60 * 1000;\n  }\n  get(query) {\n    const entry = this.cache.get(query);\n    if (!entry) return null;\n\n    // Check if entry has expired\n    if (Date.now() - entry.timestamp > this.ttl) {\n      this.cache.delete(query);\n      return null;\n    }\n    return entry.results;\n  }\n  set(query, results) {\n    // Remove oldest entry if cache is full\n    if (this.cache.size >= this.maxEntries) {\n      const oldestKey = this.cache.keys().next().value;\n      this.cache.delete(oldestKey);\n    }\n    this.cache.set(query, {\n      results,\n      timestamp: Date.now()\n    });\n  }\n  clear() {\n    this.cache.clear();\n  }\n}\nexport const searchCache = new SearchCache();","map":{"version":3,"names":["SearchCache","constructor","maxEntries","ttlMinutes","cache","ttl","Map","get","query","entry","Date","now","timestamp","delete","results","set","size","oldestKey","keys","next","value","clear","searchCache"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/cache/searchCache.ts"],"sourcesContent":["import { SearchResult } from '../../types';\r\n\r\ninterface CacheEntry {\r\n  results: SearchResult;\r\n  timestamp: number;\r\n}\r\n\r\nclass SearchCache {\r\n  private cache: Map<string, CacheEntry>;\r\n  private maxEntries: number;\r\n  private ttl: number; // Time to live in milliseconds\r\n\r\n  constructor(maxEntries = 50, ttlMinutes = 5) {\r\n    this.cache = new Map();\r\n    this.maxEntries = maxEntries;\r\n    this.ttl = ttlMinutes * 60 * 1000;\r\n  }\r\n\r\n  get(query: string): SearchResult | null {\r\n    const entry = this.cache.get(query);\r\n    if (!entry) return null;\r\n\r\n    // Check if entry has expired\r\n    if (Date.now() - entry.timestamp > this.ttl) {\r\n      this.cache.delete(query);\r\n      return null;\r\n    }\r\n\r\n    return entry.results;\r\n  }\r\n\r\n  set(query: string, results: SearchResult): void {\r\n    // Remove oldest entry if cache is full\r\n    if (this.cache.size >= this.maxEntries) {\r\n      const oldestKey = this.cache.keys().next().value;\r\n      this.cache.delete(oldestKey);\r\n    }\r\n\r\n    this.cache.set(query, {\r\n      results,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}\r\n\r\nexport const searchCache = new SearchCache(); "],"mappings":"AAOA,MAAMA,WAAW,CAAC;EAGK;;EAErBC,WAAWA,CAACC,UAAU,GAAG,EAAE,EAAEC,UAAU,GAAG,CAAC,EAAE;IAAA,KAJrCC,KAAK;IAAA,KACLF,UAAU;IAAA,KACVG,GAAG;IAGT,IAAI,CAACD,KAAK,GAAG,IAAIE,GAAG,CAAC,CAAC;IACtB,IAAI,CAACJ,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,GAAG,GAAGF,UAAU,GAAG,EAAE,GAAG,IAAI;EACnC;EAEAI,GAAGA,CAACC,KAAa,EAAuB;IACtC,MAAMC,KAAK,GAAG,IAAI,CAACL,KAAK,CAACG,GAAG,CAACC,KAAK,CAAC;IACnC,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI;;IAEvB;IACA,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,CAACG,SAAS,GAAG,IAAI,CAACP,GAAG,EAAE;MAC3C,IAAI,CAACD,KAAK,CAACS,MAAM,CAACL,KAAK,CAAC;MACxB,OAAO,IAAI;IACb;IAEA,OAAOC,KAAK,CAACK,OAAO;EACtB;EAEAC,GAAGA,CAACP,KAAa,EAAEM,OAAqB,EAAQ;IAC9C;IACA,IAAI,IAAI,CAACV,KAAK,CAACY,IAAI,IAAI,IAAI,CAACd,UAAU,EAAE;MACtC,MAAMe,SAAS,GAAG,IAAI,CAACb,KAAK,CAACc,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK;MAChD,IAAI,CAAChB,KAAK,CAACS,MAAM,CAACI,SAAS,CAAC;IAC9B;IAEA,IAAI,CAACb,KAAK,CAACW,GAAG,CAACP,KAAK,EAAE;MACpBM,OAAO;MACPF,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC,CAAC;EACJ;EAEAU,KAAKA,CAAA,EAAS;IACZ,IAAI,CAACjB,KAAK,CAACiB,KAAK,CAAC,CAAC;EACpB;AACF;AAEA,OAAO,MAAMC,WAAW,GAAG,IAAItB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}