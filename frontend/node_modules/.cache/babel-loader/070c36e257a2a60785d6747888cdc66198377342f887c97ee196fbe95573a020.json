{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus } from '../../../store/chat/chatSlice';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers } from '../../../services/api/chat';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst MainLayout = () => {\n  _s();\n  var _state$messages2;\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        var _fetchedChannels$;\n        // Fetch all channels - all channels are accessible by default\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        // Set the first channel as active if there are any channels\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n\n        // Connect to WebSocket - only once\n        wsService.connect(((_fetchedChannels$ = fetchedChannels[0]) === null || _fetchedChannels$ === void 0 ? void 0 : _fetchedChannels$.id) || '1');\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching\n  useEffect(() => {\n    if (activeChannelId) {\n      console.log('Switching to channel:', activeChannelId);\n      wsService.joinChannel(activeChannelId);\n\n      // Fetch channel users\n      getChannelUsers(activeChannelId).then(channelUsers => {\n        dispatch(setUsers(channelUsers));\n      }).catch(error => {\n        console.error('Failed to fetch channel users:', error);\n      });\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleMessage = message => {\n      console.log('Received WebSocket message:', message);\n\n      // Handle both new message and message_sent events\n      if (message.type === 'message' && message.message) {\n        try {\n          var _state$messages;\n          const {\n            id,\n            content,\n            channel_id,\n            sender_id,\n            created_at\n          } = message.message;\n          console.log('Processing message:', {\n            id,\n            content,\n            channel_id,\n            sender_id,\n            created_at\n          });\n          if (!id || !content || !channel_id || !sender_id || !created_at) {\n            console.error('Invalid message format:', message);\n            return;\n          }\n\n          // Check if we have the sender's information\n          if (!users[sender_id]) {\n            console.log('Fetching information for new user:', sender_id);\n            // Fetch updated user list for the channel\n            getChannelUsers(String(channel_id)).then(channelUsers => {\n              console.log('Updated user list:', channelUsers);\n              dispatch(setUsers(channelUsers));\n            }).catch(error => {\n              console.error('Failed to fetch user information:', error);\n            });\n          }\n\n          // Check if message already exists in the store\n          const channelMessages = ((_state$messages = state.messages) === null || _state$messages === void 0 ? void 0 : _state$messages.messagesByChannel[String(channel_id)]) || [];\n          const messageExists = channelMessages.some(msg => msg.id === String(id));\n          if (!messageExists) {\n            const transformedMessage = {\n              id: String(id),\n              content: content,\n              channelId: String(channel_id),\n              userId: String(sender_id),\n              reactions: [],\n              attachments: [],\n              createdAt: created_at,\n              updatedAt: created_at\n            };\n            console.log('Dispatching transformed message:', transformedMessage);\n            dispatch(addMessage(transformedMessage));\n          } else {\n            console.log('Message already exists in store, skipping:', id);\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      } else if (message.type === 'user_status' && message.user_id && message.status) {\n        dispatch(updateUserStatus({\n          userId: String(message.user_id),\n          status: message.status\n        }));\n      }\n    };\n\n    // onMessage returns a cleanup function\n    const cleanup = wsService.onMessage(handleMessage);\n    return cleanup;\n  }, [dispatch, users, (_state$messages2 = state.messages) === null || _state$messages2 === void 0 ? void 0 : _state$messages2.messagesByChannel]);\n  const handleChannelClick = async channelId => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n    }\n  };\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [activeChannel && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        channelId: activeChannelId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      onClose: () => setIsSettingsOpen(false),\n      channel: activeChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"SygUqIT5JDuisx8fnTtNcItZzgI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c15 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","wsService","getChannels","getChannelUsers","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","MainLayout","_s","_state$messages2","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","fetchInitialData","_fetchedChannels$","fetchedChannels","length","channelUsers","connect","console","disconnect","log","joinChannel","then","catch","handleMessage","message","type","_state$messages","content","channel_id","sender_id","created_at","String","channelMessages","messages","messagesByChannel","messageExists","some","msg","transformedMessage","channelId","userId","reactions","attachments","createdAt","updatedAt","user_id","status","cleanup","onMessage","handleChannelClick","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","map","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","user","username","isOpen","onClose","_c15","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers } from '../../../services/api/chat';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  \n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        // Fetch all channels - all channels are accessible by default\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        // Set the first channel as active if there are any channels\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n\n        // Connect to WebSocket - only once\n        wsService.connect(fetchedChannels[0]?.id || '1');\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    \n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching\n  useEffect(() => {\n    if (activeChannelId) {\n      console.log('Switching to channel:', activeChannelId);\n      wsService.joinChannel(activeChannelId);\n      \n      // Fetch channel users\n      getChannelUsers(activeChannelId)\n        .then(channelUsers => {\n          dispatch(setUsers(channelUsers));\n        })\n        .catch(error => {\n          console.error('Failed to fetch channel users:', error);\n        });\n    }\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      // Handle both new message and message_sent events\n      if (message.type === 'message' && message.message) {\n        try {\n          const { id, content, channel_id, sender_id, created_at } = message.message;\n          console.log('Processing message:', { id, content, channel_id, sender_id, created_at });\n          \n          if (!id || !content || !channel_id || !sender_id || !created_at) {\n            console.error('Invalid message format:', message);\n            return;\n          }\n\n          // Check if we have the sender's information\n          if (!users[sender_id]) {\n            console.log('Fetching information for new user:', sender_id);\n            // Fetch updated user list for the channel\n            getChannelUsers(String(channel_id))\n              .then(channelUsers => {\n                console.log('Updated user list:', channelUsers);\n                dispatch(setUsers(channelUsers));\n              })\n              .catch(error => {\n                console.error('Failed to fetch user information:', error);\n              });\n          }\n\n          // Check if message already exists in the store\n          const channelMessages = state.messages?.messagesByChannel[String(channel_id)] || [];\n          const messageExists = channelMessages.some(msg => msg.id === String(id));\n          \n          if (!messageExists) {\n            const transformedMessage: StoreMessage = {\n              id: String(id),\n              content: content,\n              channelId: String(channel_id),\n              userId: String(sender_id),\n              reactions: [],\n              attachments: [],\n              createdAt: created_at,\n              updatedAt: created_at\n            };\n\n            console.log('Dispatching transformed message:', transformedMessage);\n            dispatch(addMessage(transformedMessage));\n          } else {\n            console.log('Message already exists in store, skipping:', id);\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      } else if (message.type === 'user_status' && message.user_id && message.status) {\n        dispatch(updateUserStatus({\n          userId: String(message.user_id),\n          status: message.status\n        }));\n      }\n    };\n\n    // onMessage returns a cleanup function\n    const cleanup = wsService.onMessage(handleMessage);\n    return cleanup;\n  }, [dispatch, users, state.messages?.messagesByChannel]);\n\n  const handleChannelClick = async (channelId: string) => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel ? `${activeChannel.is_direct_message ? '@' : '#'}${activeChannel.name}` : 'Select a channel'}</h1>\n          <ChannelActions>\n            {activeChannel && (\n              <SettingsButton\n                variant=\"secondary\"\n                size=\"small\"\n                onClick={() => setIsSettingsOpen(true)}\n              >\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        <MessageList channelId={activeChannelId} />\n        <ChatInput>\n          <MessageInput channelId={activeChannelId} />\n        </ChatInput>\n      </ChatArea>\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          onClose={() => setIsSettingsOpen(false)}\n          channel={activeChannel}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}