{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, setError } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies, deleteMessage, updateMessage } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]); // Only run once on mount, but include dispatch in dependencies\n\n  const connectWebSocket = async (channelId, retries = 3) => {\n    for (let i = 0; i < retries; i++) {\n      try {\n        await wsService.connect(channelId);\n        return true;\n      } catch (error) {\n        console.error(`WebSocket connection attempt ${i + 1} failed:`, error);\n        if (i === retries - 1) throw error;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    return false;\n  };\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async channelId => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // First disconnect from current channel\n      wsService.disconnect();\n\n      // Set the active channel and clear messages\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n\n      // Fetch channel users and messages in parallel\n      const [channelUsers, messages] = await Promise.all([getChannelUsers(channelId), getChannelMessages(channelId)]);\n\n      // Update users in store\n      const usersObject = channelUsers.reduce((acc, user) => ({\n        ...acc,\n        [user.id]: user\n      }), {});\n      dispatch(setUsers(usersObject));\n\n      // Transform and update messages\n      const transformedMessages = transformMessagesInChunks(messages);\n      dispatch(setMessages({\n        channelId,\n        messages: transformedMessages\n      }));\n\n      // Connect to WebSocket for the new channel\n      await connectWebSocket(channelId);\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n\n      // Attempt background reconnection\n      setTimeout(() => {\n        if (!wsService.isConnected()) {\n          connectWebSocket(channelId).catch(console.error);\n        }\n      }, 2000);\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, transformMessagesInChunks, dispatch]);\n\n  // Add WebSocket reconnection logic\n  useEffect(() => {\n    if (!activeChannelId) return;\n    let reconnectTimeout;\n    let reconnectAttempts = 0;\n    const MAX_RECONNECT_ATTEMPTS = 5;\n    const RECONNECT_DELAY = 2000;\n    const handleConnectionError = async error => {\n      console.error('WebSocket connection error:', error);\n      dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n      if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n        reconnectTimeout = setTimeout(async () => {\n          try {\n            await connectWebSocket(activeChannelId);\n            reconnectAttempts = 0;\n            dispatch(setError(null));\n          } catch (reconnectError) {\n            reconnectAttempts++;\n            handleConnectionError(reconnectError);\n          }\n        }, RECONNECT_DELAY * Math.pow(2, reconnectAttempts));\n      } else {\n        dispatch(setError('Unable to reconnect to chat server. Please refresh the page.'));\n      }\n    };\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n        reconnectAttempts = 0;\n      }\n    };\n    const unsubscribeError = wsService.onError(handleConnectionError);\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n    return () => {\n      clearTimeout(reconnectTimeout);\n      clearInterval(statusInterval);\n      unsubscribeError();\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const handleWebSocketMessage = message => {\n      console.log('MainLayout received WebSocket message:', message);\n\n      // Helper function to check if message belongs to current channel\n      const isMessageForCurrentChannel = msg => {\n        if ('message' in msg && msg.message && typeof msg.message === 'object') {\n          var _msg$message$channel_;\n          const channelId = (_msg$message$channel_ = msg.message.channel_id) === null || _msg$message$channel_ === void 0 ? void 0 : _msg$message$channel_.toString();\n          return channelId === activeChannelId;\n        }\n        if ('channelId' in msg) {\n          var _msg$channelId;\n          const channelId = (_msg$channelId = msg.channelId) === null || _msg$channelId === void 0 ? void 0 : _msg$channelId.toString();\n          return channelId === activeChannelId;\n        }\n        return true;\n      };\n\n      // Skip messages not meant for current channel\n      if (!isMessageForCurrentChannel(message)) {\n        console.log('Ignoring message from different channel');\n        return;\n      }\n      try {\n        switch (message.type) {\n          case 'message':\n          case 'message_sent':\n          case 'message_updated':\n            if ('message' in message && message.message) {\n              console.log('Processing message:', message);\n              const transformedMessage = transformMessage(message.message);\n              if (message.type === 'message_updated') {\n                dispatch(updateMessage({\n                  channelId: transformedMessage.channelId,\n                  id: transformedMessage.id,\n                  message: transformedMessage\n                }));\n              } else {\n                dispatch(addMessage({\n                  channelId: transformedMessage.channelId,\n                  message: transformedMessage\n                }));\n\n                // Auto-scroll to bottom for new messages only if we're already near bottom\n                const messageList = messageListRef.current;\n                if (messageList) {\n                  const isNearBottom = messageList.scrollHeight - messageList.scrollTop - messageList.clientHeight < 100;\n                  if (isNearBottom) {\n                    requestAnimationFrame(() => {\n                      messageList.scrollTop = messageList.scrollHeight;\n                    });\n                  }\n                }\n              }\n            }\n            break;\n          case 'new_reply':\n            if ('message' in message && message.message && 'parentId' in message) {\n              const transformedReply = transformMessage(message.message);\n              dispatch(setReplies({\n                channelId: transformedReply.channelId,\n                messageId: message.parentId,\n                replies: [transformedReply]\n              }));\n            }\n            break;\n          case 'message_deleted':\n            if ('channelId' in message && 'messageId' in message) {\n              dispatch(deleteMessage({\n                channelId: message.channelId,\n                messageId: message.messageId\n              }));\n            }\n            break;\n\n          // Handle other message types...\n          default:\n            console.warn('Unknown message type:', message.type);\n            break;\n        }\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n        dispatch(setError('Error processing message from server'));\n      }\n    };\n\n    // Add connection status handling\n    const handleConnectionError = error => {\n      console.error('WebSocket connection error:', error);\n      dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n    };\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n      }\n    };\n    console.log('Setting up WebSocket handlers for channel:', activeChannelId);\n    const unsubscribeMessage = wsService.onMessage(handleWebSocketMessage);\n    const unsubscribeError = wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n    return () => {\n      console.log('Cleaning up WebSocket handlers for channel:', activeChannelId);\n      clearInterval(statusInterval);\n      unsubscribeMessage();\n      unsubscribeError();\n    };\n  }, [activeChannelId, channels, dispatch, handleChannelSelect, messageListRef]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 548,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"aI8kwZ4yqffPY7N2XAZ6s4QDSzA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","setError","addMessage","setMessages","setReplies","deleteMessage","updateMessage","transformMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","channelMessages","messages","messagesByChannel","transformMessagesInChunks","map","msg","fetchInitialData","console","log","fetchedChannels","length","firstChannelId","channelUsers","usersObject","reduce","acc","user","connectWebSocket","channelId","retries","i","connect","Promise","resolve","setTimeout","handleChannelSelect","current","disconnect","all","transformedMessages","isConnected","catch","reconnectTimeout","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","RECONNECT_DELAY","handleConnectionError","reconnectError","Math","pow","handleConnectionStatus","status","getChatSocketState","WebSocket","OPEN","unsubscribeError","onError","statusInterval","setInterval","clearTimeout","clearInterval","handleWebSocketMessage","message","isMessageForCurrentChannel","_msg$message$channel_","channel_id","toString","_msg$channelId","type","transformedMessage","messageList","isNearBottom","scrollHeight","scrollTop","clientHeight","requestAnimationFrame","transformedReply","messageId","parentId","replies","warn","unsubscribeMessage","onMessage","handleSearch","query","trim","undefined","results","handleSelectMessage","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage\n} from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { \n  RootState, \n  WebSocketMessage, \n  StoreMessage, \n  Channel, \n  User, \n  Message, \n  WebSocketChannelMessage, \n  WebSocketUserStatusMessage, \n  SearchResult,\n  WebSocketMessageWithMessage\n} from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]); // Only run once on mount, but include dispatch in dependencies\n\n  const connectWebSocket = async (channelId: string, retries = 3) => {\n    for (let i = 0; i < retries; i++) {\n      try {\n        await wsService.connect(channelId);\n        return true;\n      } catch (error) {\n        console.error(`WebSocket connection attempt ${i + 1} failed:`, error);\n        if (i === retries - 1) throw error;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    return false;\n  };\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async (channelId: string) => {\n    if (channelId === activeChannelId || isChannelSwitching.current) {\n      return;\n    }\n\n    try {\n      isChannelSwitching.current = true;\n      setIsConnecting(true);\n\n      // First disconnect from current channel\n      wsService.disconnect();\n\n      // Set the active channel and clear messages\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({ channelId, messages: [] }));\n\n      // Fetch channel users and messages in parallel\n      const [channelUsers, messages] = await Promise.all([\n        getChannelUsers(channelId),\n        getChannelMessages(channelId)\n      ]);\n\n      // Update users in store\n      const usersObject = channelUsers.reduce((acc, user) => ({\n        ...acc,\n        [user.id]: user\n      }), {});\n      dispatch(setUsers(usersObject));\n\n      // Transform and update messages\n      const transformedMessages = transformMessagesInChunks(messages);\n      dispatch(setMessages({ channelId, messages: transformedMessages }));\n\n      // Connect to WebSocket for the new channel\n      await connectWebSocket(channelId);\n\n    } catch (error) {\n      console.error('Error in channel switch:', error);\n      dispatch(setError('Failed to switch channels. Please try again.'));\n      \n      // Attempt background reconnection\n      setTimeout(() => {\n        if (!wsService.isConnected()) {\n          connectWebSocket(channelId).catch(console.error);\n        }\n      }, 2000);\n    } finally {\n      isChannelSwitching.current = false;\n      setIsConnecting(false);\n    }\n  }, [activeChannelId, transformMessagesInChunks, dispatch]);\n\n  // Add WebSocket reconnection logic\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    let reconnectTimeout: NodeJS.Timeout;\n    let reconnectAttempts = 0;\n    const MAX_RECONNECT_ATTEMPTS = 5;\n    const RECONNECT_DELAY = 2000;\n\n    const handleConnectionError = async (error: Error) => {\n      console.error('WebSocket connection error:', error);\n      dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n\n      if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n        reconnectTimeout = setTimeout(async () => {\n          try {\n            await connectWebSocket(activeChannelId);\n            reconnectAttempts = 0;\n            dispatch(setError(null));\n          } catch (reconnectError) {\n            reconnectAttempts++;\n            handleConnectionError(reconnectError as Error);\n          }\n        }, RECONNECT_DELAY * Math.pow(2, reconnectAttempts));\n      } else {\n        dispatch(setError('Unable to reconnect to chat server. Please refresh the page.'));\n      }\n    };\n\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n        reconnectAttempts = 0;\n      }\n    };\n\n    const unsubscribeError = wsService.onError(handleConnectionError);\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n\n    return () => {\n      clearTimeout(reconnectTimeout);\n      clearInterval(statusInterval);\n      unsubscribeError();\n    };\n  }, [activeChannelId, dispatch]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('MainLayout received WebSocket message:', message);\n\n      // Helper function to check if message belongs to current channel\n      const isMessageForCurrentChannel = (msg: WebSocketMessage): boolean => {\n        if ('message' in msg && msg.message && typeof msg.message === 'object') {\n          const channelId = msg.message.channel_id?.toString();\n          return channelId === activeChannelId;\n        }\n        if ('channelId' in msg) {\n          const channelId = msg.channelId?.toString();\n          return channelId === activeChannelId;\n        }\n        return true;\n      };\n\n      // Skip messages not meant for current channel\n      if (!isMessageForCurrentChannel(message)) {\n        console.log('Ignoring message from different channel');\n        return;\n      }\n\n      try {\n        switch (message.type) {\n          case 'message':\n          case 'message_sent':\n          case 'message_updated':\n            if ('message' in message && message.message) {\n              console.log('Processing message:', message);\n              const transformedMessage = transformMessage(message.message);\n              \n              if (message.type === 'message_updated') {\n                dispatch(updateMessage({\n                  channelId: transformedMessage.channelId,\n                  id: transformedMessage.id,\n                  message: transformedMessage\n                }));\n              } else {\n                dispatch(addMessage({\n                  channelId: transformedMessage.channelId,\n                  message: transformedMessage\n                }));\n\n                // Auto-scroll to bottom for new messages only if we're already near bottom\n                const messageList = messageListRef.current;\n                if (messageList) {\n                  const isNearBottom = messageList.scrollHeight - messageList.scrollTop - messageList.clientHeight < 100;\n                  if (isNearBottom) {\n                    requestAnimationFrame(() => {\n                      messageList.scrollTop = messageList.scrollHeight;\n                    });\n                  }\n                }\n              }\n            }\n            break;\n\n          case 'new_reply':\n            if ('message' in message && message.message && 'parentId' in message) {\n              const transformedReply = transformMessage(message.message);\n              dispatch(setReplies({\n                channelId: transformedReply.channelId,\n                messageId: message.parentId,\n                replies: [transformedReply]\n              }));\n            }\n            break;\n\n          case 'message_deleted':\n            if ('channelId' in message && 'messageId' in message) {\n              dispatch(deleteMessage({\n                channelId: message.channelId,\n                messageId: message.messageId\n              }));\n            }\n            break;\n\n          // Handle other message types...\n          default:\n            console.warn('Unknown message type:', message.type);\n            break;\n        }\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n        dispatch(setError('Error processing message from server'));\n      }\n    };\n\n    // Add connection status handling\n    const handleConnectionError = (error: Error) => {\n      console.error('WebSocket connection error:', error);\n      dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n    };\n\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n      }\n    };\n\n    console.log('Setting up WebSocket handlers for channel:', activeChannelId);\n    const unsubscribeMessage = wsService.onMessage(handleWebSocketMessage);\n    const unsubscribeError = wsService.onError(handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n\n    return () => {\n      console.log('Cleaning up WebSocket handlers for channel:', activeChannelId);\n      clearInterval(statusInterval);\n      unsubscribeMessage();\n      unsubscribeError();\n    };\n  }, [activeChannelId, channels, dispatch, handleChannelSelect, messageListRef]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}