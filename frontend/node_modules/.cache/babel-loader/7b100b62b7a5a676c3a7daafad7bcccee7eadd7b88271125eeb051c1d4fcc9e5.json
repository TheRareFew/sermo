{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatMessage from '../../common/ChatMessage';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { fetchMessagesStart, fetchMessagesSuccess, fetchMessagesFailure } from '../../../store/messages/messagesSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  gap: 2px;\n  background: ${props => props.theme.colors.background};\n  border: 2px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c = MessageListContainer;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n_c2 = LoadingMessage;\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.error};\n  font-family: 'Courier New', monospace;\n  border: 1px solid ${props => props.theme.colors.error};\n  margin: 8px;\n`;\n_c3 = ErrorMessage;\nconst NoMessagesMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n  border: 1px dashed ${props => props.theme.colors.border};\n  margin: 16px;\n`;\n_c4 = NoMessagesMessage;\nconst MESSAGES_PER_PAGE = 30;\n\n// Transform API message to store message format\nconst transformMessage = msg => {\n  console.log('Transforming message:', msg);\n  if (!msg || !msg.id || !msg.content || !msg.channel_id || !msg.sender_id) {\n    console.error('Invalid message format:', msg);\n    throw new Error('Invalid message format');\n  }\n  const transformed = {\n    id: String(msg.id),\n    content: msg.content,\n    channelId: String(msg.channel_id),\n    userId: String(msg.sender_id),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at\n  };\n  console.log('Transformed message:', transformed);\n  return transformed;\n};\nconst MessageList = ({\n  channelId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [error, setError] = useState(null);\n  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);\n  const messages = useSelector(state => {\n    var _state$messages;\n    if (!channelId || !((_state$messages = state.messages) !== null && _state$messages !== void 0 && _state$messages.messagesByChannel)) {\n      var _state$messages2;\n      console.log('No messages to display - channelId or messagesByChannel is missing:', {\n        channelId,\n        hasMessagesByChannel: !!((_state$messages2 = state.messages) !== null && _state$messages2 !== void 0 && _state$messages2.messagesByChannel)\n      });\n      return [];\n    }\n    const channelMessages = state.messages.messagesByChannel[String(channelId)] || [];\n    console.log('Selected messages for channel', channelId, ':', {\n      channelId,\n      messageCount: channelMessages.length,\n      messages: channelMessages,\n      messagesByChannel: state.messages.messagesByChannel,\n      stateMessages: state.messages\n    });\n    return channelMessages;\n  });\n  const users = useSelector(state => {\n    var _state$chat;\n    const allUsers = ((_state$chat = state.chat) === null || _state$chat === void 0 ? void 0 : _state$chat.users) || {};\n    console.log('Selected users:', {\n      userCount: Object.keys(allUsers).length,\n      users: allUsers\n    });\n    return allUsers;\n  });\n  const isLoading = useSelector(state => {\n    var _state$messages3;\n    const loading = ((_state$messages3 = state.messages) === null || _state$messages3 === void 0 ? void 0 : _state$messages3.loading) || false;\n    console.log('Loading state:', loading);\n    return loading;\n  });\n\n  // Initial message load\n  useEffect(() => {\n    if (channelId) {\n      console.log('Loading messages for channel:', channelId);\n      dispatch(fetchMessagesStart());\n      setIsLoadingMore(true);\n      setHasMoreMessages(true);\n      setError(null);\n      setShouldScrollToBottom(true);\n      getChannelMessages(channelId, MESSAGES_PER_PAGE).then(newMessages => {\n        console.log('Received messages from API:', newMessages);\n        if (newMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        const transformedMessages = newMessages.map(transformMessage);\n        console.log('Transformed messages:', transformedMessages);\n        dispatch(fetchMessagesSuccess({\n          channelId: String(channelId),\n          messages: transformedMessages\n        }));\n      }).catch(error => {\n        console.error('Failed to fetch messages:', error);\n        setError('Failed to load messages. Please try again.');\n        dispatch(fetchMessagesFailure(error.message));\n      }).finally(() => {\n        setIsLoadingMore(false);\n      });\n    }\n  }, [channelId, dispatch]);\n\n  // Handle scroll to load more messages\n  const handleScroll = async e => {\n    const div = e.currentTarget;\n    const isNearTop = div.scrollTop <= 100;\n    const previousScrollHeight = div.scrollHeight;\n    if (isNearTop && !isLoadingMore && hasMoreMessages && channelId) {\n      setIsLoadingMore(true);\n      setError(null);\n      setShouldScrollToBottom(false);\n      try {\n        const olderMessages = await getChannelMessages(channelId, MESSAGES_PER_PAGE, messages.length);\n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n        if (olderMessages.length > 0) {\n          const transformedMessages = olderMessages.map(transformMessage);\n          const allMessages = [...transformedMessages, ...messages];\n          dispatch(fetchMessagesSuccess({\n            channelId: String(channelId),\n            messages: allMessages\n          }));\n\n          // Maintain scroll position after loading older messages\n          requestAnimationFrame(() => {\n            if (containerRef.current) {\n              const newScrollHeight = containerRef.current.scrollHeight;\n              containerRef.current.scrollTop = newScrollHeight - previousScrollHeight;\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n        setError('Failed to load more messages. Please try again.');\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0 && shouldScrollToBottom) {\n      const container = containerRef.current;\n      // Use requestAnimationFrame to ensure the scroll happens after the render\n      requestAnimationFrame(() => {\n        container.scrollTop = container.scrollHeight;\n      });\n    }\n  }, [messages, shouldScrollToBottom]);\n\n  // Reset scroll behavior when channel changes\n  useEffect(() => {\n    setShouldScrollToBottom(true);\n  }, [channelId]);\n  if (!channelId) {\n    return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n      children: /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n        children: \"Select a channel to view messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    onScroll: handleScroll,\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n      children: \"Loading older messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this), !hasMoreMessages && messages.length > 0 && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n      children: \"You've reached the beginning of this conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this), messages.length === 0 && !isLoading && !error && /*#__PURE__*/_jsxDEV(NoMessagesMessage, {\n      children: \"No messages yet. Start the conversation!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this), messages.map(msg => {\n      var _users$Number;\n      const sender = ((_users$Number = users[Number(msg.userId)]) === null || _users$Number === void 0 ? void 0 : _users$Number.username) || 'Unknown';\n      console.log('Rendering message:', {\n        messageId: msg.id,\n        content: msg.content,\n        userId: msg.userId,\n        sender,\n        timestamp: msg.createdAt,\n        hasUser: !!users[Number(msg.userId)]\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: `message-${msg.id}`,\n        style: {\n          margin: '4px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n          content: msg.content,\n          sender: sender,\n          timestamp: msg.createdAt,\n          isSystem: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"ggRwGSCKDfC4Ctsxt4jx6GMUc1Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c5 = MessageList;\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"LoadingMessage\");\n$RefreshReg$(_c3, \"ErrorMessage\");\n$RefreshReg$(_c4, \"NoMessagesMessage\");\n$RefreshReg$(_c5, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","useDispatch","useSelector","ChatMessage","getChannelMessages","fetchMessagesStart","fetchMessagesSuccess","fetchMessagesFailure","jsxDEV","_jsxDEV","MessageListContainer","div","props","theme","colors","background","border","_c","LoadingMessage","textSecondary","_c2","ErrorMessage","error","_c3","NoMessagesMessage","secondary","_c4","MESSAGES_PER_PAGE","transformMessage","msg","console","log","id","content","channel_id","sender_id","Error","transformed","String","channelId","userId","reactions","attachments","createdAt","created_at","updatedAt","MessageList","_s","dispatch","containerRef","isLoadingMore","setIsLoadingMore","hasMoreMessages","setHasMoreMessages","setError","shouldScrollToBottom","setShouldScrollToBottom","messages","state","_state$messages","messagesByChannel","_state$messages2","hasMessagesByChannel","channelMessages","messageCount","length","stateMessages","users","_state$chat","allUsers","chat","userCount","Object","keys","isLoading","_state$messages3","loading","then","newMessages","transformedMessages","map","catch","message","finally","handleScroll","e","currentTarget","isNearTop","scrollTop","previousScrollHeight","scrollHeight","olderMessages","allMessages","requestAnimationFrame","current","newScrollHeight","container","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onScroll","_users$Number","sender","Number","username","messageId","timestamp","hasUser","style","margin","isSystem","_c5","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatMessage from '../../common/ChatMessage';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { fetchMessagesStart, fetchMessagesSuccess, fetchMessagesFailure } from '../../../store/messages/messagesSlice';\nimport { Message as ApiMessage } from '../../../types';\nimport { StoreMessage } from '../../../store/types';\nimport { RootState } from '../../../store/rootReducer';\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  gap: 2px;\n  background: ${props => props.theme.colors.background};\n  border: 2px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textSecondary};\n  font-family: 'Courier New', monospace;\n  font-style: italic;\n`;\n\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.error};\n  font-family: 'Courier New', monospace;\n  border: 1px solid ${props => props.theme.colors.error};\n  margin: 8px;\n`;\n\nconst NoMessagesMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${props => props.theme.colors.secondary};\n  font-family: 'Courier New', monospace;\n  border: 1px dashed ${props => props.theme.colors.border};\n  margin: 16px;\n`;\n\ninterface MessageListProps {\n  channelId: number | null;\n}\n\nconst MESSAGES_PER_PAGE = 30;\n\n// Transform API message to store message format\nconst transformMessage = (msg: ApiMessage): StoreMessage => {\n  console.log('Transforming message:', msg);\n  if (!msg || !msg.id || !msg.content || !msg.channel_id || !msg.sender_id) {\n    console.error('Invalid message format:', msg);\n    throw new Error('Invalid message format');\n  }\n\n  const transformed: StoreMessage = {\n    id: String(msg.id),\n    content: msg.content,\n    channelId: String(msg.channel_id),\n    userId: String(msg.sender_id),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at\n  };\n\n  console.log('Transformed message:', transformed);\n  return transformed;\n};\n\nconst MessageList: React.FC<MessageListProps> = ({ channelId }) => {\n  const dispatch = useDispatch();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);\n\n  const messages = useSelector((state: RootState) => {\n    if (!channelId || !state.messages?.messagesByChannel) {\n      console.log('No messages to display - channelId or messagesByChannel is missing:', {\n        channelId,\n        hasMessagesByChannel: !!state.messages?.messagesByChannel\n      });\n      return [];\n    }\n    const channelMessages = state.messages.messagesByChannel[String(channelId)] || [];\n    console.log('Selected messages for channel', channelId, ':', {\n      channelId,\n      messageCount: channelMessages.length,\n      messages: channelMessages,\n      messagesByChannel: state.messages.messagesByChannel,\n      stateMessages: state.messages\n    });\n    return channelMessages;\n  });\n\n  const users = useSelector((state: RootState) => {\n    const allUsers = state.chat?.users || {};\n    console.log('Selected users:', {\n      userCount: Object.keys(allUsers).length,\n      users: allUsers\n    });\n    return allUsers;\n  });\n\n  const isLoading = useSelector((state: RootState) => {\n    const loading = state.messages?.loading || false;\n    console.log('Loading state:', loading);\n    return loading;\n  });\n\n  // Initial message load\n  useEffect(() => {\n    if (channelId) {\n      console.log('Loading messages for channel:', channelId);\n      dispatch(fetchMessagesStart());\n      setIsLoadingMore(true);\n      setHasMoreMessages(true);\n      setError(null);\n      setShouldScrollToBottom(true);\n      \n      getChannelMessages(channelId, MESSAGES_PER_PAGE)\n        .then(newMessages => {\n          console.log('Received messages from API:', newMessages);\n          if (newMessages.length < MESSAGES_PER_PAGE) {\n            setHasMoreMessages(false);\n          }\n          const transformedMessages: StoreMessage[] = newMessages.map(transformMessage);\n          console.log('Transformed messages:', transformedMessages);\n          dispatch(fetchMessagesSuccess({ \n            channelId: String(channelId), \n            messages: transformedMessages \n          }));\n        })\n        .catch(error => {\n          console.error('Failed to fetch messages:', error);\n          setError('Failed to load messages. Please try again.');\n          dispatch(fetchMessagesFailure(error.message));\n        })\n        .finally(() => {\n          setIsLoadingMore(false);\n        });\n    }\n  }, [channelId, dispatch]);\n\n  // Handle scroll to load more messages\n  const handleScroll = async (e: React.UIEvent<HTMLDivElement>) => {\n    const div = e.currentTarget;\n    const isNearTop = div.scrollTop <= 100;\n    const previousScrollHeight = div.scrollHeight;\n    \n    if (isNearTop && !isLoadingMore && hasMoreMessages && channelId) {\n      setIsLoadingMore(true);\n      setError(null);\n      setShouldScrollToBottom(false);\n      \n      try {\n        const olderMessages = await getChannelMessages(\n          channelId, \n          MESSAGES_PER_PAGE,\n          messages.length\n        );\n        \n        if (olderMessages.length < MESSAGES_PER_PAGE) {\n          setHasMoreMessages(false);\n        }\n\n        if (olderMessages.length > 0) {\n          const transformedMessages: StoreMessage[] = olderMessages.map(transformMessage);\n          const allMessages: StoreMessage[] = [...transformedMessages, ...messages];\n          dispatch(fetchMessagesSuccess({ \n            channelId: String(channelId), \n            messages: allMessages\n          }));\n          \n          // Maintain scroll position after loading older messages\n          requestAnimationFrame(() => {\n            if (containerRef.current) {\n              const newScrollHeight = containerRef.current.scrollHeight;\n              containerRef.current.scrollTop = newScrollHeight - previousScrollHeight;\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Failed to fetch older messages:', error);\n        setError('Failed to load more messages. Please try again.');\n      } finally {\n        setIsLoadingMore(false);\n      }\n    }\n  };\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0 && shouldScrollToBottom) {\n      const container = containerRef.current;\n      // Use requestAnimationFrame to ensure the scroll happens after the render\n      requestAnimationFrame(() => {\n        container.scrollTop = container.scrollHeight;\n      });\n    }\n  }, [messages, shouldScrollToBottom]);\n\n  // Reset scroll behavior when channel changes\n  useEffect(() => {\n    setShouldScrollToBottom(true);\n  }, [channelId]);\n\n  if (!channelId) {\n    return (\n      <MessageListContainer>\n        <NoMessagesMessage>\n          Select a channel to view messages\n        </NoMessagesMessage>\n      </MessageListContainer>\n    );\n  }\n\n  return (\n    <MessageListContainer\n      ref={containerRef}\n      onScroll={handleScroll}\n    >\n      {error && (\n        <ErrorMessage>\n          {error}\n        </ErrorMessage>\n      )}\n      \n      {isLoadingMore && (\n        <LoadingMessage>Loading older messages...</LoadingMessage>\n      )}\n      \n      {!hasMoreMessages && messages.length > 0 && (\n        <LoadingMessage>\n          You've reached the beginning of this conversation\n        </LoadingMessage>\n      )}\n\n      {messages.length === 0 && !isLoading && !error && (\n        <NoMessagesMessage>\n          No messages yet. Start the conversation!\n        </NoMessagesMessage>\n      )}\n\n      {messages.map((msg: StoreMessage) => {\n        const sender = users[Number(msg.userId)]?.username || 'Unknown';\n        console.log('Rendering message:', {\n          messageId: msg.id,\n          content: msg.content,\n          userId: msg.userId,\n          sender,\n          timestamp: msg.createdAt,\n          hasUser: !!users[Number(msg.userId)]\n        });\n        return (\n          <div key={msg.id} id={`message-${msg.id}`} style={{ margin: '4px 0' }}>\n            <ChatMessage\n              content={msg.content}\n              sender={sender}\n              timestamp={msg.createdAt}\n              isSystem={false}\n            />\n          </div>\n        );\n      })}\n    </MessageListContainer>\n  );\n};\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}