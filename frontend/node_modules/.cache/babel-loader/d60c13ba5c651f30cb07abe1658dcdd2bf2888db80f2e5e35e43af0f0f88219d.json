{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n_c4 = MessageWrapper;\nconst transformMessage = msg => ({\n  id: msg.id.toString(),\n  content: msg.content,\n  channelId: msg.channel_id.toString(),\n  userId: msg.sender_id.toString(),\n  reactions: [],\n  attachments: [],\n  createdAt: msg.created_at,\n  updatedAt: msg.created_at,\n  replyCount: msg.reply_count || 0,\n  isExpanded: false,\n  ...(msg.parent_id ? {\n    parentId: msg.parent_id.toString()\n  } : {})\n});\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  _s();\n  const {\n    messages,\n    selectedMessageId\n  } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef(null);\n  const containerRef = useRef(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef(null);\n  const {\n    currentUser,\n    users,\n    activeChannelId\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users,\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n      const messagesWithReplies = messages.filter(msg => msg.replyCount > 0);\n      for (const message of messagesWithReplies) {\n        try {\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          dispatch(setReplies({\n            channelId: activeChannelId,\n            messageId: message.id,\n            replies: transformedReplies\n          }));\n          // Ensure thread is expanded if it was previously\n          if (message.isExpanded) {\n            dispatch(toggleExpanded({\n              channelId: activeChannelId,\n              messageId: message.id\n            }));\n          }\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n        }\n      }\n    };\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n      if (olderMessages.length > 0) {\n        // Transform and prepend messages\n        dispatch(prependMessages({\n          channelId: activeChannelId,\n          messages: olderMessages.map(msg => ({\n            id: msg.id.toString(),\n            content: msg.content,\n            channelId: msg.channel_id.toString(),\n            userId: msg.sender_id.toString(),\n            reactions: [],\n            attachments: [],\n            createdAt: msg.created_at,\n            updatedAt: msg.created_at,\n            replyCount: msg.reply_count || 0,\n            isExpanded: false,\n            ...(msg.parent_id ? {\n              parentId: msg.parent_id.toString()\n            } : {})\n          }))\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const {\n        position,\n        height\n      } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n\n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n\n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback(event => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n  const handleDeleteMessage = async messageId => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({\n          channelId: activeChannelId,\n          messageId\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n  const handleToggleReplies = messageId => {\n    if (activeChannelId) {\n      dispatch(toggleExpanded({\n        channelId: activeChannelId,\n        messageId\n      }));\n    }\n  };\n  const handleReply = messageId => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n  const handleSendReply = async content => {\n    if (!replyToMessage || !activeChannelId) return;\n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n\n      // Update the parent message's reply count and expand state\n      const updatedParentMessage = {\n        ...replyToMessage,\n        replyCount: (replyToMessage.replyCount || 0) + 1,\n        isExpanded: true // Ensure the thread is expanded\n      };\n\n      // Update the parent message\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => msg.id === replyToMessage.id ? updatedParentMessage : msg)\n      }));\n\n      // Fetch all replies to ensure we have the complete thread\n      const replies = await getReplies(replyToMessage.id);\n      const transformedReplies = replies.map(transformMessage);\n      dispatch(setReplies({\n        channelId: activeChannelId,\n        messageId: replyToMessage.id,\n        replies: transformedReplies\n      }));\n\n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MessageListContainer, {\n      ref: containerRef,\n      onScroll: handleScroll,\n      children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading older messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n        children: messages.map(message => {\n          var _users$message$userId;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(MessageWrapper, {\n              $isSelected: message.id === selectedMessageId,\n              ref: message.id === selectedMessageId ? selectedMessageRef : undefined,\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                content: message.content,\n                sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n                timestamp: message.createdAt,\n                userId: message.userId,\n                currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n                onDelete: () => handleDeleteMessage(message.id),\n                replyCount: message.replyCount,\n                isExpanded: message.isExpanded || false,\n                onToggleReplies: () => handleToggleReplies(message.id),\n                onReply: () => handleReply(message.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), message.isExpanded && message.replyCount > 0 && /*#__PURE__*/_jsxDEV(MessageReplies, {\n              parentId: message.id,\n              replies: messages.filter(msg => msg.parentId === message.id),\n              isExpanded: message.isExpanded,\n              onToggleReplies: handleToggleReplies,\n              onDelete: handleDeleteMessage,\n              currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this)]\n          }, message.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), replyToMessage && /*#__PURE__*/_jsxDEV(ReplyModal, {\n      isOpen: true,\n      onClose: () => setReplyToMessage(null),\n      onSubmit: handleSendReply,\n      parentMessage: replyToMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"sJTHygj4slslmC0b/lLh3+oXyCQ=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"sJTHygj4slslmC0b/lLh3+oXyCQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","styled","useSelector","useDispatch","Message","MessageReplies","ReplyModal","deleteMessage","toggleExpanded","prependMessages","setMessages","setReplies","deleteMessageApi","getChannelMessages","createReply","getReplies","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","transformMessage","msg","id","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","MessageList","_s","_c5","ref","messages","selectedMessageId","dispatch","selectedMessageRef","containerRef","isLoadingMore","setIsLoadingMore","hasMore","setHasMore","page","setPage","replyToMessage","setReplyToMessage","PAGE_SIZE","scrollLockRef","currentUser","users","activeChannelId","state","auth","user","chat","current","loadRepliesForMessages","messagesWithReplies","filter","message","replies","transformedReplies","map","messageId","error","console","loadMoreMessages","log","container","position","scrollTop","height","scrollHeight","olderMessages","length","p","newPosition","handleScroll","event","currentTarget","scrollIntoView","behavior","block","handleDeleteMessage","handleToggleReplies","handleReply","find","m","handleSendReply","reply","transformedReply","updatedParentMessage","success","children","onScroll","fileName","_jsxFileName","lineNumber","columnNumber","_users$message$userId","undefined","sender","username","timestamp","currentUserId","onDelete","onToggleReplies","onReply","isOpen","onClose","onSubmit","parentMessage","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User, Message as ApiMessage } from '../../../types';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport ReplyModal from '../ReplyModal';\nimport { deleteMessage, toggleExpanded, prependMessages, addMessage, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport { deleteMessage as deleteMessageApi, getChannelMessages, createReply, getReplies } from '../../../services/api/chat';\nimport { toast } from 'react-toastify';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: background-color 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n`;\n\nconst transformMessage = (msg: ApiMessage): StoreMessage => ({\n  id: msg.id.toString(),\n  content: msg.content,\n  channelId: msg.channel_id.toString(),\n  userId: msg.sender_id.toString(),\n  reactions: [],\n  attachments: [],\n  createdAt: msg.created_at,\n  updatedAt: msg.created_at,\n  replyCount: msg.reply_count || 0,\n  isExpanded: false,\n  ...(msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n});\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId } = props;\n  const dispatch = useDispatch();\n  const selectedMessageRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(0);\n  const [replyToMessage, setReplyToMessage] = useState<StoreMessage | null>(null);\n  const PAGE_SIZE = 50;\n  const scrollLockRef = useRef<{ position: number; height: number } | null>(null);\n\n  const { currentUser, users, activeChannelId } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User },\n    activeChannelId: state.chat.activeChannelId\n  }));\n\n  // Reset pagination when channel changes\n  useEffect(() => {\n    setPage(0);\n    setHasMore(true);\n    scrollLockRef.current = null;\n  }, [activeChannelId]);\n\n  // Load replies for messages with replyCount > 0 when channel changes\n  useEffect(() => {\n    const loadRepliesForMessages = async () => {\n      if (!activeChannelId) return;\n      \n      const messagesWithReplies = messages.filter(msg => msg.replyCount > 0);\n      for (const message of messagesWithReplies) {\n        try {\n          const replies = await getReplies(message.id);\n          const transformedReplies = replies.map(transformMessage);\n          dispatch(setReplies({\n            channelId: activeChannelId,\n            messageId: message.id,\n            replies: transformedReplies\n          }));\n          // Ensure thread is expanded if it was previously\n          if (message.isExpanded) {\n            dispatch(toggleExpanded({ channelId: activeChannelId, messageId: message.id }));\n          }\n        } catch (error) {\n          console.error(`Error loading replies for message ${message.id}:`, error);\n        }\n      }\n    };\n\n    loadRepliesForMessages();\n  }, [activeChannelId, messages, dispatch]);\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!activeChannelId || isLoadingMore || !hasMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      console.log('[DEBUG] Loading more messages, page:', page + 1);\n\n      // Store the current scroll height and position\n      const container = containerRef.current;\n      if (container) {\n        scrollLockRef.current = {\n          position: container.scrollTop,\n          height: container.scrollHeight\n        };\n      }\n\n      // Load more messages\n      const olderMessages = await getChannelMessages(activeChannelId, PAGE_SIZE, (page + 1) * PAGE_SIZE);\n      \n      if (olderMessages.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n\n      if (olderMessages.length > 0) {\n        // Transform and prepend messages\n        dispatch(prependMessages({ \n          channelId: activeChannelId, \n          messages: olderMessages.map(msg => ({\n            id: msg.id.toString(),\n            content: msg.content,\n            channelId: msg.channel_id.toString(),\n            userId: msg.sender_id.toString(),\n            reactions: [],\n            attachments: [],\n            createdAt: msg.created_at,\n            updatedAt: msg.created_at,\n            replyCount: msg.reply_count || 0,\n            isExpanded: false,\n            ...(msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n          }))\n        }));\n        setPage(p => p + 1);\n      }\n    } catch (error) {\n      console.error('Error loading more messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [activeChannelId, isLoadingMore, hasMore, page, dispatch]);\n\n  // Maintain scroll position after messages are loaded\n  useEffect(() => {\n    if (scrollLockRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const { position, height } = scrollLockRef.current;\n      const newPosition = position + (container.scrollHeight - height);\n      \n      // Immediately set the scroll position\n      container.scrollTop = newPosition;\n      \n      // Clear the scroll lock\n      scrollLockRef.current = null;\n    } else if (page === 0 && containerRef.current) {\n      // Only auto-scroll to bottom on initial load or new messages when we're at page 0\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages, page]);\n\n  // Handle scroll for infinite loading with debounce\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const container = event.currentTarget;\n    if (container.scrollTop <= 100 && !isLoadingMore) {\n      loadMoreMessages();\n    }\n  }, [loadMoreMessages, isLoadingMore]);\n\n  useEffect(() => {\n    // Scroll to selected message\n    if (selectedMessageId && selectedMessageRef.current) {\n      selectedMessageRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [selectedMessageId]);\n\n  const handleDeleteMessage = async (messageId: string) => {\n    try {\n      await deleteMessageApi(messageId);\n      if (activeChannelId) {\n        dispatch(deleteMessage({ channelId: activeChannelId, messageId }));\n      }\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    }\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    if (activeChannelId) {\n      dispatch(toggleExpanded({ channelId: activeChannelId, messageId }));\n    }\n  };\n\n  const handleReply = (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      setReplyToMessage(message);\n    }\n  };\n\n  const handleSendReply = async (content: string) => {\n    if (!replyToMessage || !activeChannelId) return;\n    \n    try {\n      const reply = await createReply(replyToMessage.id, content);\n      const transformedReply = transformMessage(reply);\n      \n      // Update the parent message's reply count and expand state\n      const updatedParentMessage = {\n        ...replyToMessage,\n        replyCount: (replyToMessage.replyCount || 0) + 1,\n        isExpanded: true // Ensure the thread is expanded\n      };\n      \n      // Update the parent message\n      dispatch(setMessages({\n        channelId: activeChannelId,\n        messages: messages.map(msg => \n          msg.id === replyToMessage.id ? updatedParentMessage : msg\n        )\n      }));\n\n      // Fetch all replies to ensure we have the complete thread\n      const replies = await getReplies(replyToMessage.id);\n      const transformedReplies = replies.map(transformMessage);\n      dispatch(setReplies({ \n        channelId: activeChannelId, \n        messageId: replyToMessage.id, \n        replies: transformedReplies \n      }));\n      \n      // Auto-scroll to bottom\n      if (containerRef.current) {\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\n      }\n\n      setReplyToMessage(null);\n      toast.success('Reply sent successfully');\n    } catch (error) {\n      console.error('Error sending reply:', error);\n      toast.error('Failed to send reply. Please try again.');\n    }\n  };\n\n  return (\n    <>\n      <MessageListContainer ref={containerRef} onScroll={handleScroll}>\n        {isLoadingMore && (\n          <LoadingIndicator>Loading older messages...</LoadingIndicator>\n        )}\n        <MessagesWrapper>\n          {messages.map(message => (\n            <React.Fragment key={message.id}>\n              <MessageWrapper\n                $isSelected={message.id === selectedMessageId}\n                ref={message.id === selectedMessageId ? selectedMessageRef : undefined}\n              >\n                <Message\n                  content={message.content}\n                  sender={users[message.userId]?.username || message.userId}\n                  timestamp={message.createdAt}\n                  userId={message.userId}\n                  currentUserId={currentUser?.id}\n                  onDelete={() => handleDeleteMessage(message.id)}\n                  replyCount={message.replyCount}\n                  isExpanded={message.isExpanded || false}\n                  onToggleReplies={() => handleToggleReplies(message.id)}\n                  onReply={() => handleReply(message.id)}\n                />\n              </MessageWrapper>\n              {message.isExpanded && message.replyCount > 0 && (\n                <MessageReplies \n                  parentId={message.id}\n                  replies={messages.filter(msg => msg.parentId === message.id)}\n                  isExpanded={message.isExpanded}\n                  onToggleReplies={handleToggleReplies}\n                  onDelete={handleDeleteMessage}\n                  currentUserId={currentUser?.id}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </MessagesWrapper>\n      </MessageListContainer>\n      \n      {replyToMessage && (\n        <ReplyModal\n          isOpen={true}\n          onClose={() => setReplyToMessage(null)}\n          onSubmit={handleSendReply}\n          parentMessage={replyToMessage}\n        />\n      )}\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}