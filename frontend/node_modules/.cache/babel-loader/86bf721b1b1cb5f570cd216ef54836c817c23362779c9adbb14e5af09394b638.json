{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { store } from '../../../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? {\n        parentId: msg.parent_id.toString()\n      } : {})\n    }));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback(msg => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? {\n      parentId: msg.parent_id.toString()\n    } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    console.log('[DEBUG] WebSocket effect triggered:', {\n      activeChannelId,\n      isConnecting,\n      wsState: wsService.getChatSocketState()\n    });\n    let isMounted = true;\n    let connectionTimeout;\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) {\n        console.log('[DEBUG] No active channel ID or already connecting');\n        return;\n      }\n      try {\n        setIsConnecting(true);\n        isChannelSwitching.current = true;\n\n        // Fetch initial messages for the channel\n        const messages = await getChannelMessages(activeChannelId);\n        if (!isMounted) return;\n\n        // Transform and set messages\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({\n          channelId: activeChannelId,\n          messages: transformedMessages\n        }));\n\n        // Connect to WebSocket for the channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Set up connection timeout\n        connectionTimeout = setTimeout(() => {\n          if (isMounted && wsService.getChatSocketState() !== WebSocket.OPEN) {\n            console.error('WebSocket connection timeout');\n            wsService.disconnect();\n            connectToChannel();\n          }\n        }, 10000);\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n          isChannelSwitching.current = false;\n        }\n      }\n    };\n    connectToChannel();\n    return () => {\n      isMounted = false;\n      if (connectionTimeout) {\n        clearTimeout(connectionTimeout);\n      }\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n\n      // Get current messages from the store\n      const currentMessages = store.getState().messages.messagesByChannel[activeChannelId || ''] || [];\n\n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply' || message.type === 'message_sent') {\n        // Type guard to ensure we have a channel message with parentId\n        const isReplyMessage = msg => {\n          return msg.type === 'new_reply' && 'parentId' in msg && typeof msg.parentId === 'string';\n        };\n        const isChannelMessage = msg => {\n          return (msg.type === 'message' || msg.type === 'new_reply' || msg.type === 'message_sent') && 'message' in msg;\n        };\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n\n          // Handle replies differently\n          if (isReplyMessage(message)) {\n            storeMessage.parentId = message.parentId;\n\n            // Update the parent message's reply count and get all replies\n            const parentMessage = currentMessages.find(m => m.id === message.parentId);\n            if (parentMessage) {\n              const updatedParentMessage = {\n                ...parentMessage,\n                replyCount: (parentMessage.replyCount || 0) + 1,\n                isExpanded: true\n              };\n\n              // Update parent message\n              dispatch(setMessages({\n                channelId: storeMessage.channelId,\n                messages: currentMessages.map(msg => msg.id === parentMessage.id ? updatedParentMessage : msg)\n              }));\n\n              // Fetch and update all replies\n              getReplies(parentMessage.id).then(replies => {\n                const transformedReplies = replies.map(transformToStoreMessage);\n                dispatch(setReplies({\n                  channelId: storeMessage.channelId,\n                  messageId: parentMessage.id,\n                  replies: transformedReplies\n                }));\n              }).catch(error => {\n                console.error('Error fetching replies:', error);\n              });\n            }\n          } else {\n            // Only add non-reply messages to the main message list\n            dispatch(addMessage(storeMessage));\n          }\n\n          // If this is a new message and we're at the bottom, scroll to it\n          if (messageListRef.current && !isChannelSwitching.current) {\n            const {\n              scrollTop,\n              scrollHeight,\n              clientHeight\n            } = messageListRef.current;\n            const isAtBottom = scrollTop + clientHeight >= scrollHeight - 50;\n            if (isAtBottom) {\n              setTimeout(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              }, 100);\n            }\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, activeChannelId, isChannelSwitching, messageListRef]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async channelId => {\n    console.log('[DEBUG] Channel click:', channelId);\n    if (channelId === activeChannelId) {\n      console.log('[DEBUG] Already in channel:', channelId);\n      return;\n    }\n    if (isChannelSwitching.current) {\n      console.log('[DEBUG] Channel switch in progress, ignoring');\n      return;\n    }\n    const previousChannelId = activeChannelId;\n    isChannelSwitching.current = true;\n    try {\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      // Reset connecting state before channel switch\n      setIsConnecting(false);\n      console.log('[DEBUG] Switching to channel:', channelId);\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({\n        channelId,\n        messages: []\n      }));\n    } catch (error) {\n      console.error('[DEBUG] Error in channel switch:', error);\n      if (previousChannelId) {\n        dispatch(setActiveChannel(previousChannelId));\n      }\n    } finally {\n      isChannelSwitching.current = false;\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        // Clear current messages and show loading state\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n\n        // Start channel switch in background\n        handleChannelClick(channelId).catch(error => {\n          console.error('Error switching channel:', error);\n        });\n      }\n\n      // Set the selected message ID immediately\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to message using requestAnimationFrame for better performance\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          // If element not found yet, try again in next frame\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector(state => {\n    console.log('[DEBUG] MainLayout - Current Redux state:', state);\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    console.log('[DEBUG] MainLayout - Selected messages for channel:', activeChannelId, channelMessages);\n    return channelMessages;\n  });\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: messages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      onClose: () => setIsSettingsOpen(false),\n      channel: activeChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 514,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"L3FhQfaKUYJGgBKGO4wWvVbAMQ0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","addMessage","setMessages","setReplies","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","getReplies","searchAll","ChannelSettings","store","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","transformMessagesInChunks","messages","map","msg","toString","content","channelId","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","replyCount","reply_count","isExpanded","parent_id","parentId","transformToStoreMessage","fetchInitialData","fetchedChannels","length","channelUsers","console","disconnect","log","wsState","getChatSocketState","isMounted","connectionTimeout","connectToChannel","current","transformedMessages","connect","setTimeout","WebSocket","OPEN","clearTimeout","handleWebSocketMessage","message","currentMessages","getState","messagesByChannel","type","isReplyMessage","isChannelMessage","storeMessage","parentMessage","m","updatedParentMessage","then","replies","transformedReplies","messageId","catch","scrollTop","scrollHeight","clientHeight","isAtBottom","unsubscribe","onMessage","handleSearch","query","trim","undefined","results","handleChannelClick","previousChannelId","c","handleSelectMessage","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","requestAnimationFrame","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","channelMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","user","username","status","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus\n} from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult, Message } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    // Transform all messages at once but with minimal processing\n    return messages.map(msg => ({\n      id: msg.id.toString(),\n      content: msg.content,\n      channelId: msg.channel_id.toString(),\n      userId: msg.sender_id.toString(),\n      reactions: [],\n      attachments: [],\n      createdAt: msg.created_at,\n      updatedAt: msg.created_at,\n      replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n      isExpanded: false,\n      ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n    } as StoreMessage));\n  }, []);\n\n  // Transform single messages (for WebSocket events)\n  const transformToStoreMessage = useCallback((msg: Message | WebSocketChannelMessage['message']): StoreMessage => ({\n    id: msg.id.toString(),\n    content: msg.content,\n    channelId: msg.channel_id.toString(),\n    userId: msg.sender_id.toString(),\n    reactions: [],\n    attachments: [],\n    createdAt: msg.created_at,\n    updatedAt: msg.created_at,\n    replyCount: 'reply_count' in msg ? msg.reply_count || 0 : 0,\n    isExpanded: false,\n    ...('parent_id' in msg && msg.parent_id ? { parentId: msg.parent_id.toString() } : {})\n  }), []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    \n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    console.log('[DEBUG] WebSocket effect triggered:', {\n      activeChannelId,\n      isConnecting,\n      wsState: wsService.getChatSocketState()\n    });\n\n    let isMounted = true;\n    let connectionTimeout: NodeJS.Timeout;\n\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) {\n        console.log('[DEBUG] No active channel ID or already connecting');\n        return;\n      }\n\n      try {\n        setIsConnecting(true);\n        isChannelSwitching.current = true;\n\n        // Fetch initial messages for the channel\n        const messages = await getChannelMessages(activeChannelId);\n        if (!isMounted) return;\n\n        // Transform and set messages\n        const transformedMessages = transformMessagesInChunks(messages);\n        dispatch(setMessages({ channelId: activeChannelId, messages: transformedMessages }));\n\n        // Connect to WebSocket for the channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Set up connection timeout\n        connectionTimeout = setTimeout(() => {\n          if (isMounted && wsService.getChatSocketState() !== WebSocket.OPEN) {\n            console.error('WebSocket connection timeout');\n            wsService.disconnect();\n            connectToChannel();\n          }\n        }, 10000);\n\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n          isChannelSwitching.current = false;\n        }\n      }\n    };\n\n    connectToChannel();\n\n    return () => {\n      isMounted = false;\n      if (connectionTimeout) {\n        clearTimeout(connectionTimeout);\n      }\n    };\n  }, [activeChannelId, dispatch, transformMessagesInChunks]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      // Get current messages from the store\n      const currentMessages = store.getState().messages.messagesByChannel[activeChannelId || ''] || [];\n      \n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply' || message.type === 'message_sent') {\n        // Type guard to ensure we have a channel message with parentId\n        const isReplyMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage & { parentId: string } => {\n          return msg.type === 'new_reply' && 'parentId' in msg && typeof msg.parentId === 'string';\n        };\n\n        const isChannelMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage => {\n          return (msg.type === 'message' || msg.type === 'new_reply' || msg.type === 'message_sent') && 'message' in msg;\n        };\n\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n\n        try {\n          const storeMessage = transformToStoreMessage(message.message);\n          \n          // Handle replies differently\n          if (isReplyMessage(message)) {\n            storeMessage.parentId = message.parentId;\n            \n            // Update the parent message's reply count and get all replies\n            const parentMessage = currentMessages.find((m: Message) => m.id === message.parentId);\n            \n            if (parentMessage) {\n              const updatedParentMessage = {\n                ...parentMessage,\n                replyCount: (parentMessage.replyCount || 0) + 1,\n                isExpanded: true\n              };\n              \n              // Update parent message\n              dispatch(setMessages({\n                channelId: storeMessage.channelId,\n                messages: currentMessages.map(msg => \n                  msg.id === parentMessage.id ? updatedParentMessage : msg\n                )\n              }));\n\n              // Fetch and update all replies\n              getReplies(parentMessage.id)\n                .then((replies: Message[]) => {\n                  const transformedReplies = replies.map(transformToStoreMessage);\n                  dispatch(setReplies({\n                    channelId: storeMessage.channelId,\n                    messageId: parentMessage.id,\n                    replies: transformedReplies\n                  }));\n                })\n                .catch((error: Error) => {\n                  console.error('Error fetching replies:', error);\n                });\n            }\n          } else {\n            // Only add non-reply messages to the main message list\n            dispatch(addMessage(storeMessage));\n          }\n\n          // If this is a new message and we're at the bottom, scroll to it\n          if (messageListRef.current && !isChannelSwitching.current) {\n            const { scrollTop, scrollHeight, clientHeight } = messageListRef.current;\n            const isAtBottom = scrollTop + clientHeight >= scrollHeight - 50;\n            if (isAtBottom) {\n              setTimeout(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              }, 100);\n            }\n          }\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch, activeChannelId, isChannelSwitching, messageListRef]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle channel selection\n  const handleChannelClick = async (channelId: string) => {\n    console.log('[DEBUG] Channel click:', channelId);\n    \n    if (channelId === activeChannelId) {\n      console.log('[DEBUG] Already in channel:', channelId);\n      return;\n    }\n    \n    if (isChannelSwitching.current) {\n      console.log('[DEBUG] Channel switch in progress, ignoring');\n      return;\n    }\n\n    const previousChannelId = activeChannelId;\n    isChannelSwitching.current = true;\n    \n    try {\n      const channel = channels.find(c => c.id === channelId);\n      if (!channel) {\n        console.error('Channel not found:', channelId);\n        return;\n      }\n\n      // Reset connecting state before channel switch\n      setIsConnecting(false);\n      \n      console.log('[DEBUG] Switching to channel:', channelId);\n      dispatch(setActiveChannel(channelId));\n      dispatch(setMessages({ channelId, messages: [] }));\n    } catch (error) {\n      console.error('[DEBUG] Error in channel switch:', error);\n      if (previousChannelId) {\n        dispatch(setActiveChannel(previousChannelId));\n      }\n    } finally {\n      isChannelSwitching.current = false;\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        // Clear current messages and show loading state\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n        \n        // Start channel switch in background\n        handleChannelClick(channelId).catch(error => {\n          console.error('Error switching channel:', error);\n        });\n      }\n\n      // Set the selected message ID immediately\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      // Scroll to message using requestAnimationFrame for better performance\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          // If element not found yet, try again in next frame\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  // Get messages for the active channel\n  const messages = useSelector((state: RootState) => {\n    console.log('[DEBUG] MainLayout - Current Redux state:', state);\n    const channelMessages = state.messages.messagesByChannel[activeChannelId || ''] || [];\n    console.log('[DEBUG] MainLayout - Selected messages for channel:', activeChannelId, channelMessages);\n    return channelMessages;\n  });\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={messages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput channelId={activeChannelId || ''} />\n        </ChatInput>\n      </ChatArea>\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          onClose={() => setIsSettingsOpen(false)}\n          channel={activeChannel}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}