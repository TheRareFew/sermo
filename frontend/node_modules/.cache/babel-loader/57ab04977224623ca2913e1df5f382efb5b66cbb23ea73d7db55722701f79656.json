{"ast":null,"code":"import { apiRequest, API_URL } from './utils';\nconst formatErrorMessage = error => {\n  if (typeof error.detail === 'string') {\n    return error.detail;\n  }\n  if (Array.isArray(error.detail)) {\n    return error.detail.map(err => err.msg).join(', ');\n  }\n  if (!error.detail && !error.message) {\n    return 'Please enter both username and password';\n  }\n  return error.message || 'An error occurred';\n};\nconst transformAuthResponse = apiResponse => ({\n  user: {\n    ...apiResponse.user,\n    status: 'online',\n    last_seen: new Date().toISOString()\n  },\n  token: apiResponse.token,\n  refresh_token: apiResponse.refresh_token\n});\nexport const login = async credentials => {\n  // Convert credentials to FormData as expected by the backend\n  const formData = new URLSearchParams();\n  formData.append('username', credentials.username);\n  formData.append('password', credentials.password);\n  const response = await fetch(`${API_URL}/api/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formData.toString(),\n    credentials: 'include'\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(formatErrorMessage(data));\n  }\n\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', data.token);\n  return transformAuthResponse(data);\n};\nexport const signup = async credentials => {\n  const response = await fetch(`${API_URL}/api/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials),\n    credentials: 'include'\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(formatErrorMessage(data));\n  }\n\n  // Store the token in localStorage\n  localStorage.setItem('auth_token', data.token);\n  return transformAuthResponse(data);\n};\nexport const forgotPassword = async email => {\n  await apiRequest('/api/auth/forgot-password', {\n    method: 'POST',\n    body: JSON.stringify({\n      email\n    }),\n    requiresAuth: false\n  });\n};\nexport const logout = async () => {\n  await apiRequest('/api/auth/logout', {\n    method: 'POST'\n  });\n  localStorage.removeItem('auth_token');\n};\n\n// Helper function to get the auth token\nexport const getAuthToken = () => {\n  return localStorage.getItem('auth_token');\n};\n\n// Helper function to check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!getAuthToken();\n};","map":{"version":3,"names":["apiRequest","API_URL","formatErrorMessage","error","detail","Array","isArray","map","err","msg","join","message","transformAuthResponse","apiResponse","user","status","last_seen","Date","toISOString","token","refresh_token","login","credentials","formData","URLSearchParams","append","username","password","response","fetch","method","headers","body","toString","data","json","ok","Error","localStorage","setItem","signup","JSON","stringify","forgotPassword","email","requiresAuth","logout","removeItem","getAuthToken","getItem","isAuthenticated"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/auth.ts"],"sourcesContent":["import { User, AuthResponse } from '../../types';\r\nimport { apiRequest, API_URL } from './utils';\r\n\r\ninterface LoginCredentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupCredentials {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  full_name: string;\r\n}\r\n\r\ninterface ApiError {\r\n  detail?: string | { msg: string }[];\r\n  message?: string;\r\n}\r\n\r\ninterface ApiAuthResponse {\r\n  user: {\r\n    id: number;\r\n    username: string;\r\n    email: string;\r\n    full_name: string;\r\n  };\r\n  token: string;\r\n  refresh_token?: string;\r\n}\r\n\r\nconst formatErrorMessage = (error: ApiError): string => {\r\n  if (typeof error.detail === 'string') {\r\n    return error.detail;\r\n  }\r\n  if (Array.isArray(error.detail)) {\r\n    return error.detail.map(err => err.msg).join(', ');\r\n  }\r\n  if (!error.detail && !error.message) {\r\n    return 'Please enter both username and password';\r\n  }\r\n  return error.message || 'An error occurred';\r\n};\r\n\r\nconst transformAuthResponse = (apiResponse: ApiAuthResponse): AuthResponse => ({\r\n  user: {\r\n    ...apiResponse.user,\r\n    status: 'online',\r\n    last_seen: new Date().toISOString(),\r\n  },\r\n  token: apiResponse.token,\r\n  refresh_token: apiResponse.refresh_token,\r\n});\r\n\r\nexport const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {\r\n  // Convert credentials to FormData as expected by the backend\r\n  const formData = new URLSearchParams();\r\n  formData.append('username', credentials.username);\r\n  formData.append('password', credentials.password);\r\n\r\n  const response = await fetch(`${API_URL}/api/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: formData.toString(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  const data: ApiAuthResponse = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(formatErrorMessage(data as any));\r\n  }\r\n\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', data.token);\r\n  return transformAuthResponse(data);\r\n};\r\n\r\nexport const signup = async (credentials: SignupCredentials): Promise<AuthResponse> => {\r\n  const response = await fetch(`${API_URL}/api/auth/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n    credentials: 'include',\r\n  });\r\n\r\n  const data: ApiAuthResponse = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(formatErrorMessage(data as any));\r\n  }\r\n\r\n  // Store the token in localStorage\r\n  localStorage.setItem('auth_token', data.token);\r\n  return transformAuthResponse(data);\r\n};\r\n\r\nexport const forgotPassword = async (email: string): Promise<void> => {\r\n  await apiRequest('/api/auth/forgot-password', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ email }),\r\n    requiresAuth: false,\r\n  });\r\n};\r\n\r\nexport const logout = async (): Promise<void> => {\r\n  await apiRequest('/api/auth/logout', {\r\n    method: 'POST',\r\n  });\r\n  localStorage.removeItem('auth_token');\r\n};\r\n\r\n// Helper function to get the auth token\r\nexport const getAuthToken = (): string | null => {\r\n  return localStorage.getItem('auth_token');\r\n};\r\n\r\n// Helper function to check if user is authenticated\r\nexport const isAuthenticated = (): boolean => {\r\n  return !!getAuthToken();\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}