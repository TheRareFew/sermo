{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../Message';\nimport { getChannelMessages, getMessagePosition } from '../../../services/api/chat';\nimport { prependMessages, setMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c4 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c5 = _s((props, ref) => {\n  var _messages, _messages$, _messages$3;\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete,\n    channelId\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const lastMessageRef = useRef(((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.id) || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef(((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const dispatch = useDispatch();\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    var _messages$2;\n    if (!containerRef.current) return;\n    const newChannelId = (_messages$2 = messages[0]) === null || _messages$2 === void 0 ? void 0 : _messages$2.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      var _messages2;\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = (_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n    isInitialRender.current = false;\n  }, [(_messages$3 = messages[0]) === null || _messages$3 === void 0 ? void 0 : _messages$3.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage === null || oldFirstMessage === void 0 ? void 0 : oldFirstMessage.getBoundingClientRect().top;\n      const olderMessages = await getChannelMessages(channelId, 50,\n      // limit\n      messages.length // skip\n      );\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n\n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n\n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    var _messages3, _messages4, _messages5;\n    if (!containerRef.current || isInitialRender.current) return;\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = ((_messages3 = messages[messages.length - 1]) === null || _messages3 === void 0 ? void 0 : _messages3.id) !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && ((_messages4 = messages[messages.length - 1]) === null || _messages4 === void 0 ? void 0 : _messages4.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    }\n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || isNewMessage && isAtBottom) {\n      container.scrollTop = container.scrollHeight;\n    }\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = (_messages5 = messages[messages.length - 1]) === null || _messages5 === void 0 ? void 0 : _messages5.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n\n  // Add new effect to handle selected message loading\n  useEffect(() => {\n    const loadMessagesAroundSelection = async () => {\n      if (!selectedMessageId || !channelId || !messages.length) return;\n\n      // Check if the selected message is already in view\n      const isMessageInView = messages.some(msg => msg.id === selectedMessageId);\n      if (isMessageInView) return;\n      try {\n        setIsLoadingMore(true);\n        // Get the position of the selected message\n        const position = await getMessagePosition(channelId, selectedMessageId);\n\n        // Calculate the range to load (25 messages before and after)\n        const start = Math.max(0, position - 25);\n        const limit = 50; // 25 before + 25 after\n\n        // Load messages around the selected position\n        const loadedMessages = await getChannelMessages(channelId, limit, start);\n\n        // Update messages in store with proper payload format\n        dispatch(setMessages({\n          channelId,\n          messages: loadedMessages.map(msg => transformMessage(msg))\n        }));\n\n        // Set flag to scroll to message after render\n        setShouldScrollToMessage(true);\n      } catch (error) {\n        console.error('Error loading messages around selection:', error);\n      } finally {\n        setIsLoadingMore(false);\n      }\n    };\n    loadMessagesAroundSelection();\n  }, [selectedMessageId, channelId, dispatch]);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = messageId => {\n    console.log('Toggle replies:', messageId);\n  };\n  const handleReply = messageId => {\n    console.log('Reply to message:', messageId);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      children: \"Loading messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(MessageWrapper, {\n        $isSelected: message.id === selectedMessageId,\n        className: message.id === selectedMessageId ? 'highlight' : '',\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          message: message,\n          onDelete: messageId => handleDeleteMessage(messageId),\n          onToggleReplies: messageId => handleToggleReplies(messageId),\n          onReply: messageId => handleReply(messageId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n}, \"KAMDoIX8w1BqKtI3pOfpKZBqJQE=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"KAMDoIX8w1BqKtI3pOfpKZBqJQE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c6 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageWrapper\");\n$RefreshReg$(_c5, \"MessageList$forwardRef\");\n$RefreshReg$(_c6, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","styled","useSelector","useDispatch","Message","getChannelMessages","getMessagePosition","prependMessages","setMessages","transformMessage","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageWrapper","$isSelected","_c4","MessageList","_s","_c5","ref","_messages","_messages$","_messages$3","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","channelId","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","lastMessageRef","length","id","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","isUserScrolling","currentChannelRef","isInitialRender","isLoadingMore","setIsLoadingMore","dispatch","currentUser","users","state","auth","user","chat","current","clearTimeout","_messages$2","newChannelId","channelChanged","_messages2","requestAnimationFrame","scrollTop","scrollHeight","setTimeout","loadOlderMessages","container","oldScrollHeight","oldFirstMessage","querySelector","oldFirstMessageTop","getBoundingClientRect","top","olderMessages","transformedMessages","map","newScrollHeight","heightDifference","newFirstMessageTop","topDifference","error","console","scrollTimeout","handleScroll","addEventListener","removeEventListener","_messages3","_messages4","_messages5","isAtBottom","clientHeight","hasNewMessages","isNewMessage","isOwnMessage","userId","messageElement","scrollIntoView","behavior","block","classList","add","remove","loadMessagesAroundSelection","isMessageInView","some","msg","position","start","Math","max","limit","loadedMessages","handleDeleteMessage","messageId","log","handleToggleReplies","handleReply","children","fileName","_jsxFileName","lineNumber","columnNumber","message","className","onDelete","onToggleReplies","onReply","_c6","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message, { ChatMessageProps } from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport { getChannelMessages, getMessagePosition } from '../../../services/api/chat';\nimport { prependMessages, setMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n  channelId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete, channelId } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const lastMessageRef = useRef<string | null>(messages[messages.length - 1]?.id || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef<string | null>(messages[0]?.channelId || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const dispatch = useDispatch();\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const newChannelId = messages[0]?.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    \n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = messages[messages.length - 1]?.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n\n    isInitialRender.current = false;\n  }, [messages[0]?.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage?.getBoundingClientRect().top;\n\n      const olderMessages = await getChannelMessages(\n        channelId,\n        50, // limit\n        messages.length // skip\n      );\n\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n          \n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n          \n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Add effect to handle messages loading\n  useEffect(() => {\n    if (containerRef.current && messages.length > 0) {\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current || isInitialRender.current) return;\n\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = messages[messages.length - 1]?.id !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && messages[messages.length - 1]?.userId === currentUser?.id;\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      const messageElement = container.querySelector(\n        `[data-message-id=\"${selectedMessageId}\"]`\n      ) as HTMLElement;\n      \n      if (messageElement) {\n        messageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n\n        // Add highlight effect\n        messageElement.classList.add('highlight');\n        \n        if (highlightTimeoutRef.current) {\n          clearTimeout(highlightTimeoutRef.current);\n        }\n        \n        highlightTimeoutRef.current = setTimeout(() => {\n          messageElement.classList.remove('highlight');\n        }, 1000);\n      }\n    } \n    // Immediately scroll to bottom for own messages or when already at bottom\n    else if (isOwnMessage || (isNewMessage && isAtBottom)) {\n      container.scrollTop = container.scrollHeight;\n    }\n\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = messages[messages.length - 1]?.id;\n    prevMessagesRef.current = messages;\n  }, [selectedMessageId, messages, currentUser?.id]);\n\n  // Add new effect to handle selected message loading\n  useEffect(() => {\n    const loadMessagesAroundSelection = async () => {\n      if (!selectedMessageId || !channelId || !messages.length) return;\n\n      // Check if the selected message is already in view\n      const isMessageInView = messages.some(msg => msg.id === selectedMessageId);\n      if (isMessageInView) return;\n\n      try {\n        setIsLoadingMore(true);\n        // Get the position of the selected message\n        const position = await getMessagePosition(channelId, selectedMessageId);\n        \n        // Calculate the range to load (25 messages before and after)\n        const start = Math.max(0, position - 25);\n        const limit = 50;  // 25 before + 25 after\n\n        // Load messages around the selected position\n        const loadedMessages = await getChannelMessages(channelId, limit, start);\n        \n        // Update messages in store with proper payload format\n        dispatch(setMessages({ \n          channelId, \n          messages: loadedMessages.map(msg => transformMessage(msg))\n        }));\n        \n        // Set flag to scroll to message after render\n        setShouldScrollToMessage(true);\n      } catch (error) {\n        console.error('Error loading messages around selection:', error);\n      } finally {\n        setIsLoadingMore(false);\n      }\n    };\n\n    loadMessagesAroundSelection();\n  }, [selectedMessageId, channelId, dispatch]);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    console.log('Toggle replies:', messageId);\n  };\n\n  const handleReply = (messageId: string) => {\n    console.log('Reply to message:', messageId);\n  };\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      {isLoadingMore && (\n        <LoadingIndicator>Loading messages...</LoadingIndicator>\n      )}\n      <MessagesWrapper>\n        {messages.map((message) => (\n          <MessageWrapper\n            key={message.id}\n            $isSelected={message.id === selectedMessageId}\n            className={message.id === selectedMessageId ? 'highlight' : ''}\n          >\n            <Message\n              message={message}\n              onDelete={(messageId: string) => handleDeleteMessage(messageId)}\n              onToggleReplies={(messageId: string) => handleToggleReplies(messageId)}\n              onReply={(messageId: string) => handleReply(messageId)}\n            />\n          </MessageWrapper>\n        ))}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}