{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageInput\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport { sendMessage } from '../../../services/api/chat';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputContainer = styled.div`\n  padding: 8px;\n  background-color: ${props => props.theme.colors.background};\n  border-top: 1px solid ${props => props.theme.colors.border};\n`;\n_c = InputContainer;\nconst Input = styled.input`\n  width: 100%;\n  padding: 8px;\n  background-color: ${props => props.theme.colors.inputBackground};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n_c2 = Input;\nconst ErrorText = styled.div`\n  color: ${props => props.theme.colors.error};\n  font-size: 12px;\n  margin-top: 4px;\n`;\n_c3 = ErrorText;\nconst MessageInput = ({\n  channelId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (channelId && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [channelId]);\n  const handleKeyPress = async e => {\n    if (e.key === 'Enter' && message.trim() && channelId) {\n      setError(null);\n      setIsLoading(true);\n      try {\n        console.log('Sending message:', {\n          channelId,\n          content: message.trim()\n        });\n\n        // Send via API first to ensure message is stored\n        const sentMessage = await sendMessage({\n          channelId,\n          content: message.trim()\n        });\n        console.log('Message sent successfully:', sentMessage);\n\n        // Transform the message and add it to the store\n        const transformedMessage = transformMessage(sentMessage);\n        console.log('Transformed message:', transformedMessage);\n        dispatch(addMessage({\n          channelId,\n          message: transformedMessage\n        }));\n\n        // Clear the input\n        setMessage('');\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        setError('Failed to send message. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const handleChange = e => {\n    setMessage(e.target.value);\n    if (error) {\n      setError(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(InputContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      ref: inputRef,\n      type: \"text\",\n      value: message,\n      onChange: handleChange,\n      onKeyPress: handleKeyPress,\n      placeholder: channelId ? \"Type a message...\" : \"Select a channel to start chatting...\",\n      disabled: isLoading || !channelId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorText, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageInput, \"n01In3yXolIfVV1Vbc9vaqS2JQU=\", false, function () {\n  return [useDispatch];\n});\n_c4 = MessageInput;\nexport default MessageInput;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"InputContainer\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"ErrorText\");\n$RefreshReg$(_c4, \"MessageInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","useDispatch","addMessage","sendMessage","transformMessage","jsxDEV","_jsxDEV","InputContainer","div","props","theme","colors","background","border","_c","Input","input","inputBackground","text","primary","_c2","ErrorText","error","_c3","MessageInput","channelId","_s","dispatch","message","setMessage","setError","isLoading","setIsLoading","inputRef","current","focus","handleKeyPress","e","key","trim","console","log","content","sentMessage","transformedMessage","handleChange","target","value","children","ref","type","onChange","onKeyPress","placeholder","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageInput/index.tsx"],"sourcesContent":["import React, { useState, KeyboardEvent, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport { sendMessage } from '../../../services/api/chat';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { AppDispatch } from '../../../store';\n\ninterface MessageInputProps {\n  channelId: string | null;\n}\n\nconst InputContainer = styled.div`\n  padding: 8px;\n  background-color: ${props => props.theme.colors.background};\n  border-top: 1px solid ${props => props.theme.colors.border};\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 8px;\n  background-color: ${props => props.theme.colors.inputBackground};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ErrorText = styled.div`\n  color: ${props => props.theme.colors.error};\n  font-size: 12px;\n  margin-top: 4px;\n`;\n\nconst MessageInput: React.FC<MessageInputProps> = ({ channelId }) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (channelId && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [channelId]);\n\n  const handleKeyPress = async (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && message.trim() && channelId) {\n      setError(null);\n      setIsLoading(true);\n\n      try {\n        console.log('Sending message:', {\n          channelId,\n          content: message.trim()\n        });\n\n        // Send via API first to ensure message is stored\n        const sentMessage = await sendMessage({\n          channelId,\n          content: message.trim()\n        });\n\n        console.log('Message sent successfully:', sentMessage);\n\n        // Transform the message and add it to the store\n        const transformedMessage = transformMessage(sentMessage);\n        console.log('Transformed message:', transformedMessage);\n\n        dispatch(addMessage({\n          channelId,\n          message: transformedMessage\n        }));\n        \n        // Clear the input\n        setMessage('');\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        setError('Failed to send message. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMessage(e.target.value);\n    if (error) {\n      setError(null);\n    }\n  };\n\n  return (\n    <InputContainer>\n      <Input\n        ref={inputRef}\n        type=\"text\"\n        value={message}\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n        placeholder={channelId ? \"Type a message...\" : \"Select a channel to start chatting...\"}\n        disabled={isLoading || !channelId}\n      />\n      {error && <ErrorText>{error}</ErrorText>}\n    </InputContainer>\n  );\n};\n\nexport default MessageInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}