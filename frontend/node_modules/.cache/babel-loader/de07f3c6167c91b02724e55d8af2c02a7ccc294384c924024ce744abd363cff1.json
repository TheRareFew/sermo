{"ast":null,"code":"export class MessageQueue {\n  constructor() {\n    this.queue = new Map();\n    this.processingQueue = false;\n    this.messageTimeout = 5000;\n  }\n  // 5 seconds timeout for messages\n\n  addMessage(channelId, message) {\n    var _this$queue$get;\n    if (!this.queue.has(channelId)) {\n      this.queue.set(channelId, []);\n    }\n\n    // Add timestamp to message for timeout handling\n    const messageWithTimestamp = {\n      ...message,\n      __timestamp: Date.now()\n    };\n    (_this$queue$get = this.queue.get(channelId)) === null || _this$queue$get === void 0 ? void 0 : _this$queue$get.push(messageWithTimestamp);\n    this.scheduleProcessing(channelId);\n  }\n  scheduleProcessing(channelId) {\n    if (!this.processingQueue) {\n      this.processingQueue = true;\n      setTimeout(() => this.processQueue(channelId), 100); // Process queue every 100ms\n    }\n  }\n  processQueue(channelId) {\n    const messages = this.queue.get(channelId) || [];\n    const now = Date.now();\n\n    // Remove expired messages\n    const validMessages = messages.filter(msg => {\n      return now - msg.__timestamp < this.messageTimeout;\n    });\n\n    // Sort messages by timestamp if they have sequence numbers\n    validMessages.sort((a, b) => {\n      if ('sequence' in a && 'sequence' in b && typeof a.sequence === 'number' && typeof b.sequence === 'number') {\n        return a.sequence - b.sequence;\n      }\n      return 0;\n    });\n\n    // Clear the queue and reset processing flag\n    this.queue.set(channelId, []);\n    this.processingQueue = false;\n\n    // Remove timestamp before returning\n    return validMessages.map(({\n      __timestamp,\n      ...msg\n    }) => msg);\n  }\n  clear(channelId) {\n    this.queue.delete(channelId);\n  }\n  clearAll() {\n    this.queue.clear();\n  }\n}\nexport const messageQueue = new MessageQueue();\nexport default messageQueue;","map":{"version":3,"names":["MessageQueue","constructor","queue","Map","processingQueue","messageTimeout","addMessage","channelId","message","_this$queue$get","has","set","messageWithTimestamp","__timestamp","Date","now","get","push","scheduleProcessing","setTimeout","processQueue","messages","validMessages","filter","msg","sort","a","b","sequence","map","clear","delete","clearAll","messageQueue"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/messageQueue.ts"],"sourcesContent":["import { WebSocketMessage } from '../types';\r\n\r\ninterface QueuedMessage extends WebSocketMessage {\r\n  __timestamp: number;\r\n}\r\n\r\nexport class MessageQueue {\r\n  private queue: Map<string, QueuedMessage[]> = new Map();\r\n  private processingQueue: boolean = false;\r\n  private messageTimeout: number = 5000; // 5 seconds timeout for messages\r\n\r\n  addMessage(channelId: string, message: WebSocketMessage) {\r\n    if (!this.queue.has(channelId)) {\r\n      this.queue.set(channelId, []);\r\n    }\r\n    \r\n    // Add timestamp to message for timeout handling\r\n    const messageWithTimestamp: QueuedMessage = {\r\n      ...message,\r\n      __timestamp: Date.now()\r\n    };\r\n    \r\n    this.queue.get(channelId)?.push(messageWithTimestamp);\r\n    this.scheduleProcessing(channelId);\r\n  }\r\n\r\n  private scheduleProcessing(channelId: string) {\r\n    if (!this.processingQueue) {\r\n      this.processingQueue = true;\r\n      setTimeout(() => this.processQueue(channelId), 100); // Process queue every 100ms\r\n    }\r\n  }\r\n\r\n  processQueue(channelId: string): WebSocketMessage[] {\r\n    const messages = this.queue.get(channelId) || [];\r\n    const now = Date.now();\r\n    \r\n    // Remove expired messages\r\n    const validMessages = messages.filter(msg => {\r\n      return now - msg.__timestamp < this.messageTimeout;\r\n    });\r\n    \r\n    // Sort messages by timestamp if they have sequence numbers\r\n    validMessages.sort((a, b) => {\r\n      if ('sequence' in a && 'sequence' in b && \r\n          typeof a.sequence === 'number' && typeof b.sequence === 'number') {\r\n        return a.sequence - b.sequence;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    // Clear the queue and reset processing flag\r\n    this.queue.set(channelId, []);\r\n    this.processingQueue = false;\r\n    \r\n    // Remove timestamp before returning\r\n    return validMessages.map(({ __timestamp, ...msg }) => msg);\r\n  }\r\n\r\n  clear(channelId: string) {\r\n    this.queue.delete(channelId);\r\n  }\r\n\r\n  clearAll() {\r\n    this.queue.clear();\r\n  }\r\n}\r\n\r\nexport const messageQueue = new MessageQueue();\r\nexport default messageQueue; "],"mappings":"AAMA,OAAO,MAAMA,YAAY,CAAC;EAAAC,YAAA;IAAA,KAChBC,KAAK,GAAiC,IAAIC,GAAG,CAAC,CAAC;IAAA,KAC/CC,eAAe,GAAY,KAAK;IAAA,KAChCC,cAAc,GAAW,IAAI;EAAA;EAAE;;EAEvCC,UAAUA,CAACC,SAAiB,EAAEC,OAAyB,EAAE;IAAA,IAAAC,eAAA;IACvD,IAAI,CAAC,IAAI,CAACP,KAAK,CAACQ,GAAG,CAACH,SAAS,CAAC,EAAE;MAC9B,IAAI,CAACL,KAAK,CAACS,GAAG,CAACJ,SAAS,EAAE,EAAE,CAAC;IAC/B;;IAEA;IACA,MAAMK,oBAAmC,GAAG;MAC1C,GAAGJ,OAAO;MACVK,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC;IACxB,CAAC;IAED,CAAAN,eAAA,OAAI,CAACP,KAAK,CAACc,GAAG,CAACT,SAAS,CAAC,cAAAE,eAAA,uBAAzBA,eAAA,CAA2BQ,IAAI,CAACL,oBAAoB,CAAC;IACrD,IAAI,CAACM,kBAAkB,CAACX,SAAS,CAAC;EACpC;EAEQW,kBAAkBA,CAACX,SAAiB,EAAE;IAC5C,IAAI,CAAC,IAAI,CAACH,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAG,IAAI;MAC3Be,UAAU,CAAC,MAAM,IAAI,CAACC,YAAY,CAACb,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACvD;EACF;EAEAa,YAAYA,CAACb,SAAiB,EAAsB;IAClD,MAAMc,QAAQ,GAAG,IAAI,CAACnB,KAAK,CAACc,GAAG,CAACT,SAAS,CAAC,IAAI,EAAE;IAChD,MAAMQ,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;;IAEtB;IACA,MAAMO,aAAa,GAAGD,QAAQ,CAACE,MAAM,CAACC,GAAG,IAAI;MAC3C,OAAOT,GAAG,GAAGS,GAAG,CAACX,WAAW,GAAG,IAAI,CAACR,cAAc;IACpD,CAAC,CAAC;;IAEF;IACAiB,aAAa,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC3B,IAAI,UAAU,IAAID,CAAC,IAAI,UAAU,IAAIC,CAAC,IAClC,OAAOD,CAAC,CAACE,QAAQ,KAAK,QAAQ,IAAI,OAAOD,CAAC,CAACC,QAAQ,KAAK,QAAQ,EAAE;QACpE,OAAOF,CAAC,CAACE,QAAQ,GAAGD,CAAC,CAACC,QAAQ;MAChC;MACA,OAAO,CAAC;IACV,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC1B,KAAK,CAACS,GAAG,CAACJ,SAAS,EAAE,EAAE,CAAC;IAC7B,IAAI,CAACH,eAAe,GAAG,KAAK;;IAE5B;IACA,OAAOkB,aAAa,CAACO,GAAG,CAAC,CAAC;MAAEhB,WAAW;MAAE,GAAGW;IAAI,CAAC,KAAKA,GAAG,CAAC;EAC5D;EAEAM,KAAKA,CAACvB,SAAiB,EAAE;IACvB,IAAI,CAACL,KAAK,CAAC6B,MAAM,CAACxB,SAAS,CAAC;EAC9B;EAEAyB,QAAQA,CAAA,EAAG;IACT,IAAI,CAAC9B,KAAK,CAAC4B,KAAK,CAAC,CAAC;EACpB;AACF;AAEA,OAAO,MAAMG,YAAY,GAAG,IAAIjC,YAAY,CAAC,CAAC;AAC9C,eAAeiC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}