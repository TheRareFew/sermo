{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, setMessages } from '../../../store/chat/chatSlice';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n    fetchInitialData();\n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout;\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n      setIsConnecting(true);\n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n\n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        if (!isMounted) return;\n\n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        if (!isMounted) return;\n\n        // After joining, fetch channel users and messages\n        const [channelUsers, channelMessages] = await Promise.all([getChannelUsers(activeChannelId), getChannelMessages(activeChannelId)]);\n        if (isMounted) {\n          dispatch(setUsers(channelUsers));\n          dispatch(setMessages({\n            channelId: activeChannelId,\n            messages: channelMessages\n          }));\n        }\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n\n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = msg => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n        try {\n          const {\n            message: wsMessage\n          } = message;\n          const storeMessage = {\n            id: wsMessage.id.toString(),\n            content: wsMessage.content,\n            channelId: wsMessage.channel_id.toString(),\n            userId: wsMessage.sender_id.toString(),\n            reactions: wsMessage.reactions || [],\n            attachments: wsMessage.attachments || [],\n            createdAt: wsMessage.created_at,\n            updatedAt: wsMessage.updated_at || wsMessage.created_at,\n            replyCount: wsMessage.reply_count || 0,\n            isExpanded: false,\n            ...(message.type === 'new_reply' && message.parentId ? {\n              parentId: message.parentId.toString()\n            } : {})\n          };\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = msg => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch]);\n  const handleChannelClick = async channelId => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n    }\n  };\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        dispatch(setActiveChannel(channelId));\n        // Wait for channel switch to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Set the selected message ID\n      setSelectedMessageId(messageId);\n\n      // Clear search results\n      setSearchResults(null);\n\n      // Scroll to message after a short delay to ensure the message list has updated\n      setTimeout(() => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        }\n      }, 500);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelClick(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              isLoading: isSearching,\n              channels: searchResults.channels,\n              messages: searchResults.messages,\n              files: searchResults.files,\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: () => dispatch(logout()),\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      onClose: () => setIsSettingsOpen(false),\n      channel: activeChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"tZI+Iwp4ikh42dv5cCwUT+9AI9g=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","setMessages","addMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","getChannelMessages","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","channels","activeChannelId","users","state","chat","activeChannel","find","channel","id","fetchInitialData","fetchedChannels","length","channelUsers","console","disconnect","isMounted","connectionTimeout","connectToChannel","Promise","resolve","setTimeout","connect","joinChannel","channelMessages","all","channelId","messages","clearTimeout","handleWebSocketMessage","message","log","type","isChannelMessage","msg","wsMessage","storeMessage","toString","content","channel_id","userId","sender_id","reactions","attachments","createdAt","created_at","updatedAt","updated_at","replyCount","reply_count","isExpanded","parentId","isStatusMessage","user_id","status","unsubscribe","onMessage","handleChannelClick","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","handleSearch","query","trim","undefined","results","handleSelectMessage","messageId","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","remove","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","map","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","user","username","onSearch","placeholder","isLoading","files","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","onClose","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  setMessages\n} from '../../../store/chat/chatSlice';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport Button from '../../common/Button';\nimport UserListItem from '../../common/UserListItem';\nimport ChannelListItem from '../../common/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { RootState, WebSocketMessage, StoreMessage, Channel, User, WebSocketChannelMessage, WebSocketStatusMessage, SearchResult } from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  \n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }));\n  const activeChannel = channels.find(channel => channel.id === activeChannelId);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const channelUsers = await getChannelUsers(fetchedChannels[0].id);\n          dispatch(setUsers(channelUsers));\n          dispatch(setActiveChannel(fetchedChannels[0].id));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n      }\n    };\n\n    fetchInitialData();\n    \n    return () => {\n      wsService.disconnect();\n    };\n  }, [dispatch]);\n\n  // Handle channel switching and WebSocket connection\n  useEffect(() => {\n    let isMounted = true;\n    let connectionTimeout: NodeJS.Timeout;\n\n    const connectToChannel = async () => {\n      if (!activeChannelId || isConnecting) return;\n\n      setIsConnecting(true);\n      \n      try {\n        // First disconnect from any existing connection\n        wsService.disconnect();\n        \n        // Wait a bit before reconnecting to avoid race conditions\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Connect to the new channel\n        await wsService.connect(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // Wait a bit before joining the channel\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // After successful connection, join the channel\n        await wsService.joinChannel(activeChannelId);\n        \n        if (!isMounted) return;\n        \n        // After joining, fetch channel users and messages\n        const [channelUsers, channelMessages] = await Promise.all([\n          getChannelUsers(activeChannelId),\n          getChannelMessages(activeChannelId)\n        ]);\n\n        if (isMounted) {\n          dispatch(setUsers(channelUsers));\n          dispatch(setMessages({ channelId: activeChannelId, messages: channelMessages }));\n        }\n      } catch (error) {\n        console.error('Error connecting to channel:', error);\n      } finally {\n        if (isMounted) {\n          setIsConnecting(false);\n        }\n      }\n    };\n\n    if (activeChannelId) {\n      connectionTimeout = setTimeout(() => {\n        connectToChannel();\n      }, 500);\n    }\n\n    return () => {\n      isMounted = false;\n      clearTimeout(connectionTimeout);\n    };\n  }, [activeChannelId, dispatch, isConnecting]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      console.log('Received WebSocket message:', message);\n      \n      // Handle broadcast messages\n      if (message.type === 'message' || message.type === 'new_reply') {\n        // Type guard to ensure we have a channel message\n        const isChannelMessage = (msg: WebSocketMessage): msg is WebSocketChannelMessage => {\n          return (msg.type === 'message' || msg.type === 'new_reply') && 'message' in msg;\n        };\n\n        if (!isChannelMessage(message)) {\n          console.error('Invalid message format:', message);\n          return;\n        }\n\n        try {\n          const { message: wsMessage } = message;\n          const storeMessage: StoreMessage = {\n            id: wsMessage.id.toString(),\n            content: wsMessage.content,\n            channelId: wsMessage.channel_id.toString(),\n            userId: wsMessage.sender_id.toString(),\n            reactions: wsMessage.reactions || [],\n            attachments: wsMessage.attachments || [],\n            createdAt: wsMessage.created_at,\n            updatedAt: wsMessage.updated_at || wsMessage.created_at,\n            replyCount: wsMessage.reply_count || 0,\n            isExpanded: false,\n            ...(message.type === 'new_reply' && message.parentId ? { parentId: message.parentId.toString() } : {})\n          };\n\n          console.log('Dispatching message to store:', storeMessage);\n          dispatch(addMessage(storeMessage));\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n        }\n      }\n\n      // Handle status messages\n      if (message.type === 'user_status' || message.type === 'presence_update') {\n        const isStatusMessage = (msg: WebSocketMessage): msg is WebSocketStatusMessage => {\n          return (msg.type === 'user_status' || msg.type === 'presence_update') && 'user_id' in msg && 'status' in msg;\n        };\n\n        if (!isStatusMessage(message)) {\n          console.error('Invalid status message format:', message);\n          return;\n        }\n\n        dispatch(updateUserStatus({\n          userId: message.user_id.toString(),\n          status: message.status\n        }));\n      }\n    };\n\n    const unsubscribe = wsService.onMessage(handleWebSocketMessage);\n    return () => unsubscribe();\n  }, [dispatch]);\n\n  const handleChannelClick = async (channelId: string) => {\n    if (channelId !== activeChannelId) {\n      dispatch(setActiveChannel(channelId));\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Search failed. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      // Switch to the channel if it's different\n      if (channelId !== activeChannelId) {\n        dispatch(setActiveChannel(channelId));\n        // Wait for channel switch to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Set the selected message ID\n      setSelectedMessageId(messageId);\n\n      // Clear search results\n      setSearchResults(null);\n\n      // Scroll to message after a short delay to ensure the message list has updated\n      setTimeout(() => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        }\n      }, 500);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelClick(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  isLoading={isSearching}\n                  channels={searchResults.channels}\n                  messages={searchResults.messages}\n                  files={searchResults.files}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={() => dispatch(logout())}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput channelId={activeChannelId || ''} />\n        </ChatInput>\n      </ChatArea>\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          onClose={() => setIsSettingsOpen(false)}\n          channel={activeChannel}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}