{"ast":null,"code":"import { getAuthToken } from './auth';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const getChannels = async () => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/v1/channels`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to fetch channels');\n  }\n  return response.json();\n};\nexport const getChannelMessages = async (channelId, limit = 50) => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/messages?limit=${limit}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to fetch messages');\n  }\n  return response.json();\n};\nexport const getChannelUsers = async channelId => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/users`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to fetch channel users');\n  }\n  return response.json();\n};\nexport const createChannel = async (name, description) => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/v1/channels`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      description\n    }),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to create channel');\n  }\n  return response.json();\n};\nexport const joinChannel = async channelId => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/join`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to join channel');\n  }\n};\nexport const leaveChannel = async channelId => {\n  const token = getAuthToken();\n  if (!token) throw new Error('No auth token available');\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/leave`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to leave channel');\n  }\n};","map":{"version":3,"names":["getAuthToken","API_URL","process","env","REACT_APP_API_URL","getChannels","token","Error","response","fetch","headers","credentials","ok","error","json","detail","getChannelMessages","channelId","limit","getChannelUsers","createChannel","name","description","method","body","JSON","stringify","joinChannel","leaveChannel"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/chat.ts"],"sourcesContent":["import { getAuthToken } from './auth';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\ninterface Channel {\r\n  id: number;\r\n  name: string;\r\n  description: string | null;\r\n  is_direct_message: boolean;\r\n  created_at: string;\r\n  created_by_id: number;\r\n}\r\n\r\ninterface Message {\r\n  id: number;\r\n  content: string;\r\n  sender_id: number;\r\n  channel_id: number;\r\n  created_at: string;\r\n}\r\n\r\ninterface User {\r\n  id: number;\r\n  username: string;\r\n  full_name: string;\r\n  status: 'online' | 'offline' | 'away' | 'busy';\r\n  last_seen: string;\r\n}\r\n\r\nexport const getChannels = async (): Promise<Channel[]> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/v1/channels`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to fetch channels');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getChannelMessages = async (channelId: number, limit: number = 50): Promise<Message[]> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/messages?limit=${limit}`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to fetch messages');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getChannelUsers = async (channelId: number): Promise<User[]> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/users`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to fetch channel users');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const createChannel = async (name: string, description?: string): Promise<Channel> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/v1/channels`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, description }),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to create channel');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const joinChannel = async (channelId: number): Promise<void> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/join`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to join channel');\r\n  }\r\n};\r\n\r\nexport const leaveChannel = async (channelId: number): Promise<void> => {\r\n  const token = getAuthToken();\r\n  if (!token) throw new Error('No auth token available');\r\n\r\n  const response = await fetch(`${API_URL}/api/v1/channels/${channelId}/leave`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.detail || 'Failed to leave channel');\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}