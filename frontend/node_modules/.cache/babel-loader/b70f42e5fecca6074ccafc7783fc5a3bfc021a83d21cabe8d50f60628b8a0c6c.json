{"ast":null,"code":"export const transformMessage = message => {\n  var _message$parent_id;\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content.slice(0, 50),\n    // Only log first 50 chars\n    rawReactions: message.reactions\n  });\n\n  // Process reactions with detailed logging\n  let reactions = [];\n  if (message.reactions && Array.isArray(message.reactions)) {\n    console.log('Raw reactions array:', JSON.stringify(message.reactions, null, 2));\n    reactions = message.reactions.filter(r => r && (r.emoji || r.user_id || r.userId)) // Filter out invalid reactions\n    .map(r => {\n      var _r$id, _ref;\n      console.log('Processing reaction:', JSON.stringify(r, null, 2));\n      const reaction = {\n        id: ((_r$id = r.id) === null || _r$id === void 0 ? void 0 : _r$id.toString()) || `${message.id}_${r.user_id || r.userId}_${r.emoji}`,\n        messageId: message.id.toString(),\n        userId: ((_ref = r.user_id || r.userId) === null || _ref === void 0 ? void 0 : _ref.toString()) || '',\n        emoji: r.emoji || '',\n        createdAt: r.created_at || r.createdAt || new Date().toISOString()\n      };\n      console.log('Transformed reaction:', reaction);\n      return reaction;\n    }).filter(r => r.userId && r.emoji); // Filter out reactions with missing required fields\n  } else {\n    console.log('No reactions found or reactions is not an array');\n  }\n  console.log('All processed reactions:', JSON.stringify(reactions, null, 2));\n  const transformed = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: (message.channel_id || '').toString(),\n    userId: (message.sender_id || '').toString(),\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: (_message$parent_id = message.parent_id) === null || _message$parent_id === void 0 ? void 0 : _message$parent_id.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false\n  };\n  console.log('Transformed message:', {\n    id: transformed.id,\n    content: transformed.content.slice(0, 50),\n    // Only log first 50 chars\n    reactions: transformed.reactions\n  });\n  return transformed;\n};","map":{"version":3,"names":["transformMessage","message","_message$parent_id","console","log","id","content","slice","rawReactions","reactions","Array","isArray","JSON","stringify","filter","r","emoji","user_id","userId","map","_r$id","_ref","reaction","toString","messageId","createdAt","created_at","Date","toISOString","transformed","channelId","channel_id","sender_id","attachments","updatedAt","updated_at","parentId","parent_id","replyCount","reply_count","isExpanded"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { Message, RawMessage, StoreMessage, Reaction, RawReaction } from '../types';\n\nexport const transformMessage = (message: RawMessage | Message): StoreMessage => {\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content.slice(0, 50), // Only log first 50 chars\n    rawReactions: message.reactions\n  });\n  \n  // Process reactions with detailed logging\n  let reactions: Reaction[] = [];\n  if (message.reactions && Array.isArray(message.reactions)) {\n    console.log('Raw reactions array:', JSON.stringify(message.reactions, null, 2));\n    reactions = message.reactions\n      .filter((r: RawReaction) => r && (r.emoji || r.user_id || r.userId)) // Filter out invalid reactions\n      .map((r: RawReaction) => {\n        console.log('Processing reaction:', JSON.stringify(r, null, 2));\n        const reaction = {\n          id: r.id?.toString() || `${message.id}_${r.user_id || r.userId}_${r.emoji}`,\n          messageId: message.id.toString(),\n          userId: (r.user_id || r.userId)?.toString() || '',\n          emoji: r.emoji || '',\n          createdAt: r.created_at || r.createdAt || new Date().toISOString()\n        };\n        console.log('Transformed reaction:', reaction);\n        return reaction;\n      })\n      .filter(r => r.userId && r.emoji); // Filter out reactions with missing required fields\n  } else {\n    console.log('No reactions found or reactions is not an array');\n  }\n\n  console.log('All processed reactions:', JSON.stringify(reactions, null, 2));\n  \n  const transformed: StoreMessage = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: (message.channel_id || '').toString(),\n    userId: (message.sender_id || '').toString(),\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: message.parent_id?.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n  };\n  \n  console.log('Transformed message:', {\n    id: transformed.id,\n    content: transformed.content.slice(0, 50), // Only log first 50 chars\n    reactions: transformed.reactions\n  });\n\n  return transformed;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}