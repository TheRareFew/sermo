{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MessageItem from '../MessageItem';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { prependMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n_c3 = LoadingIndicator;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c4 = _s((props, ref) => {\n  var _messages, _messages$, _messages$3;\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete,\n    channelId\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const lastMessageRef = useRef(((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.id) || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef(((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const dispatch = useDispatch();\n  const currentUser = useSelector(state => state.auth.user);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    var _messages$2;\n    if (!containerRef.current) return;\n    const newChannelId = (_messages$2 = messages[0]) === null || _messages$2 === void 0 ? void 0 : _messages$2.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      var _messages2;\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = (_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n    isInitialRender.current = false;\n  }, [(_messages$3 = messages[0]) === null || _messages$3 === void 0 ? void 0 : _messages$3.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage === null || oldFirstMessage === void 0 ? void 0 : oldFirstMessage.getBoundingClientRect().top;\n      const olderMessages = await getChannelMessages(channelId, 50,\n      // limit\n      messages.length // skip\n      );\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n\n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n\n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    var _messages3, _messages4, _messages5;\n    if (!containerRef.current || isInitialRender.current) return;\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = ((_messages3 = messages[messages.length - 1]) === null || _messages3 === void 0 ? void 0 : _messages3.id) !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && ((_messages4 = messages[messages.length - 1]) === null || _messages4 === void 0 ? void 0 : _messages4.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n    if (isAtBottom || isOwnMessage) {\n      requestAnimationFrame(() => {\n        if (container) {\n          container.scrollTop = container.scrollHeight;\n        }\n      });\n    }\n    lastMessageRef.current = (_messages5 = messages[messages.length - 1]) === null || _messages5 === void 0 ? void 0 : _messages5.id;\n    prevMessagesRef.current = messages;\n  }, [messages, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: [isLoadingMore && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      children: \"Loading older messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(MessageItem, {\n        message: message,\n        isSelected: message.id === selectedMessageId\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}, \"RdO0MCne+nMcJsjTRTqZniRXFQI=\", false, function () {\n  return [useDispatch, useSelector];\n})), \"RdO0MCne+nMcJsjTRTqZniRXFQI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c5 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"LoadingIndicator\");\n$RefreshReg$(_c4, \"MessageList$forwardRef\");\n$RefreshReg$(_c5, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","useCallback","styled","useSelector","useDispatch","MessageItem","getChannelMessages","prependMessages","transformMessage","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","_c3","MessageList","_s","_c4","ref","_messages","_messages$","_messages$3","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","channelId","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","lastMessageRef","length","id","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","isUserScrolling","currentChannelRef","isInitialRender","isLoadingMore","setIsLoadingMore","dispatch","currentUser","state","auth","user","current","clearTimeout","_messages$2","newChannelId","channelChanged","_messages2","requestAnimationFrame","scrollTop","scrollHeight","setTimeout","loadOlderMessages","container","oldScrollHeight","oldFirstMessage","querySelector","oldFirstMessageTop","getBoundingClientRect","top","olderMessages","transformedMessages","map","newScrollHeight","heightDifference","newFirstMessageTop","topDifference","error","console","scrollTimeout","handleScroll","addEventListener","removeEventListener","_messages3","_messages4","_messages5","isAtBottom","clientHeight","hasNewMessages","isNewMessage","isOwnMessage","userId","children","fileName","_jsxFileName","lineNumber","columnNumber","message","isSelected","_c5","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, StoreMessage } from '../../../types';\nimport MessageItem from '../MessageItem';\nimport { getChannelMessages } from '../../../services/api/chat';\nimport { prependMessages } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n  channelId?: string | null;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n  min-height: min-content;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete, channelId } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const lastMessageRef = useRef<string | null>(messages[messages.length - 1]?.id || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef<string | null>(messages[0]?.channelId || null);\n  const isInitialRender = useRef(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const dispatch = useDispatch();\n  const currentUser = useSelector((state: RootState) => state.auth.user);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Initial render and channel change handler\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const newChannelId = messages[0]?.channelId;\n    const channelChanged = newChannelId !== currentChannelRef.current;\n    \n    if ((isInitialRender.current || channelChanged) && messages.length > 0) {\n      // Reset all scroll-related state\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = messages[messages.length - 1]?.id;\n      isUserScrolling.current = false;\n      currentChannelRef.current = newChannelId;\n\n      // Use RAF to ensure DOM is updated before scrolling\n      requestAnimationFrame(() => {\n        if (containerRef.current) {\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          // Double-check scroll position after a brief delay\n          setTimeout(() => {\n            if (containerRef.current) {\n              containerRef.current.scrollTop = containerRef.current.scrollHeight;\n            }\n          }, 50);\n        }\n      });\n      setInitialScrollComplete(true);\n    }\n\n    isInitialRender.current = false;\n  }, [messages[0]?.channelId]);\n\n  // Add function to load older messages\n  const loadOlderMessages = useCallback(async () => {\n    if (!channelId || channelId === null || isLoadingMore) return;\n\n    try {\n      setIsLoadingMore(true);\n      const container = containerRef.current;\n      if (!container) return;\n\n      // Store the scroll height and a reference element before loading\n      const oldScrollHeight = container.scrollHeight;\n      const oldFirstMessage = container.querySelector('[data-message-id]');\n      const oldFirstMessageTop = oldFirstMessage?.getBoundingClientRect().top;\n\n      const olderMessages = await getChannelMessages(\n        channelId,\n        50, // limit\n        messages.length // skip\n      );\n\n      if (olderMessages.length > 0) {\n        const transformedMessages = olderMessages.map(transformMessage);\n        dispatch(prependMessages({\n          channelId,\n          messages: transformedMessages\n        }));\n\n        // After React has updated the DOM, adjust scroll position\n        requestAnimationFrame(() => {\n          if (!container) return;\n          \n          // Calculate new scroll position\n          const newScrollHeight = container.scrollHeight;\n          const heightDifference = newScrollHeight - oldScrollHeight;\n          \n          // Adjust scroll position to maintain the same relative position\n          container.scrollTop = heightDifference;\n\n          // Fine-tune adjustment if we have a reference element\n          if (oldFirstMessage && oldFirstMessageTop) {\n            const newFirstMessageTop = oldFirstMessage.getBoundingClientRect().top;\n            const topDifference = newFirstMessageTop - oldFirstMessageTop;\n            container.scrollTop += topDifference;\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [channelId, messages, dispatch, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n\n      // Check if we're at the top\n      if (container.scrollTop === 0 && !isLoadingMore) {\n        loadOlderMessages();\n      }\n\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150);\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, [loadOlderMessages, isLoadingMore]);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current || isInitialRender.current) return;\n\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = messages[messages.length - 1]?.id !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const isOwnMessage = isNewMessage && messages[messages.length - 1]?.userId === currentUser?.id;\n\n    if (isAtBottom || isOwnMessage) {\n      requestAnimationFrame(() => {\n        if (container) {\n          container.scrollTop = container.scrollHeight;\n        }\n      });\n    }\n\n    lastMessageRef.current = messages[messages.length - 1]?.id;\n    prevMessagesRef.current = messages;\n  }, [messages, currentUser?.id]);\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      {isLoadingMore && (\n        <LoadingIndicator>Loading older messages...</LoadingIndicator>\n      )}\n      <MessagesWrapper>\n        {messages.map((message) => (\n          <MessageItem\n            key={message.id}\n            message={message}\n            isSelected={message.id === selectedMessageId}\n          />\n        ))}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}