{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\layout\\\\MainLayout\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport { setActiveChannel, setChannels, setUsers, updateUserStatus, addChannel, removeChannel, updateChannelUnreadCount, setError } from '../../../store/chat/chatSlice';\nimport { addMessage, setMessages, setReplies, deleteMessage, updateMessage } from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n_c = MainContainer;\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = Sidebar;\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = ChannelList;\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c4 = UserList;\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n_c5 = ChatArea;\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n_c6 = ChatHeader;\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n_c7 = ChatInput;\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n_c8 = LogoutButton;\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n_c9 = ChannelHeader;\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c10 = CreateChannelButton;\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n_c11 = ChannelGroup;\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n_c12 = GroupTitle;\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n_c13 = ChannelActions;\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n_c14 = SettingsButton;\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n_c15 = SearchContainer;\nconst MainLayout = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchError, setSearchError] = useState();\n  const messageListRef = useRef(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isChannelSwitching = useRef(false);\n\n  // Memoize selectors\n  const {\n    channels,\n    activeChannelId,\n    users\n  } = useSelector(state => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users\n  }), (prev, next) => {\n    return prev.channels === next.channels && prev.activeChannelId === next.activeChannelId && prev.users === next.users;\n  });\n  const activeChannel = useMemo(() => channels.find(channel => channel.id === activeChannelId), [channels, activeChannelId]);\n  const channelMessages = useSelector(state => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback(messages => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n    fetchInitialData();\n  }, [dispatch]); // Only run once on mount, but include dispatch in dependencies\n\n  // Connect to WebSocket\n  const connectToWebSocket = useCallback(async channelId => {\n    try {\n      await wsService.connect(parseInt(channelId));\n    } catch (error) {\n      console.error('[WebSocket] Connection failed:', error);\n      dispatch(setError('Failed to connect to chat'));\n    }\n  }, [dispatch]);\n\n  // Handle WebSocket messages\n  const handleWebSocketMessage = useCallback(message => {\n    var _message$data, _message$data2, _message$data3, _message$data4, _message$data5, _message$data6, _message$data7;\n    console.log('MainLayout received WebSocket message:', message);\n\n    // Helper function to check if message belongs to current channel\n    const isMessageForCurrentChannel = msg => {\n      var _msg$data;\n      if ((_msg$data = msg.data) !== null && _msg$data !== void 0 && _msg$data.channel_id) {\n        const channelId = msg.data.channel_id.toString();\n        console.log('Message channel ID:', channelId, 'Active channel ID:', activeChannelId);\n        return channelId === activeChannelId;\n      }\n      return true; // For other message types like user_status\n    };\n\n    // Skip messages not meant for current channel\n    if (!isMessageForCurrentChannel(message)) {\n      console.log('Ignoring message from different channel');\n      return;\n    }\n\n    // Log the message type and content for debugging\n    console.log('Processing message type:', message.type);\n    if (message.data) {\n      console.log('Message data:', message.data);\n    }\n    try {\n      switch (message.type) {\n        case 'channel_created':\n        case 'channel_updated':\n          if ((_message$data = message.data) !== null && _message$data !== void 0 && _message$data.message) {\n            console.log('Adding/updating channel:', message.data.message);\n            dispatch(addChannel(message.data.message));\n          }\n          break;\n        case 'channel_deleted':\n          if ((_message$data2 = message.data) !== null && _message$data2 !== void 0 && _message$data2.channel_id) {\n            const channelId = message.data.channel_id.toString();\n            console.log('Removing channel:', channelId);\n            dispatch(removeChannel(channelId));\n            if (channelId === activeChannelId && channels.length > 0) {\n              const firstChannel = channels.find(ch => ch.id !== channelId);\n              if (firstChannel) {\n                handleChannelSelect(firstChannel.id);\n              }\n            }\n          }\n          break;\n        case 'unread_count_updated':\n          if ((_message$data3 = message.data) !== null && _message$data3 !== void 0 && _message$data3.channel_id && typeof message.data.count === 'number') {\n            console.log('Updating unread count:', message.data.channel_id, message.data.count);\n            dispatch(updateChannelUnreadCount({\n              channelId: message.data.channel_id.toString(),\n              count: message.data.count\n            }));\n          }\n          break;\n        case 'user_status':\n          if ((_message$data4 = message.data) !== null && _message$data4 !== void 0 && _message$data4.user_id && message.data.status) {\n            console.log('Updating user status:', message.data.user_id, message.data.status);\n            dispatch(updateUserStatus({\n              userId: message.data.user_id.toString(),\n              status: message.data.status\n            }));\n          }\n          break;\n        case 'message':\n        case 'message_sent':\n        case 'message_updated':\n          if ((_message$data5 = message.data) !== null && _message$data5 !== void 0 && _message$data5.message) {\n            console.log('Processing message:', message);\n            const transformedMessage = transformMessage(message.data.message);\n            console.log('Transformed message:', transformedMessage);\n            if (message.type === 'message_updated') {\n              dispatch(updateMessage({\n                channelId: transformedMessage.channelId,\n                id: transformedMessage.id,\n                message: transformedMessage\n              }));\n            } else {\n              dispatch(addMessage({\n                channelId: transformedMessage.channelId,\n                message: transformedMessage\n              }));\n\n              // Auto-scroll to bottom for new messages\n              requestAnimationFrame(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              });\n            }\n          }\n          break;\n        case 'new_reply':\n          if ((_message$data6 = message.data) !== null && _message$data6 !== void 0 && _message$data6.message && message.data.message.parent_id) {\n            console.log('Processing reply:', message);\n            const transformedReply = transformMessage(message.data.message);\n            console.log('Transformed reply:', transformedReply);\n            dispatch(setReplies({\n              channelId: transformedReply.channelId,\n              messageId: message.data.message.parent_id.toString(),\n              replies: [transformedReply]\n            }));\n          }\n          break;\n        case 'message_deleted':\n          if ((_message$data7 = message.data) !== null && _message$data7 !== void 0 && _message$data7.channel_id && message.data.message_id) {\n            console.log('Deleting message:', message.data.channel_id, message.data.message_id);\n            dispatch(deleteMessage({\n              channelId: message.data.channel_id.toString(),\n              messageId: message.data.message_id.toString()\n            }));\n          }\n          break;\n        case 'error':\n          if (message.message) {\n            console.error('WebSocket error:', message.message);\n            dispatch(setError(`WebSocket error: ${message.message}`));\n          }\n          break;\n        default:\n          console.warn('Unknown message type:', message.type);\n          break;\n      }\n    } catch (error) {\n      console.error('Error processing WebSocket message:', error);\n      dispatch(setError('Error processing message from server'));\n    }\n  }, [dispatch, messageListRef]);\n\n  // Handle connection errors\n  const handleConnectionError = useCallback(error => {\n    console.error('WebSocket connection error:', error);\n    dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n  }, [dispatch]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async channelId => {\n    try {\n      // First disconnect from current channel\n      console.log('[DEBUG] Disconnecting from current WebSocket');\n      wsService.disconnect();\n\n      // Set the active channel and clear messages\n      dispatch(setActiveChannel(channelId));\n      dispatch(clearMessages());\n\n      // Connect to new channel\n      await connectToWebSocket(channelId);\n    } catch (error) {\n      console.error('Error switching channels:', error);\n      dispatch(setError('Failed to switch channels'));\n    }\n  }, [dispatch, connectToWebSocket]);\n\n  // Set up WebSocket handlers\n  useEffect(() => {\n    if (!activeChannelId) return;\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n      }\n    };\n    console.log('Setting up WebSocket handlers for channel:', activeChannelId);\n    const unsubscribeMessage = wsService.onMessage('chat', handleWebSocketMessage);\n    const unsubscribeError = wsService.onError('chat', handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n\n    // Initial connection\n    connectToWebSocket(activeChannelId);\n    return () => {\n      console.log('Cleaning up WebSocket handlers for channel:', activeChannelId);\n      clearInterval(statusInterval);\n      unsubscribeMessage();\n      unsubscribeError();\n      wsService.disconnect();\n    };\n  }, [activeChannelId, handleWebSocketMessage, handleConnectionError, connectToWebSocket, dispatch]);\n\n  // Handle search\n  const handleSearch = async query => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n    setIsSearching(true);\n    setSearchError(undefined);\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId, messageId) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({\n          channelId,\n          messages: []\n        }));\n        dispatch(setActiveChannel(channelId));\n      }\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a, b) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n  const publicChannels = sortedChannels.filter(channel => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter(channel => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter(channel => channel.is_direct_message);\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateChannelButton, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setIsCreateModalOpen(true),\n            children: \"+New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this), publicChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Public Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this), publicChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 13\n        }, this), privateChannels.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Private Channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this), privateChannels.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this), directMessages.length > 0 && /*#__PURE__*/_jsxDEV(ChannelGroup, {\n          children: [/*#__PURE__*/_jsxDEV(GroupTitle, {\n            children: \"Direct Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), directMessages.map(channel => /*#__PURE__*/_jsxDEV(ChannelListItem, {\n            name: channel.name,\n            isActive: channel.id === activeChannelId,\n            hasUnread: channel.unreadCount > 0,\n            isDirect: channel.is_direct_message,\n            isPublic: channel.is_public,\n            onClick: () => handleChannelSelect(channel.id)\n          }, channel.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Online Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this), Object.values(users).map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n          username: user.username,\n          status: user.status\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.name) || 'Select a Channel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChannelActions, {\n          children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n              onSearch: handleSearch,\n              placeholder: \"Search messages, files, and channels...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 15\n            }, this), searchResults && /*#__PURE__*/_jsxDEV(SearchResults, {\n              results: searchResults,\n              isLoading: isSearching,\n              onClose: () => setSearchResults(null),\n              onSelectChannel: channelId => {\n                dispatch(setActiveChannel(channelId));\n                setSearchResults(null);\n              },\n              onSelectMessage: handleSelectMessage,\n              onSelectFile: fileId => {\n                // TODO: Implement file selection\n                console.log('Selected file:', fileId);\n                setSearchResults(null);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 13\n          }, this), activeChannel && !activeChannel.is_direct_message && /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => setIsSettingsOpen(true),\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        ref: messageListRef,\n        messages: channelMessages,\n        selectedMessageId: selectedMessageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          channelId: activeChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this), isCreateModalOpen && /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 9\n    }, this), isSettingsOpen && activeChannel && /*#__PURE__*/_jsxDEV(ChannelSettings, {\n      isOpen: isSettingsOpen,\n      channel: activeChannel,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 5\n  }, this);\n};\n_s(MainLayout, \"9/gTCkx06vFEQDlhvSBdJh5BNco=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c16 = MainLayout;\nexport default MainLayout;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"ChannelList\");\n$RefreshReg$(_c4, \"UserList\");\n$RefreshReg$(_c5, \"ChatArea\");\n$RefreshReg$(_c6, \"ChatHeader\");\n$RefreshReg$(_c7, \"ChatInput\");\n$RefreshReg$(_c8, \"LogoutButton\");\n$RefreshReg$(_c9, \"ChannelHeader\");\n$RefreshReg$(_c10, \"CreateChannelButton\");\n$RefreshReg$(_c11, \"ChannelGroup\");\n$RefreshReg$(_c12, \"GroupTitle\");\n$RefreshReg$(_c13, \"ChannelActions\");\n$RefreshReg$(_c14, \"SettingsButton\");\n$RefreshReg$(_c15, \"SearchContainer\");\n$RefreshReg$(_c16, \"MainLayout\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","styled","useDispatch","useSelector","logout","setActiveChannel","setChannels","setUsers","updateUserStatus","addChannel","removeChannel","updateChannelUnreadCount","setError","addMessage","setMessages","setReplies","deleteMessage","updateMessage","transformMessage","Button","UserListItem","ChannelListItem","CreateChannelModal","MessageInput","MessageList","SearchBar","SearchResults","wsService","getChannels","getChannelUsers","searchAll","ChannelSettings","jsxDEV","_jsxDEV","MainContainer","div","props","theme","colors","background","text","_c","Sidebar","border","_c2","ChannelList","primary","_c3","UserList","_c4","ChatArea","_c5","ChatHeader","_c6","ChatInput","_c7","LogoutButton","button","error","_c8","ChannelHeader","_c9","CreateChannelButton","_c10","ChannelGroup","_c11","GroupTitle","h3","textLight","_c12","ChannelActions","_c13","SettingsButton","_c14","SearchContainer","_c15","MainLayout","_s","dispatch","isCreateModalOpen","setIsCreateModalOpen","isSettingsOpen","setIsSettingsOpen","isConnecting","setIsConnecting","isSearching","setIsSearching","searchResults","setSearchResults","searchError","setSearchError","messageListRef","selectedMessageId","setSelectedMessageId","isChannelSwitching","channels","activeChannelId","users","state","chat","prev","next","activeChannel","find","channel","id","channelMessages","messages","messagesByChannel","transformMessagesInChunks","map","msg","fetchInitialData","console","log","fetchedChannels","length","firstChannelId","channelUsers","usersObject","reduce","acc","user","connectToWebSocket","channelId","connect","parseInt","handleWebSocketMessage","message","_message$data","_message$data2","_message$data3","_message$data4","_message$data5","_message$data6","_message$data7","isMessageForCurrentChannel","_msg$data","data","channel_id","toString","type","firstChannel","ch","handleChannelSelect","count","user_id","status","userId","transformedMessage","requestAnimationFrame","current","scrollTop","scrollHeight","parent_id","transformedReply","messageId","replies","message_id","warn","handleConnectionError","disconnect","clearMessages","handleConnectionStatus","getChatSocketState","WebSocket","OPEN","unsubscribeMessage","onMessage","unsubscribeError","onError","statusInterval","setInterval","clearInterval","handleSearch","query","trim","undefined","results","handleSelectMessage","scrollToMessage","messageElement","document","getElementById","scrollIntoView","behavior","block","classList","add","setTimeout","remove","handleLogout","sortedChannels","sort","a","b","is_public","name","localeCompare","publicChannels","filter","is_direct_message","privateChannels","directMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","isActive","hasUnread","unreadCount","isDirect","isPublic","Object","values","username","onSearch","placeholder","isLoading","onClose","onSelectChannel","onSelectMessage","onSelectFile","fileId","ref","isOpen","_c16","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/layout/MainLayout/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../../store/auth/authSlice';\nimport {\n  setActiveChannel,\n  setChannels,\n  setUsers,\n  updateUserStatus,\n  addChannel,\n  removeChannel,\n  updateChannelUnreadCount,\n  setError\n} from '../../../store/chat/chatSlice';\nimport {\n  addMessage,\n  setMessages,\n  setReplies,\n  deleteMessage,\n  updateMessage\n} from '../../../store/messages/messagesSlice';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport Button from '../../common/Button';\nimport UserListItem from '../../chat/UserListItem';\nimport ChannelListItem from '../../chat/ChannelListItem';\nimport CreateChannelModal from '../../chat/CreateChannelModal';\nimport MessageInput from '../../chat/MessageInput';\nimport MessageList from '../../chat/MessageList';\nimport SearchBar from '../../common/SearchBar';\nimport SearchResults from '../../common/SearchResults';\nimport wsService from '../../../services/websocket';\nimport { getChannels, getChannelUsers, getChannelMessages, joinChannel, getReplies } from '../../../services/api/chat';\nimport { searchAll } from '../../../services/api/search';\nimport { \n  RootState, \n  WebSocketMessage, \n  Channel, \n  User, \n  Message, \n  SearchResult,\n  UserStatus,\n  RawMessage,\n  StoreMessage\n} from '../../../types';\nimport ChannelSettings from '../../chat/ChannelSettings';\nimport { AppDispatch } from '../../../store';\nimport { store } from '../../../store';\n\nconst MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  font-family: 'VT323', monospace;\n`;\n\nconst Sidebar = styled.div`\n  width: 200px;\n  border-right: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChannelList = styled.div`\n  flex: 1;\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst UserList = styled.div`\n  height: 200px;\n  padding: 16px;\n  border-top: 2px solid ${props => props.theme.colors.border};\n  overflow-y: auto;\n\n  h2 {\n    margin: 0 0 16px 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ChatArea = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ChatHeader = styled.div`\n  padding: 16px;\n  border-bottom: 2px solid ${props => props.theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    margin: 0;\n    text-transform: uppercase;\n  }\n`;\n\nconst ChatInput = styled.div`\n  border-top: 2px solid ${props => props.theme.colors.border};\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: 2px solid ${props => props.theme.colors.error};\n  color: ${props => props.theme.colors.error};\n  padding: 4px 8px;\n  font-family: 'VT323', monospace;\n  cursor: pointer;\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${props => props.theme.colors.error};\n    color: ${props => props.theme.colors.background};\n  }\n`;\n\nconst ChannelHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n\n  h2 {\n    margin: 0;\n    text-transform: uppercase;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst CreateChannelButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst ChannelGroup = styled.div`\n  margin-bottom: 16px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst GroupTitle = styled.h3`\n  margin: 0 0 8px 0;\n  padding: 4px 8px;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.textLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  font-family: 'Courier New', monospace;\n`;\n\nconst ChannelActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SettingsButton = styled(Button)`\n  padding: 2px 8px;\n  font-size: 0.875rem;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-right: 16px;\n`;\n\nconst MainLayout: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [searchError, setSearchError] = useState<string | undefined>();\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);\n  const isChannelSwitching = useRef<boolean>(false);\n  \n  // Memoize selectors\n  const { channels, activeChannelId, users } = useSelector((state: RootState) => ({\n    channels: state.chat.channels,\n    activeChannelId: state.chat.activeChannelId,\n    users: state.chat.users as { [key: string]: User }\n  }), (prev, next) => {\n    return prev.channels === next.channels &&\n           prev.activeChannelId === next.activeChannelId &&\n           prev.users === next.users;\n  });\n\n  const activeChannel = useMemo(() => \n    channels.find(channel => channel.id === activeChannelId),\n    [channels, activeChannelId]\n  );\n\n  const channelMessages = useSelector((state: RootState) => {\n    return state.messages.messagesByChannel[activeChannelId || ''] || [];\n  }, (prev, next) => prev === next);\n\n  // Helper function to transform messages in chunks\n  const transformMessagesInChunks = useCallback((messages: Message[]): StoreMessage[] => {\n    return messages.map(msg => transformMessage(msg));\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        console.log('Fetching initial data...');\n        const fetchedChannels = await getChannels();\n        dispatch(setChannels(fetchedChannels));\n\n        if (fetchedChannels.length > 0) {\n          const firstChannelId = fetchedChannels[0].id;\n          const channelUsers = await getChannelUsers(firstChannelId);\n          const usersObject = channelUsers.reduce<{ [key: string]: User }>((acc, user) => ({\n            ...acc,\n            [user.id]: user\n          }), {});\n          dispatch(setUsers(usersObject));\n          dispatch(setActiveChannel(firstChannelId));\n        }\n      } catch (error) {\n        console.error('Failed to fetch initial data:', error);\n        dispatch(setError('Failed to fetch initial data'));\n      }\n    };\n\n    fetchInitialData();\n  }, [dispatch]); // Only run once on mount, but include dispatch in dependencies\n\n  // Connect to WebSocket\n  const connectToWebSocket = useCallback(async (channelId: string) => {\n    try {\n      await wsService.connect(parseInt(channelId));\n    } catch (error) {\n      console.error('[WebSocket] Connection failed:', error);\n      dispatch(setError('Failed to connect to chat'));\n    }\n  }, [dispatch]);\n\n  // Handle WebSocket messages\n  const handleWebSocketMessage = useCallback((message: WebSocketMessage) => {\n    console.log('MainLayout received WebSocket message:', message);\n\n    // Helper function to check if message belongs to current channel\n    const isMessageForCurrentChannel = (msg: WebSocketMessage): boolean => {\n      if (msg.data?.channel_id) {\n        const channelId = msg.data.channel_id.toString();\n        console.log('Message channel ID:', channelId, 'Active channel ID:', activeChannelId);\n        return channelId === activeChannelId;\n      }\n      return true; // For other message types like user_status\n    };\n\n    // Skip messages not meant for current channel\n    if (!isMessageForCurrentChannel(message)) {\n      console.log('Ignoring message from different channel');\n      return;\n    }\n\n    // Log the message type and content for debugging\n    console.log('Processing message type:', message.type);\n    if (message.data) {\n      console.log('Message data:', message.data);\n    }\n\n    try {\n      switch (message.type) {\n        case 'channel_created':\n        case 'channel_updated':\n          if (message.data?.message) {\n            console.log('Adding/updating channel:', message.data.message);\n            dispatch(addChannel(message.data.message as unknown as Channel));\n          }\n          break;\n\n        case 'channel_deleted':\n          if (message.data?.channel_id) {\n            const channelId = message.data.channel_id.toString();\n            console.log('Removing channel:', channelId);\n            dispatch(removeChannel(channelId));\n            if (channelId === activeChannelId && channels.length > 0) {\n              const firstChannel = channels.find((ch: Channel) => ch.id !== channelId);\n              if (firstChannel) {\n                handleChannelSelect(firstChannel.id);\n              }\n            }\n          }\n          break;\n\n        case 'unread_count_updated':\n          if (message.data?.channel_id && typeof message.data.count === 'number') {\n            console.log('Updating unread count:', message.data.channel_id, message.data.count);\n            dispatch(updateChannelUnreadCount({\n              channelId: message.data.channel_id.toString(),\n              count: message.data.count\n            }));\n          }\n          break;\n\n        case 'user_status':\n          if (message.data?.user_id && message.data.status) {\n            console.log('Updating user status:', message.data.user_id, message.data.status);\n            dispatch(updateUserStatus({\n              userId: message.data.user_id.toString(),\n              status: message.data.status as UserStatus\n            }));\n          }\n          break;\n\n        case 'message':\n        case 'message_sent':\n        case 'message_updated':\n          if (message.data?.message) {\n            console.log('Processing message:', message);\n            const transformedMessage = transformMessage(message.data.message as RawMessage);\n            console.log('Transformed message:', transformedMessage);\n            \n            if (message.type === 'message_updated') {\n              dispatch(updateMessage({\n                channelId: transformedMessage.channelId,\n                id: transformedMessage.id,\n                message: transformedMessage\n              }));\n            } else {\n              dispatch(addMessage({\n                channelId: transformedMessage.channelId,\n                message: transformedMessage\n              }));\n\n              // Auto-scroll to bottom for new messages\n              requestAnimationFrame(() => {\n                if (messageListRef.current) {\n                  messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n                }\n              });\n            }\n          }\n          break;\n\n        case 'new_reply':\n          if (message.data?.message && message.data.message.parent_id) {\n            console.log('Processing reply:', message);\n            const transformedReply = transformMessage(message.data.message as RawMessage);\n            console.log('Transformed reply:', transformedReply);\n            \n            dispatch(setReplies({\n              channelId: transformedReply.channelId,\n              messageId: message.data.message.parent_id.toString(),\n              replies: [transformedReply]\n            }));\n          }\n          break;\n\n        case 'message_deleted':\n          if (message.data?.channel_id && message.data.message_id) {\n            console.log('Deleting message:', message.data.channel_id, message.data.message_id);\n            dispatch(deleteMessage({\n              channelId: message.data.channel_id.toString(),\n              messageId: message.data.message_id.toString()\n            }));\n          }\n          break;\n\n        case 'error':\n          if (message.message) {\n            console.error('WebSocket error:', message.message);\n            dispatch(setError(`WebSocket error: ${message.message}`));\n          }\n          break;\n\n        default:\n          console.warn('Unknown message type:', message.type);\n          break;\n      }\n    } catch (error) {\n      console.error('Error processing WebSocket message:', error);\n      dispatch(setError('Error processing message from server'));\n    }\n  }, [dispatch, messageListRef]);\n\n  // Handle connection errors\n  const handleConnectionError = useCallback((error: Error) => {\n    console.error('WebSocket connection error:', error);\n    dispatch(setError('Lost connection to chat server. Attempting to reconnect...'));\n  }, [dispatch]);\n\n  // Handle channel selection\n  const handleChannelSelect = useCallback(async (channelId: string) => {\n    try {\n      // First disconnect from current channel\n      console.log('[DEBUG] Disconnecting from current WebSocket');\n      wsService.disconnect();\n\n      // Set the active channel and clear messages\n      dispatch(setActiveChannel(channelId));\n      dispatch(clearMessages());\n\n      // Connect to new channel\n      await connectToWebSocket(channelId);\n    } catch (error) {\n      console.error('Error switching channels:', error);\n      dispatch(setError('Failed to switch channels'));\n    }\n  }, [dispatch, connectToWebSocket]);\n\n  // Set up WebSocket handlers\n  useEffect(() => {\n    if (!activeChannelId) return;\n\n    const handleConnectionStatus = () => {\n      const status = wsService.getChatSocketState();\n      if (status === WebSocket.OPEN) {\n        dispatch(setError(null));\n      }\n    };\n\n    console.log('Setting up WebSocket handlers for channel:', activeChannelId);\n    const unsubscribeMessage = wsService.onMessage('chat', handleWebSocketMessage);\n    const unsubscribeError = wsService.onError('chat', handleConnectionError);\n\n    // Check connection status periodically\n    const statusInterval = setInterval(handleConnectionStatus, 5000);\n\n    // Initial connection\n    connectToWebSocket(activeChannelId);\n\n    return () => {\n      console.log('Cleaning up WebSocket handlers for channel:', activeChannelId);\n      clearInterval(statusInterval);\n      unsubscribeMessage();\n      unsubscribeError();\n      wsService.disconnect();\n    };\n  }, [activeChannelId, handleWebSocketMessage, handleConnectionError, connectToWebSocket, dispatch]);\n\n  // Handle search\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults(null);\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError(undefined);\n\n    try {\n      const results = await searchAll(query);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchError('Failed to perform search');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Handle message selection from search results\n  const handleSelectMessage = async (channelId: string, messageId: string) => {\n    try {\n      if (channelId !== activeChannelId) {\n        dispatch(setMessages({ channelId, messages: [] }));\n        dispatch(setActiveChannel(channelId));\n      }\n\n      setSelectedMessageId(messageId);\n      setSearchResults(null);\n\n      const scrollToMessage = () => {\n        const messageElement = document.getElementById(`message-${messageId}`);\n        if (messageElement) {\n          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          messageElement.classList.add('highlight');\n          setTimeout(() => messageElement.classList.remove('highlight'), 2000);\n        } else {\n          requestAnimationFrame(scrollToMessage);\n        }\n      };\n      requestAnimationFrame(scrollToMessage);\n    } catch (error) {\n      console.error('Error navigating to message:', error);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  // Sort and group channels\n  const sortedChannels = [...channels].sort((a: Channel, b: Channel) => {\n    // Sort by public/private first\n    if (a.is_public !== b.is_public) {\n      return a.is_public ? -1 : 1;\n    }\n    // Then sort by name\n    return a.name.localeCompare(b.name);\n  });\n\n  const publicChannels = sortedChannels.filter((channel: Channel) => channel.is_public && !channel.is_direct_message);\n  const privateChannels = sortedChannels.filter((channel: Channel) => !channel.is_public && !channel.is_direct_message);\n  const directMessages = sortedChannels.filter((channel: Channel) => channel.is_direct_message);\n\n  return (\n    <MainContainer>\n      <Sidebar>\n        <ChannelList>\n          <ChannelHeader>\n            <h2>Channels</h2>\n            <CreateChannelButton\n              variant=\"secondary\"\n              size=\"small\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              +New\n            </CreateChannelButton>\n          </ChannelHeader>\n\n          {publicChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Public Channels</GroupTitle>\n              {publicChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {privateChannels.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Private Channels</GroupTitle>\n              {privateChannels.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n\n          {directMessages.length > 0 && (\n            <ChannelGroup>\n              <GroupTitle>Direct Messages</GroupTitle>\n              {directMessages.map((channel: Channel) => (\n                <ChannelListItem\n                  key={channel.id}\n                  name={channel.name}\n                  isActive={channel.id === activeChannelId}\n                  hasUnread={channel.unreadCount > 0}\n                  isDirect={channel.is_direct_message}\n                  isPublic={channel.is_public}\n                  onClick={() => handleChannelSelect(channel.id)}\n                />\n              ))}\n            </ChannelGroup>\n          )}\n        </ChannelList>\n        <UserList>\n          <h2>Online Users</h2>\n          {Object.values(users).map((user: User) => (\n            <UserListItem\n              key={user.id}\n              username={user.username}\n              status={user.status}\n            />\n          ))}\n        </UserList>\n      </Sidebar>\n      <ChatArea>\n        <ChatHeader>\n          <h1>{activeChannel?.name || 'Select a Channel'}</h1>\n          <ChannelActions>\n            <SearchContainer>\n              <SearchBar \n                onSearch={handleSearch}\n                placeholder=\"Search messages, files, and channels...\"\n              />\n              {searchResults && (\n                <SearchResults\n                  results={searchResults}\n                  isLoading={isSearching}\n                  onClose={() => setSearchResults(null)}\n                  onSelectChannel={(channelId) => {\n                    dispatch(setActiveChannel(channelId));\n                    setSearchResults(null);\n                  }}\n                  onSelectMessage={handleSelectMessage}\n                  onSelectFile={(fileId) => {\n                    // TODO: Implement file selection\n                    console.log('Selected file:', fileId);\n                    setSearchResults(null);\n                  }}\n                />\n              )}\n            </SearchContainer>\n            {activeChannel && !activeChannel.is_direct_message && (\n              <SettingsButton onClick={() => setIsSettingsOpen(true)}>\n                Settings\n              </SettingsButton>\n            )}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </ChannelActions>\n        </ChatHeader>\n        \n        <MessageList\n          ref={messageListRef}\n          messages={channelMessages}\n          selectedMessageId={selectedMessageId}\n        />\n        \n        <ChatInput>\n          <MessageInput\n            channelId={activeChannelId}\n          />\n        </ChatInput>\n      </ChatArea>\n\n      {isCreateModalOpen && (\n        <CreateChannelModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n        />\n      )}\n\n      {isSettingsOpen && activeChannel && (\n        <ChannelSettings\n          isOpen={isSettingsOpen}\n          channel={activeChannel}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainLayout; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAChF,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,MAAM,QAAQ,+BAA+B;AACtD,SACEC,gBAAgB,EAChBC,WAAW,EACXC,QAAQ,EACRC,gBAAgB,EAChBC,UAAU,EACVC,aAAa,EACbC,wBAAwB,EACxBC,QAAQ,QACH,+BAA+B;AACtC,SACEC,UAAU,EACVC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,aAAa,QACR,uCAAuC;AAC9C,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,eAAe,MAAM,4BAA4B;AACxD,OAAOC,kBAAkB,MAAM,+BAA+B;AAC9D,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,SAASC,WAAW,EAAEC,eAAe,QAAqD,4BAA4B;AACtH,SAASC,SAAS,QAAQ,8BAA8B;AAYxD,OAAOC,eAAe,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIzD,MAAMC,aAAa,GAAGjC,MAAM,CAACkC,GAAG;AAChC;AACA;AACA,sBAAsBC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,UAAU;AAC5D,WAAWH,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACE,IAAI;AAC3C;AACA,CAAC;AAACC,EAAA,GANIP,aAAa;AAQnB,MAAMQ,OAAO,GAAGzC,MAAM,CAACkC,GAAG;AAC1B;AACA,4BAA4BC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACK,MAAM;AAC9D;AACA;AACA,CAAC;AAACC,GAAA,GALIF,OAAO;AAOb,MAAMG,WAAW,GAAG5C,MAAM,CAACkC,GAAG;AAC9B;AACA;AACA,6BAA6BC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACK,MAAM;AAC/D;AACA;AACA;AACA;AACA;AACA,aAAaP,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACQ,OAAO;AAChD;AACA,CAAC;AAACC,GAAA,GAXIF,WAAW;AAajB,MAAMG,QAAQ,GAAG/C,MAAM,CAACkC,GAAG;AAC3B;AACA;AACA,0BAA0BC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACK,MAAM;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAaP,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACQ,OAAO;AAChD;AACA,CAAC;AAACG,GAAA,GAXID,QAAQ;AAad,MAAME,QAAQ,GAAGjD,MAAM,CAACkC,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACgB,GAAA,GANID,QAAQ;AAQd,MAAME,UAAU,GAAGnD,MAAM,CAACkC,GAAG;AAC7B;AACA,6BAA6BC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACK,MAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACU,GAAA,GAXID,UAAU;AAahB,MAAME,SAAS,GAAGrD,MAAM,CAACkC,GAAG;AAC5B,0BAA0BC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACK,MAAM;AAC5D,CAAC;AAACY,GAAA,GAFID,SAAS;AAIf,MAAME,YAAY,GAAGvD,MAAM,CAACwD,MAAM;AAClC;AACA,sBAAsBrB,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACoB,KAAK;AACvD,WAAWtB,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACoB,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBtB,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACoB,KAAK;AACnD,aAAatB,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,UAAU;AACnD;AACA,CAAC;AAACoB,GAAA,GAbIH,YAAY;AAelB,MAAMI,aAAa,GAAG3D,MAAM,CAACkC,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACQ,OAAO;AAChD;AACA,CAAC;AAACe,GAAA,GAXID,aAAa;AAanB,MAAME,mBAAmB,GAAG7D,MAAM,CAACkB,MAAM,CAAC;AAC1C;AACA;AACA,CAAC;AAAC4C,IAAA,GAHID,mBAAmB;AAKzB,MAAME,YAAY,GAAG/D,MAAM,CAACkC,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC8B,IAAA,GANID,YAAY;AAQlB,MAAME,UAAU,GAAGjE,MAAM,CAACkE,EAAE;AAC5B;AACA;AACA;AACA;AACA,WAAW/B,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAAC8B,SAAS;AAChD,6BAA6BhC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACK,MAAM;AAC/D;AACA,CAAC;AAAC0B,IAAA,GARIH,UAAU;AAUhB,MAAMI,cAAc,GAAGrE,MAAM,CAACkC,GAAG;AACjC;AACA;AACA,CAAC;AAACoC,IAAA,GAHID,cAAc;AAKpB,MAAME,cAAc,GAAGvE,MAAM,CAACkB,MAAM,CAAC;AACrC;AACA;AACA,CAAC;AAACsD,IAAA,GAHID,cAAc;AAKpB,MAAME,eAAe,GAAGzE,MAAM,CAACkC,GAAG;AAClC;AACA;AACA,CAAC;AAACwC,IAAA,GAHID,eAAe;AAKrB,MAAME,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAG5E,WAAW,CAAc,CAAC;EAC3C,MAAM,CAAC6E,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnF,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACoF,cAAc,EAAEC,iBAAiB,CAAC,GAAGrF,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACsF,YAAY,EAAEC,eAAe,CAAC,GAAGvF,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACwF,WAAW,EAAEC,cAAc,CAAC,GAAGzF,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC0F,aAAa,EAAEC,gBAAgB,CAAC,GAAG3F,QAAQ,CAAsB,IAAI,CAAC;EAC7E,MAAM,CAAC4F,WAAW,EAAEC,cAAc,CAAC,GAAG7F,QAAQ,CAAqB,CAAC;EACpE,MAAM8F,cAAc,GAAG7F,MAAM,CAAiB,IAAI,CAAC;EACnD,MAAM,CAAC8F,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhG,QAAQ,CAAgB,IAAI,CAAC;EAC/E,MAAMiG,kBAAkB,GAAGhG,MAAM,CAAU,KAAK,CAAC;;EAEjD;EACA,MAAM;IAAEiG,QAAQ;IAAEC,eAAe;IAAEC;EAAM,CAAC,GAAG9F,WAAW,CAAE+F,KAAgB,KAAM;IAC9EH,QAAQ,EAAEG,KAAK,CAACC,IAAI,CAACJ,QAAQ;IAC7BC,eAAe,EAAEE,KAAK,CAACC,IAAI,CAACH,eAAe;IAC3CC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAACF;EACpB,CAAC,CAAC,EAAE,CAACG,IAAI,EAAEC,IAAI,KAAK;IAClB,OAAOD,IAAI,CAACL,QAAQ,KAAKM,IAAI,CAACN,QAAQ,IAC/BK,IAAI,CAACJ,eAAe,KAAKK,IAAI,CAACL,eAAe,IAC7CI,IAAI,CAACH,KAAK,KAAKI,IAAI,CAACJ,KAAK;EAClC,CAAC,CAAC;EAEF,MAAMK,aAAa,GAAGtG,OAAO,CAAC,MAC5B+F,QAAQ,CAACQ,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKT,eAAe,CAAC,EACxD,CAACD,QAAQ,EAAEC,eAAe,CAC5B,CAAC;EAED,MAAMU,eAAe,GAAGvG,WAAW,CAAE+F,KAAgB,IAAK;IACxD,OAAOA,KAAK,CAACS,QAAQ,CAACC,iBAAiB,CAACZ,eAAe,IAAI,EAAE,CAAC,IAAI,EAAE;EACtE,CAAC,EAAE,CAACI,IAAI,EAAEC,IAAI,KAAKD,IAAI,KAAKC,IAAI,CAAC;;EAEjC;EACA,MAAMQ,yBAAyB,GAAG9G,WAAW,CAAE4G,QAAmB,IAAqB;IACrF,OAAOA,QAAQ,CAACG,GAAG,CAACC,GAAG,IAAI7F,gBAAgB,CAAC6F,GAAG,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAnH,SAAS,CAAC,MAAM;IACd,MAAMoH,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvC,MAAMC,eAAe,GAAG,MAAMvF,WAAW,CAAC,CAAC;QAC3CkD,QAAQ,CAACxE,WAAW,CAAC6G,eAAe,CAAC,CAAC;QAEtC,IAAIA,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;UAC9B,MAAMC,cAAc,GAAGF,eAAe,CAAC,CAAC,CAAC,CAACV,EAAE;UAC5C,MAAMa,YAAY,GAAG,MAAMzF,eAAe,CAACwF,cAAc,CAAC;UAC1D,MAAME,WAAW,GAAGD,YAAY,CAACE,MAAM,CAA0B,CAACC,GAAG,EAAEC,IAAI,MAAM;YAC/E,GAAGD,GAAG;YACN,CAACC,IAAI,CAACjB,EAAE,GAAGiB;UACb,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UACP5C,QAAQ,CAACvE,QAAQ,CAACgH,WAAW,CAAC,CAAC;UAC/BzC,QAAQ,CAACzE,gBAAgB,CAACgH,cAAc,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC,OAAO3D,KAAK,EAAE;QACduD,OAAO,CAACvD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDoB,QAAQ,CAAClE,QAAQ,CAAC,8BAA8B,CAAC,CAAC;MACpD;IACF,CAAC;IAEDoG,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAAClC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACA,MAAM6C,kBAAkB,GAAG5H,WAAW,CAAC,MAAO6H,SAAiB,IAAK;IAClE,IAAI;MACF,MAAMjG,SAAS,CAACkG,OAAO,CAACC,QAAQ,CAACF,SAAS,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAOlE,KAAK,EAAE;MACduD,OAAO,CAACvD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDoB,QAAQ,CAAClE,QAAQ,CAAC,2BAA2B,CAAC,CAAC;IACjD;EACF,CAAC,EAAE,CAACkE,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMiD,sBAAsB,GAAGhI,WAAW,CAAEiI,OAAyB,IAAK;IAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,cAAA,EAAAC,cAAA,EAAAC,cAAA,EAAAC,cAAA,EAAAC,cAAA;IACxEtB,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEc,OAAO,CAAC;;IAE9D;IACA,MAAMQ,0BAA0B,GAAIzB,GAAqB,IAAc;MAAA,IAAA0B,SAAA;MACrE,KAAAA,SAAA,GAAI1B,GAAG,CAAC2B,IAAI,cAAAD,SAAA,eAARA,SAAA,CAAUE,UAAU,EAAE;QACxB,MAAMf,SAAS,GAAGb,GAAG,CAAC2B,IAAI,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC;QAChD3B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEU,SAAS,EAAE,oBAAoB,EAAE5B,eAAe,CAAC;QACpF,OAAO4B,SAAS,KAAK5B,eAAe;MACtC;MACA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC;;IAED;IACA,IAAI,CAACwC,0BAA0B,CAACR,OAAO,CAAC,EAAE;MACxCf,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD;IACF;;IAEA;IACAD,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEc,OAAO,CAACa,IAAI,CAAC;IACrD,IAAIb,OAAO,CAACU,IAAI,EAAE;MAChBzB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEc,OAAO,CAACU,IAAI,CAAC;IAC5C;IAEA,IAAI;MACF,QAAQV,OAAO,CAACa,IAAI;QAClB,KAAK,iBAAiB;QACtB,KAAK,iBAAiB;UACpB,KAAAZ,aAAA,GAAID,OAAO,CAACU,IAAI,cAAAT,aAAA,eAAZA,aAAA,CAAcD,OAAO,EAAE;YACzBf,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEc,OAAO,CAACU,IAAI,CAACV,OAAO,CAAC;YAC7DlD,QAAQ,CAACrE,UAAU,CAACuH,OAAO,CAACU,IAAI,CAACV,OAA6B,CAAC,CAAC;UAClE;UACA;QAEF,KAAK,iBAAiB;UACpB,KAAAE,cAAA,GAAIF,OAAO,CAACU,IAAI,cAAAR,cAAA,eAAZA,cAAA,CAAcS,UAAU,EAAE;YAC5B,MAAMf,SAAS,GAAGI,OAAO,CAACU,IAAI,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC;YACpD3B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEU,SAAS,CAAC;YAC3C9C,QAAQ,CAACpE,aAAa,CAACkH,SAAS,CAAC,CAAC;YAClC,IAAIA,SAAS,KAAK5B,eAAe,IAAID,QAAQ,CAACqB,MAAM,GAAG,CAAC,EAAE;cACxD,MAAM0B,YAAY,GAAG/C,QAAQ,CAACQ,IAAI,CAAEwC,EAAW,IAAKA,EAAE,CAACtC,EAAE,KAAKmB,SAAS,CAAC;cACxE,IAAIkB,YAAY,EAAE;gBAChBE,mBAAmB,CAACF,YAAY,CAACrC,EAAE,CAAC;cACtC;YACF;UACF;UACA;QAEF,KAAK,sBAAsB;UACzB,IAAI,CAAA0B,cAAA,GAAAH,OAAO,CAACU,IAAI,cAAAP,cAAA,eAAZA,cAAA,CAAcQ,UAAU,IAAI,OAAOX,OAAO,CAACU,IAAI,CAACO,KAAK,KAAK,QAAQ,EAAE;YACtEhC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEc,OAAO,CAACU,IAAI,CAACC,UAAU,EAAEX,OAAO,CAACU,IAAI,CAACO,KAAK,CAAC;YAClFnE,QAAQ,CAACnE,wBAAwB,CAAC;cAChCiH,SAAS,EAAEI,OAAO,CAACU,IAAI,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC;cAC7CK,KAAK,EAAEjB,OAAO,CAACU,IAAI,CAACO;YACtB,CAAC,CAAC,CAAC;UACL;UACA;QAEF,KAAK,aAAa;UAChB,IAAI,CAAAb,cAAA,GAAAJ,OAAO,CAACU,IAAI,cAAAN,cAAA,eAAZA,cAAA,CAAcc,OAAO,IAAIlB,OAAO,CAACU,IAAI,CAACS,MAAM,EAAE;YAChDlC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEc,OAAO,CAACU,IAAI,CAACQ,OAAO,EAAElB,OAAO,CAACU,IAAI,CAACS,MAAM,CAAC;YAC/ErE,QAAQ,CAACtE,gBAAgB,CAAC;cACxB4I,MAAM,EAAEpB,OAAO,CAACU,IAAI,CAACQ,OAAO,CAACN,QAAQ,CAAC,CAAC;cACvCO,MAAM,EAAEnB,OAAO,CAACU,IAAI,CAACS;YACvB,CAAC,CAAC,CAAC;UACL;UACA;QAEF,KAAK,SAAS;QACd,KAAK,cAAc;QACnB,KAAK,iBAAiB;UACpB,KAAAd,cAAA,GAAIL,OAAO,CAACU,IAAI,cAAAL,cAAA,eAAZA,cAAA,CAAcL,OAAO,EAAE;YACzBf,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEc,OAAO,CAAC;YAC3C,MAAMqB,kBAAkB,GAAGnI,gBAAgB,CAAC8G,OAAO,CAACU,IAAI,CAACV,OAAqB,CAAC;YAC/Ef,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEmC,kBAAkB,CAAC;YAEvD,IAAIrB,OAAO,CAACa,IAAI,KAAK,iBAAiB,EAAE;cACtC/D,QAAQ,CAAC7D,aAAa,CAAC;gBACrB2G,SAAS,EAAEyB,kBAAkB,CAACzB,SAAS;gBACvCnB,EAAE,EAAE4C,kBAAkB,CAAC5C,EAAE;gBACzBuB,OAAO,EAAEqB;cACX,CAAC,CAAC,CAAC;YACL,CAAC,MAAM;cACLvE,QAAQ,CAACjE,UAAU,CAAC;gBAClB+G,SAAS,EAAEyB,kBAAkB,CAACzB,SAAS;gBACvCI,OAAO,EAAEqB;cACX,CAAC,CAAC,CAAC;;cAEH;cACAC,qBAAqB,CAAC,MAAM;gBAC1B,IAAI3D,cAAc,CAAC4D,OAAO,EAAE;kBAC1B5D,cAAc,CAAC4D,OAAO,CAACC,SAAS,GAAG7D,cAAc,CAAC4D,OAAO,CAACE,YAAY;gBACxE;cACF,CAAC,CAAC;YACJ;UACF;UACA;QAEF,KAAK,WAAW;UACd,IAAI,CAAAnB,cAAA,GAAAN,OAAO,CAACU,IAAI,cAAAJ,cAAA,eAAZA,cAAA,CAAcN,OAAO,IAAIA,OAAO,CAACU,IAAI,CAACV,OAAO,CAAC0B,SAAS,EAAE;YAC3DzC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,OAAO,CAAC;YACzC,MAAM2B,gBAAgB,GAAGzI,gBAAgB,CAAC8G,OAAO,CAACU,IAAI,CAACV,OAAqB,CAAC;YAC7Ef,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEyC,gBAAgB,CAAC;YAEnD7E,QAAQ,CAAC/D,UAAU,CAAC;cAClB6G,SAAS,EAAE+B,gBAAgB,CAAC/B,SAAS;cACrCgC,SAAS,EAAE5B,OAAO,CAACU,IAAI,CAACV,OAAO,CAAC0B,SAAS,CAACd,QAAQ,CAAC,CAAC;cACpDiB,OAAO,EAAE,CAACF,gBAAgB;YAC5B,CAAC,CAAC,CAAC;UACL;UACA;QAEF,KAAK,iBAAiB;UACpB,IAAI,CAAApB,cAAA,GAAAP,OAAO,CAACU,IAAI,cAAAH,cAAA,eAAZA,cAAA,CAAcI,UAAU,IAAIX,OAAO,CAACU,IAAI,CAACoB,UAAU,EAAE;YACvD7C,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,OAAO,CAACU,IAAI,CAACC,UAAU,EAAEX,OAAO,CAACU,IAAI,CAACoB,UAAU,CAAC;YAClFhF,QAAQ,CAAC9D,aAAa,CAAC;cACrB4G,SAAS,EAAEI,OAAO,CAACU,IAAI,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC;cAC7CgB,SAAS,EAAE5B,OAAO,CAACU,IAAI,CAACoB,UAAU,CAAClB,QAAQ,CAAC;YAC9C,CAAC,CAAC,CAAC;UACL;UACA;QAEF,KAAK,OAAO;UACV,IAAIZ,OAAO,CAACA,OAAO,EAAE;YACnBf,OAAO,CAACvD,KAAK,CAAC,kBAAkB,EAAEsE,OAAO,CAACA,OAAO,CAAC;YAClDlD,QAAQ,CAAClE,QAAQ,CAAC,oBAAoBoH,OAAO,CAACA,OAAO,EAAE,CAAC,CAAC;UAC3D;UACA;QAEF;UACEf,OAAO,CAAC8C,IAAI,CAAC,uBAAuB,EAAE/B,OAAO,CAACa,IAAI,CAAC;UACnD;MACJ;IACF,CAAC,CAAC,OAAOnF,KAAK,EAAE;MACduD,OAAO,CAACvD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DoB,QAAQ,CAAClE,QAAQ,CAAC,sCAAsC,CAAC,CAAC;IAC5D;EACF,CAAC,EAAE,CAACkE,QAAQ,EAAEa,cAAc,CAAC,CAAC;;EAE9B;EACA,MAAMqE,qBAAqB,GAAGjK,WAAW,CAAE2D,KAAY,IAAK;IAC1DuD,OAAO,CAACvD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnDoB,QAAQ,CAAClE,QAAQ,CAAC,4DAA4D,CAAC,CAAC;EAClF,CAAC,EAAE,CAACkE,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMkE,mBAAmB,GAAGjJ,WAAW,CAAC,MAAO6H,SAAiB,IAAK;IACnE,IAAI;MACF;MACAX,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3DvF,SAAS,CAACsI,UAAU,CAAC,CAAC;;MAEtB;MACAnF,QAAQ,CAACzE,gBAAgB,CAACuH,SAAS,CAAC,CAAC;MACrC9C,QAAQ,CAACoF,aAAa,CAAC,CAAC,CAAC;;MAEzB;MACA,MAAMvC,kBAAkB,CAACC,SAAS,CAAC;IACrC,CAAC,CAAC,OAAOlE,KAAK,EAAE;MACduD,OAAO,CAACvD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDoB,QAAQ,CAAClE,QAAQ,CAAC,2BAA2B,CAAC,CAAC;IACjD;EACF,CAAC,EAAE,CAACkE,QAAQ,EAAE6C,kBAAkB,CAAC,CAAC;;EAElC;EACA/H,SAAS,CAAC,MAAM;IACd,IAAI,CAACoG,eAAe,EAAE;IAEtB,MAAMmE,sBAAsB,GAAGA,CAAA,KAAM;MACnC,MAAMhB,MAAM,GAAGxH,SAAS,CAACyI,kBAAkB,CAAC,CAAC;MAC7C,IAAIjB,MAAM,KAAKkB,SAAS,CAACC,IAAI,EAAE;QAC7BxF,QAAQ,CAAClE,QAAQ,CAAC,IAAI,CAAC,CAAC;MAC1B;IACF,CAAC;IAEDqG,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAElB,eAAe,CAAC;IAC1E,MAAMuE,kBAAkB,GAAG5I,SAAS,CAAC6I,SAAS,CAAC,MAAM,EAAEzC,sBAAsB,CAAC;IAC9E,MAAM0C,gBAAgB,GAAG9I,SAAS,CAAC+I,OAAO,CAAC,MAAM,EAAEV,qBAAqB,CAAC;;IAEzE;IACA,MAAMW,cAAc,GAAGC,WAAW,CAACT,sBAAsB,EAAE,IAAI,CAAC;;IAEhE;IACAxC,kBAAkB,CAAC3B,eAAe,CAAC;IAEnC,OAAO,MAAM;MACXiB,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAElB,eAAe,CAAC;MAC3E6E,aAAa,CAACF,cAAc,CAAC;MAC7BJ,kBAAkB,CAAC,CAAC;MACpBE,gBAAgB,CAAC,CAAC;MAClB9I,SAAS,CAACsI,UAAU,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACjE,eAAe,EAAE+B,sBAAsB,EAAEiC,qBAAqB,EAAErC,kBAAkB,EAAE7C,QAAQ,CAAC,CAAC;;EAElG;EACA,MAAMgG,YAAY,GAAG,MAAOC,KAAa,IAAK;IAC5C,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;MACjBxF,gBAAgB,CAAC,IAAI,CAAC;MACtB;IACF;IAEAF,cAAc,CAAC,IAAI,CAAC;IACpBI,cAAc,CAACuF,SAAS,CAAC;IAEzB,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMpJ,SAAS,CAACiJ,KAAK,CAAC;MACtCvF,gBAAgB,CAAC0F,OAAO,CAAC;IAC3B,CAAC,CAAC,OAAOxH,KAAK,EAAE;MACduD,OAAO,CAACvD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCgC,cAAc,CAAC,0BAA0B,CAAC;IAC5C,CAAC,SAAS;MACRJ,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAM6F,mBAAmB,GAAG,MAAAA,CAAOvD,SAAiB,EAAEgC,SAAiB,KAAK;IAC1E,IAAI;MACF,IAAIhC,SAAS,KAAK5B,eAAe,EAAE;QACjClB,QAAQ,CAAChE,WAAW,CAAC;UAAE8G,SAAS;UAAEjB,QAAQ,EAAE;QAAG,CAAC,CAAC,CAAC;QAClD7B,QAAQ,CAACzE,gBAAgB,CAACuH,SAAS,CAAC,CAAC;MACvC;MAEA/B,oBAAoB,CAAC+D,SAAS,CAAC;MAC/BpE,gBAAgB,CAAC,IAAI,CAAC;MAEtB,MAAM4F,eAAe,GAAGA,CAAA,KAAM;QAC5B,MAAMC,cAAc,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW3B,SAAS,EAAE,CAAC;QACtE,IAAIyB,cAAc,EAAE;UAClBA,cAAc,CAACG,cAAc,CAAC;YAAEC,QAAQ,EAAE,QAAQ;YAAEC,KAAK,EAAE;UAAS,CAAC,CAAC;UACtEL,cAAc,CAACM,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;UACzCC,UAAU,CAAC,MAAMR,cAAc,CAACM,SAAS,CAACG,MAAM,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC;QACtE,CAAC,MAAM;UACLxC,qBAAqB,CAAC8B,eAAe,CAAC;QACxC;MACF,CAAC;MACD9B,qBAAqB,CAAC8B,eAAe,CAAC;IACxC,CAAC,CAAC,OAAO1H,KAAK,EAAE;MACduD,OAAO,CAACvD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAMqI,YAAY,GAAGA,CAAA,KAAM;IACzBjH,QAAQ,CAAC1E,MAAM,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAM4L,cAAc,GAAG,CAAC,GAAGjG,QAAQ,CAAC,CAACkG,IAAI,CAAC,CAACC,CAAU,EAAEC,CAAU,KAAK;IACpE;IACA,IAAID,CAAC,CAACE,SAAS,KAAKD,CAAC,CAACC,SAAS,EAAE;MAC/B,OAAOF,CAAC,CAACE,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC;IAC7B;IACA;IACA,OAAOF,CAAC,CAACG,IAAI,CAACC,aAAa,CAACH,CAAC,CAACE,IAAI,CAAC;EACrC,CAAC,CAAC;EAEF,MAAME,cAAc,GAAGP,cAAc,CAACQ,MAAM,CAAEhG,OAAgB,IAAKA,OAAO,CAAC4F,SAAS,IAAI,CAAC5F,OAAO,CAACiG,iBAAiB,CAAC;EACnH,MAAMC,eAAe,GAAGV,cAAc,CAACQ,MAAM,CAAEhG,OAAgB,IAAK,CAACA,OAAO,CAAC4F,SAAS,IAAI,CAAC5F,OAAO,CAACiG,iBAAiB,CAAC;EACrH,MAAME,cAAc,GAAGX,cAAc,CAACQ,MAAM,CAAEhG,OAAgB,IAAKA,OAAO,CAACiG,iBAAiB,CAAC;EAE7F,oBACExK,OAAA,CAACC,aAAa;IAAA0K,QAAA,gBACZ3K,OAAA,CAACS,OAAO;MAAAkK,QAAA,gBACN3K,OAAA,CAACY,WAAW;QAAA+J,QAAA,gBACV3K,OAAA,CAAC2B,aAAa;UAAAgJ,QAAA,gBACZ3K,OAAA;YAAA2K,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjB/K,OAAA,CAAC6B,mBAAmB;YAClBmJ,OAAO,EAAC,WAAW;YACnBC,IAAI,EAAC,OAAO;YACZC,OAAO,EAAEA,CAAA,KAAMnI,oBAAoB,CAAC,IAAI,CAAE;YAAA4H,QAAA,EAC3C;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,EAEfT,cAAc,CAACnF,MAAM,GAAG,CAAC,iBACxBnF,OAAA,CAAC+B,YAAY;UAAA4I,QAAA,gBACX3K,OAAA,CAACiC,UAAU;YAAA0I,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACvCT,cAAc,CAACzF,GAAG,CAAEN,OAAgB,iBACnCvE,OAAA,CAACZ,eAAe;YAEdgL,IAAI,EAAE7F,OAAO,CAAC6F,IAAK;YACnBe,QAAQ,EAAE5G,OAAO,CAACC,EAAE,KAAKT,eAAgB;YACzCqH,SAAS,EAAE7G,OAAO,CAAC8G,WAAW,GAAG,CAAE;YACnCC,QAAQ,EAAE/G,OAAO,CAACiG,iBAAkB;YACpCe,QAAQ,EAAEhH,OAAO,CAAC4F,SAAU;YAC5Be,OAAO,EAAEA,CAAA,KAAMnE,mBAAmB,CAACxC,OAAO,CAACC,EAAE;UAAE,GAN1CD,OAAO,CAACC,EAAE;YAAAoG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOhB,CACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACU,CACf,EAEAN,eAAe,CAACtF,MAAM,GAAG,CAAC,iBACzBnF,OAAA,CAAC+B,YAAY;UAAA4I,QAAA,gBACX3K,OAAA,CAACiC,UAAU;YAAA0I,QAAA,EAAC;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACxCN,eAAe,CAAC5F,GAAG,CAAEN,OAAgB,iBACpCvE,OAAA,CAACZ,eAAe;YAEdgL,IAAI,EAAE7F,OAAO,CAAC6F,IAAK;YACnBe,QAAQ,EAAE5G,OAAO,CAACC,EAAE,KAAKT,eAAgB;YACzCqH,SAAS,EAAE7G,OAAO,CAAC8G,WAAW,GAAG,CAAE;YACnCC,QAAQ,EAAE/G,OAAO,CAACiG,iBAAkB;YACpCe,QAAQ,EAAEhH,OAAO,CAAC4F,SAAU;YAC5Be,OAAO,EAAEA,CAAA,KAAMnE,mBAAmB,CAACxC,OAAO,CAACC,EAAE;UAAE,GAN1CD,OAAO,CAACC,EAAE;YAAAoG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOhB,CACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACU,CACf,EAEAL,cAAc,CAACvF,MAAM,GAAG,CAAC,iBACxBnF,OAAA,CAAC+B,YAAY;UAAA4I,QAAA,gBACX3K,OAAA,CAACiC,UAAU;YAAA0I,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACvCL,cAAc,CAAC7F,GAAG,CAAEN,OAAgB,iBACnCvE,OAAA,CAACZ,eAAe;YAEdgL,IAAI,EAAE7F,OAAO,CAAC6F,IAAK;YACnBe,QAAQ,EAAE5G,OAAO,CAACC,EAAE,KAAKT,eAAgB;YACzCqH,SAAS,EAAE7G,OAAO,CAAC8G,WAAW,GAAG,CAAE;YACnCC,QAAQ,EAAE/G,OAAO,CAACiG,iBAAkB;YACpCe,QAAQ,EAAEhH,OAAO,CAAC4F,SAAU;YAC5Be,OAAO,EAAEA,CAAA,KAAMnE,mBAAmB,CAACxC,OAAO,CAACC,EAAE;UAAE,GAN1CD,OAAO,CAACC,EAAE;YAAAoG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOhB,CACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACU,CACf;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACU,CAAC,eACd/K,OAAA,CAACe,QAAQ;QAAA4J,QAAA,gBACP3K,OAAA;UAAA2K,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACpBS,MAAM,CAACC,MAAM,CAACzH,KAAK,CAAC,CAACa,GAAG,CAAEY,IAAU,iBACnCzF,OAAA,CAACb,YAAY;UAEXuM,QAAQ,EAAEjG,IAAI,CAACiG,QAAS;UACxBxE,MAAM,EAAEzB,IAAI,CAACyB;QAAO,GAFfzB,IAAI,CAACjB,EAAE;UAAAoG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGb,CACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACV/K,OAAA,CAACiB,QAAQ;MAAA0J,QAAA,gBACP3K,OAAA,CAACmB,UAAU;QAAAwJ,QAAA,gBACT3K,OAAA;UAAA2K,QAAA,EAAK,CAAAtG,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE+F,IAAI,KAAI;QAAkB;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpD/K,OAAA,CAACqC,cAAc;UAAAsI,QAAA,gBACb3K,OAAA,CAACyC,eAAe;YAAAkI,QAAA,gBACd3K,OAAA,CAACR,SAAS;cACRmM,QAAQ,EAAE9C,YAAa;cACvB+C,WAAW,EAAC;YAAyC;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtD,CAAC,EACDzH,aAAa,iBACZtD,OAAA,CAACP,aAAa;cACZwJ,OAAO,EAAE3F,aAAc;cACvBuI,SAAS,EAAEzI,WAAY;cACvB0I,OAAO,EAAEA,CAAA,KAAMvI,gBAAgB,CAAC,IAAI,CAAE;cACtCwI,eAAe,EAAGpG,SAAS,IAAK;gBAC9B9C,QAAQ,CAACzE,gBAAgB,CAACuH,SAAS,CAAC,CAAC;gBACrCpC,gBAAgB,CAAC,IAAI,CAAC;cACxB,CAAE;cACFyI,eAAe,EAAE9C,mBAAoB;cACrC+C,YAAY,EAAGC,MAAM,IAAK;gBACxB;gBACAlH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEiH,MAAM,CAAC;gBACrC3I,gBAAgB,CAAC,IAAI,CAAC;cACxB;YAAE;cAAAqH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACF;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACc,CAAC,EACjB1G,aAAa,IAAI,CAACA,aAAa,CAACmG,iBAAiB,iBAChDxK,OAAA,CAACuC,cAAc;YAAC2I,OAAO,EAAEA,CAAA,KAAMjI,iBAAiB,CAAC,IAAI,CAAE;YAAA0H,QAAA,EAAC;UAExD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAgB,CACjB,eACD/K,OAAA,CAACuB,YAAY;YAAC2J,OAAO,EAAEpB,YAAa;YAAAa,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC,eAEb/K,OAAA,CAACT,WAAW;QACV4M,GAAG,EAAEzI,cAAe;QACpBgB,QAAQ,EAAED,eAAgB;QAC1Bd,iBAAiB,EAAEA;MAAkB;QAAAiH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eAEF/K,OAAA,CAACqB,SAAS;QAAAsJ,QAAA,eACR3K,OAAA,CAACV,YAAY;UACXqG,SAAS,EAAE5B;QAAgB;UAAA6G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,EAEVjI,iBAAiB,iBAChB9C,OAAA,CAACX,kBAAkB;MACjB+M,MAAM,EAAEtJ,iBAAkB;MAC1BgJ,OAAO,EAAEA,CAAA,KAAM/I,oBAAoB,CAAC,KAAK;IAAE;MAAA6H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CACF,EAEA/H,cAAc,IAAIqB,aAAa,iBAC9BrE,OAAA,CAACF,eAAe;MACdsM,MAAM,EAAEpJ,cAAe;MACvBuB,OAAO,EAAEF,aAAc;MACvByH,OAAO,EAAEA,CAAA,KAAM7I,iBAAiB,CAAC,KAAK;IAAE;MAAA2H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAEpB,CAAC;AAACnI,EAAA,CA/dID,UAAoB;EAAA,QACP1E,WAAW,EAYiBC,WAAW,EAehCA,WAAW;AAAA;AAAAmO,IAAA,GA5B/B1J,UAAoB;AAie1B,eAAeA,UAAU;AAAC,IAAAnC,EAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAE,GAAA,EAAAE,IAAA,EAAAE,IAAA,EAAAI,IAAA,EAAAE,IAAA,EAAAE,IAAA,EAAAE,IAAA,EAAA2J,IAAA;AAAAC,YAAA,CAAA9L,EAAA;AAAA8L,YAAA,CAAA3L,GAAA;AAAA2L,YAAA,CAAAxL,GAAA;AAAAwL,YAAA,CAAAtL,GAAA;AAAAsL,YAAA,CAAApL,GAAA;AAAAoL,YAAA,CAAAlL,GAAA;AAAAkL,YAAA,CAAAhL,GAAA;AAAAgL,YAAA,CAAA5K,GAAA;AAAA4K,YAAA,CAAA1K,GAAA;AAAA0K,YAAA,CAAAxK,IAAA;AAAAwK,YAAA,CAAAtK,IAAA;AAAAsK,YAAA,CAAAlK,IAAA;AAAAkK,YAAA,CAAAhK,IAAA;AAAAgK,YAAA,CAAA9J,IAAA;AAAA8J,YAAA,CAAA5J,IAAA;AAAA4J,YAAA,CAAAD,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}