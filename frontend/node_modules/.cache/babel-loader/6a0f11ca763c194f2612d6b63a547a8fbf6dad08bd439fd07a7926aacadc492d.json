{"ast":null,"code":"import { getAuthToken } from '../api/auth';\nconst WS_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\nexport class WebSocketService {\n  // 5 seconds\n\n  constructor() {\n    this.chatSocket = null;\n    this.presenceSocket = null;\n    this.messageHandlers = [];\n    this.presenceHandlers = [];\n    this.reconnectTimeout = null;\n    this.RECONNECT_DELAY = 5000;\n    // Bind methods\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.updateStatus = this.updateStatus.bind(this);\n    this.joinChannel = this.joinChannel.bind(this);\n    this.leaveChannel = this.leaveChannel.bind(this);\n  }\n  connect() {\n    const token = getAuthToken();\n    if (!token) {\n      console.error('No auth token available');\n      return;\n    }\n\n    // Connect to chat WebSocket\n    try {\n      var _this$chatSocket;\n      if (((_this$chatSocket = this.chatSocket) === null || _this$chatSocket === void 0 ? void 0 : _this$chatSocket.readyState) === WebSocket.OPEN) {\n        console.log('Chat WebSocket already connected');\n        return;\n      }\n      console.log('Connecting to chat WebSocket...');\n      this.chatSocket = new WebSocket(`${WS_URL}/chat?token=${encodeURIComponent(token)}`);\n      this.setupWebSocketHandlers(this.chatSocket, 'chat');\n    } catch (error) {\n      console.error('Failed to connect to chat WebSocket:', error);\n    }\n\n    // Connect to presence WebSocket\n    try {\n      var _this$presenceSocket;\n      if (((_this$presenceSocket = this.presenceSocket) === null || _this$presenceSocket === void 0 ? void 0 : _this$presenceSocket.readyState) === WebSocket.OPEN) {\n        console.log('Presence WebSocket already connected');\n        return;\n      }\n      console.log('Connecting to presence WebSocket...');\n      this.presenceSocket = new WebSocket(`${WS_URL}/presence?token=${encodeURIComponent(token)}`);\n      this.setupWebSocketHandlers(this.presenceSocket, 'presence');\n    } catch (error) {\n      console.error('Failed to connect to presence WebSocket:', error);\n    }\n  }\n  setupWebSocketHandlers(socket, type) {\n    socket.onopen = () => {\n      console.log(`${type} WebSocket connected`);\n    };\n    socket.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log(`Received ${type} message:`, message);\n        if (type === 'chat') {\n          this.messageHandlers.forEach(handler => {\n            try {\n              handler(message);\n            } catch (error) {\n              console.error('Error in message handler:', error);\n            }\n          });\n        } else {\n          this.presenceHandlers.forEach(handler => {\n            try {\n              handler(message);\n            } catch (error) {\n              console.error('Error in presence handler:', error);\n            }\n          });\n        }\n      } catch (error) {\n        console.error(`Failed to parse ${type} message:`, error, event.data);\n      }\n    };\n    socket.onclose = event => {\n      console.log(`${type} WebSocket closed with code ${event.code}. Attempting to reconnect...`);\n      if (event.code === 4001) {\n        console.error('Authentication failed. Please log in again.');\n        // Trigger logout or auth refresh here if needed\n        return;\n      }\n      this.scheduleReconnect();\n    };\n    socket.onerror = error => {\n      console.error(`${type} WebSocket error:`, error);\n      this.scheduleReconnect();\n    };\n  }\n  disconnect() {\n    if (this.chatSocket) {\n      this.chatSocket.close();\n      this.chatSocket = null;\n    }\n    if (this.presenceSocket) {\n      this.presenceSocket.close();\n      this.presenceSocket = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n  }\n  sendMessage(channelId, content) {\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\n      var _this$chatSocket2;\n      console.error('Chat WebSocket is not connected. State:', (_this$chatSocket2 = this.chatSocket) === null || _this$chatSocket2 === void 0 ? void 0 : _this$chatSocket2.readyState);\n      return;\n    }\n    if (!channelId || !content.trim()) {\n      console.error('Invalid message parameters:', {\n        channelId,\n        content\n      });\n      return;\n    }\n    const message = {\n      type: 'message',\n      channel_id: channelId,\n      content: content.trim()\n    };\n    try {\n      console.log('Sending WebSocket message:', message);\n      this.chatSocket.send(JSON.stringify(message));\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      // Try to reconnect\n      this.connect();\n    }\n  }\n  updateStatus(status) {\n    if (!this.presenceSocket || this.presenceSocket.readyState !== WebSocket.OPEN) {\n      console.error('Presence WebSocket is not connected');\n      return;\n    }\n    const message = {\n      type: 'status_update',\n      status\n    };\n    this.presenceSocket.send(JSON.stringify(message));\n  }\n  joinChannel(channelId) {\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\n      console.error('Chat WebSocket is not connected');\n      return;\n    }\n    const message = {\n      type: 'join_channel',\n      channel_id: channelId\n    };\n    this.chatSocket.send(JSON.stringify(message));\n  }\n  leaveChannel(channelId) {\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\n      console.error('Chat WebSocket is not connected');\n      return;\n    }\n    const message = {\n      type: 'leave_channel',\n      channel_id: channelId\n    };\n    this.chatSocket.send(JSON.stringify(message));\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onPresence(handler) {\n    this.presenceHandlers.push(handler);\n    return () => {\n      this.presenceHandlers = this.presenceHandlers.filter(h => h !== handler);\n    };\n  }\n  scheduleReconnect() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n    this.reconnectTimeout = setTimeout(() => {\n      console.log('Attempting to reconnect WebSocket...');\n      this.connect();\n    }, this.RECONNECT_DELAY);\n  }\n  getChatSocketState() {\n    var _this$chatSocket$read, _this$chatSocket3;\n    return (_this$chatSocket$read = (_this$chatSocket3 = this.chatSocket) === null || _this$chatSocket3 === void 0 ? void 0 : _this$chatSocket3.readyState) !== null && _this$chatSocket$read !== void 0 ? _this$chatSocket$read : null;\n  }\n  getPresenceSocketState() {\n    var _this$presenceSocket$, _this$presenceSocket2;\n    return (_this$presenceSocket$ = (_this$presenceSocket2 = this.presenceSocket) === null || _this$presenceSocket2 === void 0 ? void 0 : _this$presenceSocket2.readyState) !== null && _this$presenceSocket$ !== void 0 ? _this$presenceSocket$ : null;\n  }\n}\n\n// Create a singleton instance\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WS_URL","process","env","REACT_APP_WS_URL","WebSocketService","constructor","chatSocket","presenceSocket","messageHandlers","presenceHandlers","reconnectTimeout","RECONNECT_DELAY","connect","bind","disconnect","sendMessage","updateStatus","joinChannel","leaveChannel","token","console","error","_this$chatSocket","readyState","WebSocket","OPEN","log","encodeURIComponent","setupWebSocketHandlers","_this$presenceSocket","socket","type","onopen","onmessage","event","message","JSON","parse","data","forEach","handler","onclose","code","scheduleReconnect","onerror","close","clearTimeout","channelId","content","_this$chatSocket2","trim","channel_id","send","stringify","status","onMessage","push","filter","h","onPresence","setTimeout","getChatSocketState","_this$chatSocket$read","_this$chatSocket3","getPresenceSocketState","_this$presenceSocket$","_this$presenceSocket2","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { getAuthToken } from '../api/auth';\r\n\r\nconst WS_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\r\n\r\nexport interface WebSocketMessage {\r\n  type: string;\r\n  message?: {\r\n    id: number;\r\n    content: string;\r\n    sender_id: number;\r\n    channel_id: number;\r\n    created_at: string;\r\n  };\r\n  user_id?: number;\r\n  status?: 'online' | 'offline' | 'away' | 'busy';\r\n  [key: string]: any;\r\n}\r\n\r\nexport class WebSocketService {\r\n  private chatSocket: WebSocket | null = null;\r\n  private presenceSocket: WebSocket | null = null;\r\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private presenceHandlers: ((message: WebSocketMessage) => void)[] = [];\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private readonly RECONNECT_DELAY = 5000; // 5 seconds\r\n\r\n  constructor() {\r\n    // Bind methods\r\n    this.connect = this.connect.bind(this);\r\n    this.disconnect = this.disconnect.bind(this);\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.updateStatus = this.updateStatus.bind(this);\r\n    this.joinChannel = this.joinChannel.bind(this);\r\n    this.leaveChannel = this.leaveChannel.bind(this);\r\n  }\r\n\r\n  public connect(): void {\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      console.error('No auth token available');\r\n      return;\r\n    }\r\n\r\n    // Connect to chat WebSocket\r\n    try {\r\n      if (this.chatSocket?.readyState === WebSocket.OPEN) {\r\n        console.log('Chat WebSocket already connected');\r\n        return;\r\n      }\r\n\r\n      console.log('Connecting to chat WebSocket...');\r\n      this.chatSocket = new WebSocket(`${WS_URL}/chat?token=${encodeURIComponent(token)}`);\r\n      this.setupWebSocketHandlers(this.chatSocket, 'chat');\r\n    } catch (error) {\r\n      console.error('Failed to connect to chat WebSocket:', error);\r\n    }\r\n\r\n    // Connect to presence WebSocket\r\n    try {\r\n      if (this.presenceSocket?.readyState === WebSocket.OPEN) {\r\n        console.log('Presence WebSocket already connected');\r\n        return;\r\n      }\r\n\r\n      console.log('Connecting to presence WebSocket...');\r\n      this.presenceSocket = new WebSocket(`${WS_URL}/presence?token=${encodeURIComponent(token)}`);\r\n      this.setupWebSocketHandlers(this.presenceSocket, 'presence');\r\n    } catch (error) {\r\n      console.error('Failed to connect to presence WebSocket:', error);\r\n    }\r\n  }\r\n\r\n  private setupWebSocketHandlers(socket: WebSocket, type: 'chat' | 'presence'): void {\r\n    socket.onopen = () => {\r\n      console.log(`${type} WebSocket connected`);\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data);\r\n        console.log(`Received ${type} message:`, message);\r\n        if (type === 'chat') {\r\n          this.messageHandlers.forEach(handler => {\r\n            try {\r\n              handler(message);\r\n            } catch (error) {\r\n              console.error('Error in message handler:', error);\r\n            }\r\n          });\r\n        } else {\r\n          this.presenceHandlers.forEach(handler => {\r\n            try {\r\n              handler(message);\r\n            } catch (error) {\r\n              console.error('Error in presence handler:', error);\r\n            }\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`Failed to parse ${type} message:`, error, event.data);\r\n      }\r\n    };\r\n\r\n    socket.onclose = (event) => {\r\n      console.log(`${type} WebSocket closed with code ${event.code}. Attempting to reconnect...`);\r\n      if (event.code === 4001) {\r\n        console.error('Authentication failed. Please log in again.');\r\n        // Trigger logout or auth refresh here if needed\r\n        return;\r\n      }\r\n      this.scheduleReconnect();\r\n    };\r\n\r\n    socket.onerror = (error) => {\r\n      console.error(`${type} WebSocket error:`, error);\r\n      this.scheduleReconnect();\r\n    };\r\n  }\r\n\r\n  public disconnect(): void {\r\n    if (this.chatSocket) {\r\n      this.chatSocket.close();\r\n      this.chatSocket = null;\r\n    }\r\n    if (this.presenceSocket) {\r\n      this.presenceSocket.close();\r\n      this.presenceSocket = null;\r\n    }\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n  }\r\n\r\n  public sendMessage(channelId: number, content: string): void {\r\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Chat WebSocket is not connected. State:', this.chatSocket?.readyState);\r\n      return;\r\n    }\r\n\r\n    if (!channelId || !content.trim()) {\r\n      console.error('Invalid message parameters:', { channelId, content });\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'message',\r\n      channel_id: channelId,\r\n      content: content.trim()\r\n    };\r\n\r\n    try {\r\n      console.log('Sending WebSocket message:', message);\r\n      this.chatSocket.send(JSON.stringify(message));\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n      // Try to reconnect\r\n      this.connect();\r\n    }\r\n  }\r\n\r\n  public updateStatus(status: 'online' | 'offline' | 'away' | 'busy'): void {\r\n    if (!this.presenceSocket || this.presenceSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Presence WebSocket is not connected');\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'status_update',\r\n      status\r\n    };\r\n\r\n    this.presenceSocket.send(JSON.stringify(message));\r\n  }\r\n\r\n  public joinChannel(channelId: number): void {\r\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Chat WebSocket is not connected');\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'join_channel',\r\n      channel_id: channelId\r\n    };\r\n\r\n    this.chatSocket.send(JSON.stringify(message));\r\n  }\r\n\r\n  public leaveChannel(channelId: number): void {\r\n    if (!this.chatSocket || this.chatSocket.readyState !== WebSocket.OPEN) {\r\n      console.error('Chat WebSocket is not connected');\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      type: 'leave_channel',\r\n      channel_id: channelId\r\n    };\r\n\r\n    this.chatSocket.send(JSON.stringify(message));\r\n  }\r\n\r\n  public onMessage(handler: (message: WebSocketMessage) => void): () => void {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  public onPresence(handler: (message: WebSocketMessage) => void): () => void {\r\n    this.presenceHandlers.push(handler);\r\n    return () => {\r\n      this.presenceHandlers = this.presenceHandlers.filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  private scheduleReconnect(): void {\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n    }\r\n    this.reconnectTimeout = setTimeout(() => {\r\n      console.log('Attempting to reconnect WebSocket...');\r\n      this.connect();\r\n    }, this.RECONNECT_DELAY);\r\n  }\r\n\r\n  public getChatSocketState(): number | null {\r\n    return this.chatSocket?.readyState ?? null;\r\n  }\r\n\r\n  public getPresenceSocketState(): number | null {\r\n    return this.presenceSocket?.readyState ?? null;\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst wsService = new WebSocketService();\r\nexport default wsService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}