{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.messageHandlers = [];\n  }\n  connect() {\n    this.ws = new WebSocket(process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws');\n    this.ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        this.messageHandlers.forEach(handler => handler(data));\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket connection closed');\n      setTimeout(() => this.connect(), 5000);\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  on(event, handler) {\n    this.messageHandlers.push(handler);\n  }\n  off(event, handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n  send(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["WebSocketService","constructor","ws","messageHandlers","connect","WebSocket","process","env","REACT_APP_WS_URL","onmessage","event","data","JSON","parse","forEach","handler","error","console","onclose","log","setTimeout","onerror","disconnect","close","on","push","off","filter","h","send","message","readyState","OPEN","stringify"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket.ts"],"sourcesContent":["import { WebSocketMessage } from '../types';\r\n\r\nclass WebSocketService {\r\n  private ws: WebSocket | null = null;\r\n  private messageHandlers: ((data: WebSocketMessage) => void)[] = [];\r\n\r\n  connect() {\r\n    this.ws = new WebSocket(process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws');\r\n    \r\n    this.ws.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        this.messageHandlers.forEach(handler => handler(data));\r\n      } catch (error) {\r\n        console.error('Failed to parse WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('WebSocket connection closed');\r\n      setTimeout(() => this.connect(), 5000);\r\n    };\r\n\r\n    this.ws.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n  }\r\n\r\n  on(event: 'message', handler: (data: WebSocketMessage) => void) {\r\n    this.messageHandlers.push(handler);\r\n  }\r\n\r\n  off(event: 'message', handler: (data: WebSocketMessage) => void) {\r\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\r\n  }\r\n\r\n  send(message: WebSocketMessage) {\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(message));\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n    }\r\n  }\r\n}\r\n\r\nexport default new WebSocketService(); "],"mappings":"AAEA,MAAMA,gBAAgB,CAAC;EAAAC,YAAA;IAAA,KACbC,EAAE,GAAqB,IAAI;IAAA,KAC3BC,eAAe,GAAyC,EAAE;EAAA;EAElEC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,EAAE,GAAG,IAAIG,SAAS,CAACC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,wBAAwB,CAAC;IAEjF,IAAI,CAACN,EAAE,CAACO,SAAS,GAAIC,KAAK,IAAK;MAC7B,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;QACnC,IAAI,CAACR,eAAe,CAACW,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACJ,IAAI,CAAC,CAAC;MACxD,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF,CAAC;IAED,IAAI,CAACd,EAAE,CAACgB,OAAO,GAAG,MAAM;MACtBD,OAAO,CAACE,GAAG,CAAC,6BAA6B,CAAC;MAC1CC,UAAU,CAAC,MAAM,IAAI,CAAChB,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC;IACxC,CAAC;IAED,IAAI,CAACF,EAAE,CAACmB,OAAO,GAAIL,KAAK,IAAK;MAC3BC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;EACH;EAEAM,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACpB,EAAE,EAAE;MACX,IAAI,CAACA,EAAE,CAACqB,KAAK,CAAC,CAAC;MACf,IAAI,CAACrB,EAAE,GAAG,IAAI;IAChB;EACF;EAEAsB,EAAEA,CAACd,KAAgB,EAAEK,OAAyC,EAAE;IAC9D,IAAI,CAACZ,eAAe,CAACsB,IAAI,CAACV,OAAO,CAAC;EACpC;EAEAW,GAAGA,CAAChB,KAAgB,EAAEK,OAAyC,EAAE;IAC/D,IAAI,CAACZ,eAAe,GAAG,IAAI,CAACA,eAAe,CAACwB,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKb,OAAO,CAAC;EACxE;EAEAc,IAAIA,CAACC,OAAyB,EAAE;IAC9B,IAAI,IAAI,CAAC5B,EAAE,IAAI,IAAI,CAACA,EAAE,CAAC6B,UAAU,KAAK1B,SAAS,CAAC2B,IAAI,EAAE;MACpD,IAAI,CAAC9B,EAAE,CAAC2B,IAAI,CAACjB,IAAI,CAACqB,SAAS,CAACH,OAAO,CAAC,CAAC;IACvC,CAAC,MAAM;MACLb,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAC;IAC7C;EACF;AACF;AAEA,eAAe,IAAIhB,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}