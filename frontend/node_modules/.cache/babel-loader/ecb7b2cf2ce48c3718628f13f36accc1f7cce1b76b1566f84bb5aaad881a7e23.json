{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nconst MAX_QUEUE_SIZE = 1000;\nconst DEFAULT_MAX_ATTEMPTS = 3;\nexport class MessageQueue {\n  constructor() {\n    this.state = {\n      messages: [],\n      isProcessing: false\n    };\n  }\n  // Add a message to the queue\n  enqueue(message, maxAttempts = DEFAULT_MAX_ATTEMPTS) {\n    const id = uuidv4();\n    const queuedMessage = {\n      id,\n      message,\n      timestamp: Date.now(),\n      attempts: 0,\n      maxAttempts\n    };\n\n    // Remove oldest messages if queue is full\n    if (this.state.messages.length >= MAX_QUEUE_SIZE) {\n      this.state.messages.shift();\n    }\n    this.state.messages.push(queuedMessage);\n    return id;\n  }\n\n  // Get the next message to process\n  dequeue() {\n    return this.state.messages.shift();\n  }\n\n  // Peek at the next message without removing it\n  peek() {\n    return this.state.messages[0];\n  }\n\n  // Mark a message as attempted\n  markAttempted(id) {\n    const message = this.state.messages.find(m => m.id === id);\n    if (message) {\n      message.attempts++;\n    }\n  }\n\n  // Remove a message from the queue\n  remove(id) {\n    this.state.messages = this.state.messages.filter(m => m.id !== id);\n  }\n\n  // Get all messages for a specific channel\n  getChannelMessages(channelId) {\n    return this.state.messages.filter(m => {\n      const msg = m.message;\n      return 'channel_id' in msg && msg.channel_id === channelId;\n    });\n  }\n\n  // Clear all messages from the queue\n  clear() {\n    this.state.messages = [];\n  }\n\n  // Get the current queue size\n  size() {\n    return this.state.messages.length;\n  }\n\n  // Check if the queue is empty\n  isEmpty() {\n    return this.state.messages.length === 0;\n  }\n\n  // Get messages that have exceeded max attempts\n  getFailedMessages() {\n    return this.state.messages.filter(m => m.attempts >= m.maxAttempts);\n  }\n\n  // Remove messages that have exceeded max attempts\n  removeFailedMessages() {\n    this.state.messages = this.state.messages.filter(m => m.attempts < m.maxAttempts);\n  }\n\n  // Set processing state\n  setProcessing(isProcessing) {\n    this.state.isProcessing = isProcessing;\n  }\n\n  // Get processing state\n  isProcessing() {\n    return this.state.isProcessing;\n  }\n\n  // Get all messages in the queue\n  getAll() {\n    return [...this.state.messages];\n  }\n}\n\n// Create and export a singleton instance\nexport const messageQueue = new MessageQueue();\nexport default messageQueue;","map":{"version":3,"names":["v4","uuidv4","MAX_QUEUE_SIZE","DEFAULT_MAX_ATTEMPTS","MessageQueue","constructor","state","messages","isProcessing","enqueue","message","maxAttempts","id","queuedMessage","timestamp","Date","now","attempts","length","shift","push","dequeue","peek","markAttempted","find","m","remove","filter","getChannelMessages","channelId","msg","channel_id","clear","size","isEmpty","getFailedMessages","removeFailedMessages","setProcessing","getAll","messageQueue"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/messageQueue.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport { QueuedMessage, WebSocketMessage, MessageQueueState } from '../../types/websocket';\r\n\r\nconst MAX_QUEUE_SIZE = 1000;\r\nconst DEFAULT_MAX_ATTEMPTS = 3;\r\n\r\nexport class MessageQueue {\r\n  private state: MessageQueueState = {\r\n    messages: [],\r\n    isProcessing: false\r\n  };\r\n\r\n  // Add a message to the queue\r\n  public enqueue(message: WebSocketMessage, maxAttempts: number = DEFAULT_MAX_ATTEMPTS): string {\r\n    const id = uuidv4();\r\n    const queuedMessage: QueuedMessage = {\r\n      id,\r\n      message,\r\n      timestamp: Date.now(),\r\n      attempts: 0,\r\n      maxAttempts\r\n    };\r\n\r\n    // Remove oldest messages if queue is full\r\n    if (this.state.messages.length >= MAX_QUEUE_SIZE) {\r\n      this.state.messages.shift();\r\n    }\r\n\r\n    this.state.messages.push(queuedMessage);\r\n    return id;\r\n  }\r\n\r\n  // Get the next message to process\r\n  public dequeue(): QueuedMessage | undefined {\r\n    return this.state.messages.shift();\r\n  }\r\n\r\n  // Peek at the next message without removing it\r\n  public peek(): QueuedMessage | undefined {\r\n    return this.state.messages[0];\r\n  }\r\n\r\n  // Mark a message as attempted\r\n  public markAttempted(id: string): void {\r\n    const message = this.state.messages.find(m => m.id === id);\r\n    if (message) {\r\n      message.attempts++;\r\n    }\r\n  }\r\n\r\n  // Remove a message from the queue\r\n  public remove(id: string): void {\r\n    this.state.messages = this.state.messages.filter(m => m.id !== id);\r\n  }\r\n\r\n  // Get all messages for a specific channel\r\n  public getChannelMessages(channelId: number): QueuedMessage[] {\r\n    return this.state.messages.filter(m => {\r\n      const msg = m.message;\r\n      return 'channel_id' in msg && msg.channel_id === channelId;\r\n    });\r\n  }\r\n\r\n  // Clear all messages from the queue\r\n  public clear(): void {\r\n    this.state.messages = [];\r\n  }\r\n\r\n  // Get the current queue size\r\n  public size(): number {\r\n    return this.state.messages.length;\r\n  }\r\n\r\n  // Check if the queue is empty\r\n  public isEmpty(): boolean {\r\n    return this.state.messages.length === 0;\r\n  }\r\n\r\n  // Get messages that have exceeded max attempts\r\n  public getFailedMessages(): QueuedMessage[] {\r\n    return this.state.messages.filter(m => m.attempts >= m.maxAttempts);\r\n  }\r\n\r\n  // Remove messages that have exceeded max attempts\r\n  public removeFailedMessages(): void {\r\n    this.state.messages = this.state.messages.filter(m => m.attempts < m.maxAttempts);\r\n  }\r\n\r\n  // Set processing state\r\n  public setProcessing(isProcessing: boolean): void {\r\n    this.state.isProcessing = isProcessing;\r\n  }\r\n\r\n  // Get processing state\r\n  public isProcessing(): boolean {\r\n    return this.state.isProcessing;\r\n  }\r\n\r\n  // Get all messages in the queue\r\n  public getAll(): QueuedMessage[] {\r\n    return [...this.state.messages];\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nexport const messageQueue = new MessageQueue();\r\nexport default messageQueue; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}