{"ast":null,"code":"import { apiRequest } from './utils';\n// Transform API user to our User type\nconst transformUser = apiUser => ({\n  ...apiUser,\n  email: '',\n  // Set default values for required fields that the channel API doesn't provide\n  full_name: apiUser.username // Use username as full_name if not provided\n});\nexport const getChannels = async () => {\n  console.log('Fetching channels...');\n  try {\n    const channels = await apiRequest('/api/channels');\n    console.log('Received channels:', channels);\n    return channels;\n  } catch (error) {\n    console.error('Error fetching channels:', error);\n    throw error;\n  }\n};\nexport const getChannelMessages = async (channelId, limit = 50) => {\n  console.log(`Fetching messages for channel ${channelId} with limit ${limit}...`);\n  try {\n    const messages = await apiRequest(`/api/channels/${channelId}/messages?limit=${limit}`);\n    console.log('Received messages:', messages);\n    return messages;\n  } catch (error) {\n    console.error(`Error fetching messages for channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const getChannelUsers = async channelId => {\n  console.log(`Fetching users for channel ${channelId}...`);\n  try {\n    const apiUsers = await apiRequest(`/api/channels/${channelId}/users`);\n    console.log('Received users:', apiUsers);\n    const users = apiUsers.map(transformUser);\n    console.log('Transformed users:', users);\n    return users;\n  } catch (error) {\n    console.error(`Error fetching users for channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const createChannel = async (name, description) => {\n  console.log('Creating channel:', {\n    name,\n    description\n  });\n  try {\n    const channel = await apiRequest('/api/channels', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        description\n      })\n    });\n    console.log('Created channel:', channel);\n    return channel;\n  } catch (error) {\n    console.error('Error creating channel:', error);\n    throw error;\n  }\n};\nexport const joinChannel = async channelId => {\n  console.log(`Joining channel ${channelId}...`);\n  try {\n    await apiRequest(`/api/channels/${channelId}/join`, {\n      method: 'POST'\n    });\n    console.log(`Joined channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error joining channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const leaveChannel = async channelId => {\n  console.log(`Leaving channel ${channelId}...`);\n  try {\n    await apiRequest(`/api/channels/${channelId}/leave`, {\n      method: 'POST'\n    });\n    console.log(`Left channel ${channelId}`);\n  } catch (error) {\n    console.error(`Error leaving channel ${channelId}:`, error);\n    throw error;\n  }\n};\nexport const sendMessage = async (channelId, content) => {\n  console.log(`Sending message to channel ${channelId}:`, content);\n  try {\n    const message = await apiRequest(`/api/channels/${channelId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify({\n        content\n      })\n    });\n    console.log('Message sent:', message);\n    return message;\n  } catch (error) {\n    console.error(`Error sending message to channel ${channelId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiRequest","transformUser","apiUser","email","full_name","username","getChannels","console","log","channels","error","getChannelMessages","channelId","limit","messages","getChannelUsers","apiUsers","users","map","createChannel","name","description","channel","method","body","JSON","stringify","joinChannel","leaveChannel","sendMessage","content","message"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/api/chat.ts"],"sourcesContent":["import { Channel, Message, User } from '../../types';\r\nimport { apiRequest } from './utils';\r\n\r\ninterface ApiUser {\r\n  id: number;\r\n  username: string;\r\n  status: 'online' | 'offline' | 'away' | 'busy';\r\n  last_seen: string;\r\n}\r\n\r\n// Transform API user to our User type\r\nconst transformUser = (apiUser: ApiUser): User => ({\r\n  ...apiUser,\r\n  email: '', // Set default values for required fields that the channel API doesn't provide\r\n  full_name: apiUser.username, // Use username as full_name if not provided\r\n});\r\n\r\nexport const getChannels = async (): Promise<Channel[]> => {\r\n  console.log('Fetching channels...');\r\n  try {\r\n    const channels = await apiRequest<Channel[]>('/api/channels');\r\n    console.log('Received channels:', channels);\r\n    return channels;\r\n  } catch (error) {\r\n    console.error('Error fetching channels:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getChannelMessages = async (channelId: number, limit: number = 50): Promise<Message[]> => {\r\n  console.log(`Fetching messages for channel ${channelId} with limit ${limit}...`);\r\n  try {\r\n    const messages = await apiRequest<Message[]>(`/api/channels/${channelId}/messages?limit=${limit}`);\r\n    console.log('Received messages:', messages);\r\n    return messages;\r\n  } catch (error) {\r\n    console.error(`Error fetching messages for channel ${channelId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getChannelUsers = async (channelId: number): Promise<User[]> => {\r\n  console.log(`Fetching users for channel ${channelId}...`);\r\n  try {\r\n    const apiUsers = await apiRequest<ApiUser[]>(`/api/channels/${channelId}/users`);\r\n    console.log('Received users:', apiUsers);\r\n    const users = apiUsers.map(transformUser);\r\n    console.log('Transformed users:', users);\r\n    return users;\r\n  } catch (error) {\r\n    console.error(`Error fetching users for channel ${channelId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createChannel = async (name: string, description?: string): Promise<Channel> => {\r\n  console.log('Creating channel:', { name, description });\r\n  try {\r\n    const channel = await apiRequest<Channel>('/api/channels', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ name, description }),\r\n    });\r\n    console.log('Created channel:', channel);\r\n    return channel;\r\n  } catch (error) {\r\n    console.error('Error creating channel:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const joinChannel = async (channelId: number): Promise<void> => {\r\n  console.log(`Joining channel ${channelId}...`);\r\n  try {\r\n    await apiRequest(`/api/channels/${channelId}/join`, {\r\n      method: 'POST',\r\n    });\r\n    console.log(`Joined channel ${channelId}`);\r\n  } catch (error) {\r\n    console.error(`Error joining channel ${channelId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const leaveChannel = async (channelId: number): Promise<void> => {\r\n  console.log(`Leaving channel ${channelId}...`);\r\n  try {\r\n    await apiRequest(`/api/channels/${channelId}/leave`, {\r\n      method: 'POST',\r\n    });\r\n    console.log(`Left channel ${channelId}`);\r\n  } catch (error) {\r\n    console.error(`Error leaving channel ${channelId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const sendMessage = async (channelId: number, content: string): Promise<Message> => {\r\n  console.log(`Sending message to channel ${channelId}:`, content);\r\n  try {\r\n    const message = await apiRequest<Message>(`/api/channels/${channelId}/messages`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ content }),\r\n    });\r\n    console.log('Message sent:', message);\r\n    return message;\r\n  } catch (error) {\r\n    console.error(`Error sending message to channel ${channelId}:`, error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}