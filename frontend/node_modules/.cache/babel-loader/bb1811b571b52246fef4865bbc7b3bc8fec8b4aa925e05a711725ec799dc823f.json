{"ast":null,"code":"export const transformMessage = message => {\n  var _message$parent_id;\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content.slice(0, 50),\n    // Only log first 50 chars\n    rawReactions: message.reactions\n  });\n\n  // Process reactions with detailed logging\n  let reactions = [];\n  if (Array.isArray(message.reactions)) {\n    console.log('Raw reactions array:', message.reactions);\n    reactions = message.reactions.map(r => {\n      var _r$id, _ref;\n      console.log('Processing reaction:', r);\n      return {\n        id: ((_r$id = r.id) === null || _r$id === void 0 ? void 0 : _r$id.toString()) || `${message.id}_${r.user_id || r.userId}_${r.emoji}`,\n        messageId: message.id.toString(),\n        userId: ((_ref = r.user_id || r.userId) === null || _ref === void 0 ? void 0 : _ref.toString()) || '',\n        emoji: r.emoji || '',\n        createdAt: r.created_at || r.createdAt || new Date().toISOString()\n      };\n    });\n  }\n  console.log('Processed reactions:', reactions);\n  const transformed = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: message.channel_id.toString(),\n    userId: message.sender_id.toString(),\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: (_message$parent_id = message.parent_id) === null || _message$parent_id === void 0 ? void 0 : _message$parent_id.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  };\n  console.log('Transformed message:', {\n    id: transformed.id,\n    content: transformed.content.slice(0, 50),\n    // Only log first 50 chars\n    reactions: transformed.reactions\n  });\n  return transformed;\n};","map":{"version":3,"names":["transformMessage","message","_message$parent_id","console","log","id","content","slice","rawReactions","reactions","Array","isArray","map","r","_r$id","_ref","toString","user_id","userId","emoji","messageId","createdAt","created_at","Date","toISOString","transformed","channelId","channel_id","sender_id","attachments","updatedAt","updated_at","parentId","parent_id","replyCount","reply_count","isExpanded","repliesLoaded","replies"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/utils/messageTransform.ts"],"sourcesContent":["import { Message, RawMessage, StoreMessage, Reaction } from '../types';\n\ninterface RawReaction {\n  id?: string | number;\n  user_id?: string | number;\n  userId?: string;\n  emoji?: string;\n  created_at?: string;\n  createdAt?: string;\n  message_id?: string | number;\n}\n\nexport const transformMessage = (message: RawMessage | Message): StoreMessage => {\n  console.log('Transforming message:', {\n    id: message.id,\n    content: message.content.slice(0, 50), // Only log first 50 chars\n    rawReactions: message.reactions\n  });\n  \n  // Process reactions with detailed logging\n  let reactions: Reaction[] = [];\n  if (Array.isArray(message.reactions)) {\n    console.log('Raw reactions array:', message.reactions);\n    reactions = message.reactions.map((r: RawReaction) => {\n      console.log('Processing reaction:', r);\n      return {\n        id: r.id?.toString() || `${message.id}_${r.user_id || r.userId}_${r.emoji}`,\n        messageId: message.id.toString(),\n        userId: (r.user_id || r.userId)?.toString() || '',\n        emoji: r.emoji || '',\n        createdAt: r.created_at || r.createdAt || new Date().toISOString()\n      };\n    });\n  }\n\n  console.log('Processed reactions:', reactions);\n  \n  const transformed: StoreMessage = {\n    id: message.id.toString(),\n    content: message.content,\n    channelId: message.channel_id.toString(),\n    userId: message.sender_id.toString(),\n    reactions,\n    attachments: Array.isArray(message.attachments) ? message.attachments : [],\n    createdAt: message.created_at,\n    updatedAt: message.updated_at || message.created_at,\n    parentId: message.parent_id?.toString(),\n    replyCount: message.reply_count || 0,\n    isExpanded: false,\n    repliesLoaded: false,\n    replies: []\n  };\n  \n  console.log('Transformed message:', {\n    id: transformed.id,\n    content: transformed.content.slice(0, 50), // Only log first 50 chars\n    reactions: transformed.reactions\n  });\n  return transformed;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}