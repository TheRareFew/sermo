{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport Message from '../Message';\nimport MessageReplies from '../MessageReplies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = MessageListContainer;\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n_c2 = MessagesWrapper;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\nconst MessageWrapper = styled.div`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n_c3 = MessageWrapper;\nconst MessageList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c4 = _s((props, ref) => {\n  var _messages, _messages$;\n  _s();\n  const {\n    messages,\n    selectedMessageId,\n    initialScrollComplete: propInitialScrollComplete\n  } = props;\n  const containerRef = useRef(null);\n  const highlightTimeoutRef = useRef();\n  const scrollTimeoutRef = useRef();\n  const prevSelectedMessageRef = useRef(null);\n  const lastMessageRef = useRef(((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.id) || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef(((_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.channelId) || null);\n  const {\n    currentUser,\n    users\n  } = useSelector(state => ({\n    currentUser: state.auth.user,\n    users: state.chat.users\n  }));\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    let scrollTimeout;\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    var _messages2, _messages$2, _messages$3, _messages3, _messages4;\n    if (!containerRef.current) return;\n\n    // Clear any existing scroll timeout\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = ((_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.id) !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const channelChanged = ((_messages$2 = messages[0]) === null || _messages$2 === void 0 ? void 0 : _messages$2.channelId) !== currentChannelRef.current;\n    console.log('Scroll Debug:', {\n      isAtBottom,\n      hasNewMessages,\n      isNewMessage,\n      channelChanged,\n      isUserScrolling: isUserScrolling.current,\n      selectedMessageId,\n      prevSelectedMessageId: prevSelectedMessageRef.current,\n      currentChannel: currentChannelRef.current,\n      newChannel: (_messages$3 = messages[0]) === null || _messages$3 === void 0 ? void 0 : _messages$3.channelId\n    });\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      scrollTimeoutRef.current = setTimeout(() => {\n        if (!containerRef.current) return;\n        const messageElement = containerRef.current.querySelector(`[data-message-id=\"${selectedMessageId}\"]`);\n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          if (highlightTimeoutRef.current) {\n            clearTimeout(highlightTimeoutRef.current);\n          }\n          highlightTimeoutRef.current = setTimeout(() => {\n            messageElement.classList.remove('highlight');\n          }, 1000);\n        }\n      }, 100);\n    }\n    // Immediately scroll to bottom on channel change\n    else if (channelChanged && messages.length > 0) {\n      var _messages$4;\n      container.scrollTop = container.scrollHeight;\n      setInitialScrollComplete(true);\n      currentChannelRef.current = ((_messages$4 = messages[0]) === null || _messages$4 === void 0 ? void 0 : _messages$4.channelId) || null;\n    }\n    // Scroll to bottom for other cases\n    else if (!initialScrollComplete && messages.length > 0 || isNewMessage && isAtBottom || isNewMessage && ((_messages3 = messages[messages.length - 1]) === null || _messages3 === void 0 ? void 0 : _messages3.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id)) {\n      if (!isUserScrolling.current) {\n        scrollTimeoutRef.current = setTimeout(() => {\n          if (!containerRef.current) return;\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          setInitialScrollComplete(true);\n        }, 100);\n      }\n    }\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = ((_messages4 = messages[messages.length - 1]) === null || _messages4 === void 0 ? void 0 : _messages4.id) || null;\n  }, [selectedMessageId, messages, initialScrollComplete, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n\n  // Reset scroll state only on channel changes\n  useEffect(() => {\n    var _messages$5;\n    const channelChanged = ((_messages$5 = messages[0]) === null || _messages$5 === void 0 ? void 0 : _messages$5.channelId) !== currentChannelRef.current;\n    if (channelChanged) {\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = null;\n      isUserScrolling.current = false;\n    }\n    prevMessagesRef.current = messages;\n  }, [messages]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n  const handleDeleteMessage = messageId => {\n    console.log('Delete message:', messageId);\n  };\n  const handleToggleReplies = messageId => {\n    console.log('Toggle replies:', messageId);\n  };\n  const handleReply = messageId => {\n    console.log('Reply to message:', messageId);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: messages.map(message => {\n        var _users$message$userId;\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          $isSelected: message.id === selectedMessageId,\n          \"data-message-id\": message.id,\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            content: message.content,\n            sender: ((_users$message$userId = users[message.userId]) === null || _users$message$userId === void 0 ? void 0 : _users$message$userId.username) || message.userId,\n            timestamp: message.createdAt,\n            userId: message.userId,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            onDelete: () => handleDeleteMessage(message.id),\n            replyCount: message.replyCount || 0,\n            isExpanded: message.isExpanded || false,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onReply: () => handleReply(message.id),\n            isReply: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), message.isExpanded && message.replies && /*#__PURE__*/_jsxDEV(MessageReplies, {\n            parentId: message.id,\n            replies: message.replies,\n            currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n            isExpanded: message.isExpanded,\n            onToggleReplies: () => handleToggleReplies(message.id),\n            onDelete: handleDeleteMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}, \"RhtJhuzeIPTLdzPeStBuhX/Jew4=\", false, function () {\n  return [useSelector];\n})), \"RhtJhuzeIPTLdzPeStBuhX/Jew4=\", false, function () {\n  return [useSelector];\n});\n_c5 = MessageList;\nMessageList.displayName = 'MessageList';\nexport default MessageList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"MessageWrapper\");\n$RefreshReg$(_c4, \"MessageList$forwardRef\");\n$RefreshReg$(_c5, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","styled","useSelector","Message","MessageReplies","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessagesWrapper","_c2","LoadingIndicator","props","theme","colors","textLight","MessageWrapper","$isSelected","_c3","MessageList","_s","_c4","ref","_messages","_messages$","messages","selectedMessageId","initialScrollComplete","propInitialScrollComplete","containerRef","highlightTimeoutRef","scrollTimeoutRef","prevSelectedMessageRef","lastMessageRef","length","id","shouldScrollToMessage","setShouldScrollToMessage","setInitialScrollComplete","prevMessagesRef","isUserScrolling","currentChannelRef","channelId","currentUser","users","state","auth","user","chat","current","container","scrollTimeout","handleScroll","clearTimeout","setTimeout","addEventListener","removeEventListener","_messages2","_messages$2","_messages$3","_messages3","_messages4","isAtBottom","scrollHeight","scrollTop","clientHeight","hasNewMessages","isNewMessage","channelChanged","console","log","prevSelectedMessageId","currentChannel","newChannel","messageElement","querySelector","scrollIntoView","behavior","block","classList","add","remove","_messages$4","userId","_messages$5","handleDeleteMessage","messageId","handleToggleReplies","handleReply","children","map","message","_users$message$userId","content","sender","username","timestamp","createdAt","currentUserId","onDelete","replyCount","isExpanded","onToggleReplies","onReply","isReply","fileName","_jsxFileName","lineNumber","columnNumber","replies","parentId","_c5","displayName","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageList/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { RootState, StoreMessage, User } from '../../../types';\nimport Message, { ChatMessageProps } from '../Message';\nimport MessageReplies from '../MessageReplies';\n\ninterface MessageListProps {\n  messages: StoreMessage[];\n  selectedMessageId?: string | null;\n  initialScrollComplete?: boolean;\n}\n\nconst MessageListContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst MessagesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: auto;\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 8px;\n  color: ${props => props.theme.colors.textLight};\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageWrapper = styled.div<{ $isSelected?: boolean }>`\n  transition: all 0.3s ease;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'};\n  border-left: ${props => props.$isSelected ? '2px solid #666' : '2px solid transparent'};\n  \n  &.highlight {\n    animation: flash 1s;\n  }\n\n  @keyframes flash {\n    0% { background-color: #4a4a4a; }\n    100% { background-color: ${props => props.$isSelected ? '#3a3a3a' : 'transparent'}; }\n  }\n`;\n\nconst MessageList = forwardRef<HTMLDivElement, MessageListProps>((props, ref) => {\n  const { messages, selectedMessageId, initialScrollComplete: propInitialScrollComplete } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const highlightTimeoutRef = useRef<NodeJS.Timeout>();\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n  const prevSelectedMessageRef = useRef<string | null | undefined>(null);\n  const lastMessageRef = useRef<string | null>(messages[messages.length - 1]?.id || null);\n  const [shouldScrollToMessage, setShouldScrollToMessage] = useState(false);\n  const [initialScrollComplete, setInitialScrollComplete] = useState(!!propInitialScrollComplete);\n  const prevMessagesRef = useRef(messages);\n  const isUserScrolling = useRef(false);\n  const currentChannelRef = useRef<string | null>(messages[0]?.channelId || null);\n\n  const { currentUser, users } = useSelector((state: RootState) => ({\n    currentUser: state.auth.user,\n    users: state.chat.users as { [key: string]: User }\n  }));\n\n  // Handle user scrolling\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      isUserScrolling.current = true;\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        isUserScrolling.current = false;\n      }, 150); // Reset after scrolling stops\n    };\n\n    container.addEventListener('scroll', handleScroll);\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Handle scroll behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Clear any existing scroll timeout\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n\n    const container = containerRef.current;\n    const isAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n    const hasNewMessages = messages[messages.length - 1]?.id !== lastMessageRef.current;\n    const isNewMessage = hasNewMessages && messages.length > prevMessagesRef.current.length;\n    const channelChanged = messages[0]?.channelId !== currentChannelRef.current;\n\n    console.log('Scroll Debug:', {\n      isAtBottom,\n      hasNewMessages,\n      isNewMessage,\n      channelChanged,\n      isUserScrolling: isUserScrolling.current,\n      selectedMessageId,\n      prevSelectedMessageId: prevSelectedMessageRef.current,\n      currentChannel: currentChannelRef.current,\n      newChannel: messages[0]?.channelId\n    });\n\n    // Always scroll to selected message when it changes\n    if (selectedMessageId && selectedMessageId !== prevSelectedMessageRef.current) {\n      scrollTimeoutRef.current = setTimeout(() => {\n        if (!containerRef.current) return;\n\n        const messageElement = containerRef.current.querySelector(\n          `[data-message-id=\"${selectedMessageId}\"]`\n        ) as HTMLElement;\n        \n        if (messageElement) {\n          messageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n\n          // Add highlight effect\n          messageElement.classList.add('highlight');\n          \n          if (highlightTimeoutRef.current) {\n            clearTimeout(highlightTimeoutRef.current);\n          }\n          \n          highlightTimeoutRef.current = setTimeout(() => {\n            messageElement.classList.remove('highlight');\n          }, 1000);\n        }\n      }, 100);\n    } \n    // Immediately scroll to bottom on channel change\n    else if (channelChanged && messages.length > 0) {\n      container.scrollTop = container.scrollHeight;\n      setInitialScrollComplete(true);\n      currentChannelRef.current = messages[0]?.channelId || null;\n    }\n    // Scroll to bottom for other cases\n    else if (\n      (!initialScrollComplete && messages.length > 0) || \n      (isNewMessage && isAtBottom) ||\n      (isNewMessage && messages[messages.length - 1]?.userId === currentUser?.id)\n    ) {\n      if (!isUserScrolling.current) {\n        scrollTimeoutRef.current = setTimeout(() => {\n          if (!containerRef.current) return;\n          containerRef.current.scrollTop = containerRef.current.scrollHeight;\n          setInitialScrollComplete(true);\n        }, 100);\n      }\n    }\n\n    prevSelectedMessageRef.current = selectedMessageId;\n    lastMessageRef.current = messages[messages.length - 1]?.id || null;\n  }, [selectedMessageId, messages, initialScrollComplete, currentUser?.id]);\n\n  // Reset scroll state only on channel changes\n  useEffect(() => {\n    const channelChanged = messages[0]?.channelId !== currentChannelRef.current;\n    if (channelChanged) {\n      setInitialScrollComplete(false);\n      prevSelectedMessageRef.current = null;\n      lastMessageRef.current = null;\n      isUserScrolling.current = false;\n    }\n    prevMessagesRef.current = messages;\n  }, [messages]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (highlightTimeoutRef.current) {\n        clearTimeout(highlightTimeoutRef.current);\n      }\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleDeleteMessage = (messageId: string) => {\n    console.log('Delete message:', messageId);\n  };\n\n  const handleToggleReplies = (messageId: string) => {\n    console.log('Toggle replies:', messageId);\n  };\n\n  const handleReply = (messageId: string) => {\n    console.log('Reply to message:', messageId);\n  };\n\n  return (\n    <MessageListContainer ref={containerRef}>\n      <MessagesWrapper>\n        {messages.map(message => (\n          <MessageWrapper\n            key={message.id}\n            $isSelected={message.id === selectedMessageId}\n            data-message-id={message.id}\n          >\n            <Message\n              content={message.content}\n              sender={users[message.userId]?.username || message.userId}\n              timestamp={message.createdAt}\n              userId={message.userId}\n              currentUserId={currentUser?.id}\n              onDelete={() => handleDeleteMessage(message.id)}\n              replyCount={message.replyCount || 0}\n              isExpanded={message.isExpanded || false}\n              onToggleReplies={() => handleToggleReplies(message.id)}\n              onReply={() => handleReply(message.id)}\n              isReply={false}\n            />\n            {message.isExpanded && message.replies && (\n              <MessageReplies\n                parentId={message.id}\n                replies={message.replies}\n                currentUserId={currentUser?.id}\n                isExpanded={message.isExpanded}\n                onToggleReplies={() => handleToggleReplies(message.id)}\n                onDelete={handleDeleteMessage}\n              />\n            )}\n          </MessageWrapper>\n        ))}\n      </MessagesWrapper>\n    </MessageListContainer>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nexport default MessageList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}