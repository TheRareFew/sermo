{"ast":null,"code":"var _jsxFileName = \"Z:\\\\GAUNTLET\\\\projects\\\\SERMO\\\\sermo-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageInput\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport { sendMessage } from '../../../services/api/chat';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport data from '@emoji-mart/data';\nimport Picker from '@emoji-mart/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputContainer = styled.div`\n  padding: 8px;\n  background-color: ${props => props.theme.colors.background};\n  border-top: 1px solid ${props => props.theme.colors.border};\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n_c = InputContainer;\nconst InputWrapper = styled.div`\n  position: relative;\n  flex: 1;\n`;\n_c2 = InputWrapper;\nconst Input = styled.input`\n  width: 100%;\n  padding: 8px;\n  background-color: ${props => props.theme.colors.inputBackground};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n_c3 = Input;\nconst EmojiButton = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 20px;\n  padding: 4px;\n  color: ${props => props.theme.colors.text};\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`;\n_c4 = EmojiButton;\nconst EmojiPickerWrapper = styled.div`\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  margin-bottom: 8px;\n  z-index: 100;\n`;\n_c5 = EmojiPickerWrapper;\nconst ErrorText = styled.div`\n  color: ${props => props.theme.colors.error};\n  font-size: 12px;\n  margin-top: 4px;\n`;\n_c6 = ErrorText;\nconst MessageInput = ({\n  channelId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [messageSent, setMessageSent] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const inputRef = useRef(null);\n  useLayoutEffect(() => {\n    if (channelId && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [channelId]);\n  useEffect(() => {\n    if (messageSent) {\n      setTimeout(() => {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        setMessageSent(false);\n      }, 100);\n    }\n  }, [messageSent]);\n  const handleKeyPress = async e => {\n    if (e.key === 'Enter' && message.trim() && channelId) {\n      setError(null);\n      setIsLoading(true);\n      try {\n        console.log('Sending message:', {\n          channelId,\n          content: message.trim()\n        });\n        const sentMessage = await sendMessage({\n          channelId,\n          content: message.trim()\n        });\n        console.log('Message sent successfully:', sentMessage);\n        const transformedMessage = transformMessage(sentMessage);\n        console.log('Transformed message:', transformedMessage);\n        dispatch(addMessage({\n          channelId,\n          message: transformedMessage\n        }));\n        setMessage('');\n        setMessageSent(true);\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        setError('Failed to send message. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const handleChange = e => {\n    setMessage(e.target.value);\n    if (error) {\n      setError(null);\n    }\n  };\n  const handleEmojiSelect = emoji => {\n    setMessage(prev => prev + emoji.native);\n    setShowEmojiPicker(false);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  const toggleEmojiPicker = () => {\n    setShowEmojiPicker(!showEmojiPicker);\n  };\n  return /*#__PURE__*/_jsxDEV(InputContainer, {\n    children: [/*#__PURE__*/_jsxDEV(EmojiButton, {\n      onClick: toggleEmojiPicker,\n      disabled: isLoading || !channelId,\n      title: \"Add emoji\",\n      children: \":-)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        type: \"text\",\n        value: message,\n        onChange: handleChange,\n        onKeyPress: handleKeyPress,\n        placeholder: channelId ? \"Type a message...\" : \"Select a channel to start chatting...\",\n        disabled: isLoading || !channelId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(EmojiPickerWrapper, {\n        children: /*#__PURE__*/_jsxDEV(Picker, {\n          data: data,\n          onEmojiSelect: handleEmojiSelect,\n          theme: \"dark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorText, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageInput, \"qv3tZkgn1sJ8zd39EySSQid+2/c=\", false, function () {\n  return [useDispatch];\n});\n_c7 = MessageInput;\nexport default MessageInput;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"InputContainer\");\n$RefreshReg$(_c2, \"InputWrapper\");\n$RefreshReg$(_c3, \"Input\");\n$RefreshReg$(_c4, \"EmojiButton\");\n$RefreshReg$(_c5, \"EmojiPickerWrapper\");\n$RefreshReg$(_c6, \"ErrorText\");\n$RefreshReg$(_c7, \"MessageInput\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","useEffect","styled","useDispatch","addMessage","sendMessage","transformMessage","data","Picker","jsxDEV","_jsxDEV","InputContainer","div","props","theme","colors","background","border","_c","InputWrapper","_c2","Input","input","inputBackground","text","primary","_c3","EmojiButton","button","_c4","EmojiPickerWrapper","_c5","ErrorText","error","_c6","MessageInput","channelId","_s","dispatch","message","setMessage","setError","isLoading","setIsLoading","messageSent","setMessageSent","showEmojiPicker","setShowEmojiPicker","inputRef","current","focus","setTimeout","handleKeyPress","e","key","trim","console","log","content","sentMessage","transformedMessage","handleChange","target","value","handleEmojiSelect","emoji","prev","native","toggleEmojiPicker","children","onClick","disabled","title","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","onChange","onKeyPress","placeholder","onEmojiSelect","_c7","$RefreshReg$"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/components/chat/MessageInput/index.tsx"],"sourcesContent":["import React, { useState, KeyboardEvent, useRef, useLayoutEffect, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addMessage } from '../../../store/messages/messagesSlice';\nimport { sendMessage } from '../../../services/api/chat';\nimport { transformMessage } from '../../../utils/messageTransform';\nimport { AppDispatch } from '../../../store';\nimport data from '@emoji-mart/data';\nimport Picker from '@emoji-mart/react';\n\ninterface MessageInputProps {\n  channelId: string | null;\n}\n\nconst InputContainer = styled.div`\n  padding: 8px;\n  background-color: ${props => props.theme.colors.background};\n  border-top: 1px solid ${props => props.theme.colors.border};\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  flex: 1;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 8px;\n  background-color: ${props => props.theme.colors.inputBackground};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst EmojiButton = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 20px;\n  padding: 4px;\n  color: ${props => props.theme.colors.text};\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`;\n\nconst EmojiPickerWrapper = styled.div`\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  margin-bottom: 8px;\n  z-index: 100;\n`;\n\nconst ErrorText = styled.div`\n  color: ${props => props.theme.colors.error};\n  font-size: 12px;\n  margin-top: 4px;\n`;\n\nconst MessageInput: React.FC<MessageInputProps> = ({ channelId }) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [messageSent, setMessageSent] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useLayoutEffect(() => {\n    if (channelId && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [channelId]);\n\n  useEffect(() => {\n    if (messageSent) {\n      setTimeout(() => {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        setMessageSent(false);\n      }, 100);\n    }\n  }, [messageSent]);\n\n  const handleKeyPress = async (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && message.trim() && channelId) {\n      setError(null);\n      setIsLoading(true);\n\n      try {\n        console.log('Sending message:', {\n          channelId,\n          content: message.trim()\n        });\n\n        const sentMessage = await sendMessage({\n          channelId,\n          content: message.trim()\n        });\n\n        console.log('Message sent successfully:', sentMessage);\n\n        const transformedMessage = transformMessage(sentMessage);\n        console.log('Transformed message:', transformedMessage);\n\n        dispatch(addMessage({\n          channelId,\n          message: transformedMessage\n        }));\n        \n        setMessage('');\n        setMessageSent(true);\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        setError('Failed to send message. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMessage(e.target.value);\n    if (error) {\n      setError(null);\n    }\n  };\n\n  const handleEmojiSelect = (emoji: any) => {\n    setMessage(prev => prev + emoji.native);\n    setShowEmojiPicker(false);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const toggleEmojiPicker = () => {\n    setShowEmojiPicker(!showEmojiPicker);\n  };\n\n  return (\n    <InputContainer>\n      <EmojiButton \n        onClick={toggleEmojiPicker}\n        disabled={isLoading || !channelId}\n        title=\"Add emoji\"\n      >\n        :-)\n      </EmojiButton>\n      <InputWrapper>\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          value={message}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          placeholder={channelId ? \"Type a message...\" : \"Select a channel to start chatting...\"}\n          disabled={isLoading || !channelId}\n        />\n        {showEmojiPicker && (\n          <EmojiPickerWrapper>\n            <Picker \n              data={data} \n              onEmojiSelect={handleEmojiSelect}\n              theme=\"dark\"\n            />\n          </EmojiPickerWrapper>\n        )}\n      </InputWrapper>\n      {error && <ErrorText>{error}</ErrorText>}\n    </InputContainer>\n  );\n};\n\nexport default MessageInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}