{"ast":null,"code":"import { getAuthToken } from '../api/auth';\n\n// Add WebSocket message types\n\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.currentChannelId = null;\n    this.joinedChannels = new Set();\n    this.messageQueue = [];\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.isReconnecting = false;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n    this.lastMessageId = null;\n    this.processingQueue = false;\n    this.heartbeatInterval = null;\n    this.lastHeartbeatResponse = Date.now();\n    this.handleClose = event => {\n      if (this.socket === null) return;\n      const wasConnected = this.socket.readyState === WebSocket.OPEN;\n      this.socket = null;\n      this.joinedChannels.clear();\n      if (event.code !== 1000 && wasConnected) {\n        if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.attemptReconnect();\n        }\n      }\n    };\n    // Update message handler to track last message ID\n    this.handleWebSocketMessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('Received WebSocket message:', message);\n\n        // Update heartbeat timestamp for any message\n        this.lastHeartbeatResponse = Date.now();\n        if (message.type === 'pong') {\n          console.log('Received pong message');\n          return; // Ignore heartbeat responses\n        }\n\n        // Handle channel join responses separately\n        if (message.type === 'channel_joined') {\n          console.log('Channel joined:', message.channelId);\n          this.joinedChannels.add(message.channelId);\n          return;\n        }\n\n        // For message events, update lastMessageId\n        if (message.type === 'message' || message.type === 'message_sent' || message.type === 'new_reply' || message.type === 'message_updated') {\n          if ('message' in message && typeof message.message === 'object' && message.message) {\n            this.lastMessageId = message.message.id.toString();\n            console.log('Updated last message ID:', this.lastMessageId);\n          }\n        }\n\n        // Notify all handlers\n        this.messageHandlers.forEach(handler => {\n          try {\n            handler(message);\n          } catch (error) {\n            console.error('Error in message handler:', error);\n          }\n        });\n      } catch (error) {\n        console.error('Error handling WebSocket message:', error);\n      }\n    };\n  }\n  async connect(channelId) {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      return;\n    }\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    try {\n      const token = getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      console.log('Connecting to WebSocket...');\n      this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('WebSocket connection timeout'));\n        }, 5000);\n        if (this.socket) {\n          this.socket.onopen = () => {\n            console.log('WebSocket connection opened');\n            clearTimeout(timeout);\n            this.startHeartbeat();\n            resolve();\n          };\n          this.socket.onerror = error => {\n            console.error('WebSocket connection error:', error);\n            clearTimeout(timeout);\n            reject(error);\n          };\n        }\n      });\n      if (this.socket) {\n        this.socket.onmessage = this.handleWebSocketMessage;\n        this.socket.onclose = this.handleClose;\n        console.log('Joining channel:', channelId);\n        await this.joinChannel(channelId);\n        console.log('Successfully joined channel:', channelId);\n      }\n    } catch (error) {\n      console.error('WebSocket connection failed:', error);\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    }\n  }\n  startHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    this.heartbeatInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      // Check if we haven't received a heartbeat response in 30 seconds\n      if (Date.now() - this.lastHeartbeatResponse > 30000) {\n        console.warn('No heartbeat response received, reconnecting...');\n        this.reconnect();\n        return;\n      }\n      try {\n        var _this$socket;\n        (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.send(JSON.stringify({\n          type: 'ping'\n        }));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n        this.reconnect();\n      }\n    }, 15000); // Send heartbeat every 15 seconds\n  }\n  reconnect() {\n    if (this.currentChannelId) {\n      this.disconnect();\n      this.connect(this.currentChannelId).catch(console.error);\n    }\n  }\n  async joinChannel(channelId) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Cannot join channel: WebSocket is not connected');\n    }\n    if (this.isConnectedToChannel(channelId)) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      const joinMessage = {\n        type: 'join_channel',\n        channel_id: channelId\n      };\n      const joinTimeout = setTimeout(() => reject(new Error('Channel join timeout')), 5000);\n      const handleJoinResponse = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'channel_joined' && data.channel_id === channelId && this.socket) {\n            this.socket.removeEventListener('message', handleJoinResponse);\n            clearTimeout(joinTimeout);\n            this.joinedChannels.add(channelId);\n            resolve();\n          }\n        } catch (error) {}\n      };\n      if (this.socket) {\n        this.socket.addEventListener('message', handleJoinResponse);\n        this.socket.send(JSON.stringify(joinMessage));\n      } else {\n        reject(new Error('WebSocket not available'));\n      }\n    });\n  }\n  handleError(error) {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n  isConnected() {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n  isConnectedToChannel(channelId) {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n  onError(handler) {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n  disconnect() {\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n  }\n  async processMessageQueue() {\n    if (this.processingQueue || this.messageQueue.length === 0) return;\n    this.processingQueue = true;\n    console.log(`Processing message queue (${this.messageQueue.length} messages)`);\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue[0];\n      try {\n        if (this.isConnectedToChannel(message.channelId)) {\n          await this.sendMessage(message.channelId, message.content);\n          this.messageQueue.shift(); // Remove the successfully sent message\n        } else {\n          // If we're not connected to the channel, try to connect\n          try {\n            await this.connect(message.channelId);\n          } catch (error) {\n            console.error('Failed to connect while processing queue:', error);\n            break; // Stop processing if we can't connect\n          }\n        }\n      } catch (error) {\n        console.error('Failed to send queued message:', error);\n        // If sending fails, leave the message in the queue and try again later\n        break;\n      }\n    }\n    this.processingQueue = false;\n  }\n  async sendMessage(channelId, content) {\n    console.log('Attempting to send message:', {\n      channelId,\n      content\n    });\n    if (!this.isConnectedToChannel(channelId)) {\n      console.log('Not connected to channel, attempting to connect...');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('Failed to connect:', error);\n        throw error;\n      }\n    }\n    const message = {\n      type: 'message',\n      channel_id: channelId,\n      content: content\n    };\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      throw new Error('WebSocket is not connected');\n    }\n    try {\n      console.log('Sending WebSocket message:', message);\n      this.socket.send(JSON.stringify(message));\n      console.log('Message sent successfully');\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n  async attemptReconnect() {\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\n      return;\n    }\n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n    if (this.currentChannelId) {\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n      this.reconnectTimeout = setTimeout(async () => {\n        try {\n          await this.connect(this.currentChannelId);\n          this.isReconnecting = false;\n          // Process any queued messages after successful reconnection\n          await this.processMessageQueue();\n        } catch (error) {\n          console.error('Reconnection failed:', error);\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.isReconnecting = false; // Reset flag to allow next attempt\n            this.attemptReconnect();\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.isReconnecting = false;\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\n          }\n        }\n      }, backoffTime);\n    } else {\n      this.isReconnecting = false;\n    }\n  }\n  getChatSocketState() {\n    var _this$socket2;\n    return ((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.readyState) || WebSocket.CLOSED;\n  }\n  offMessage(handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n  offError(handler) {\n    this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n  }\n}\nconst wsService = new WebSocketService();\nexport default wsService;","map":{"version":3,"names":["getAuthToken","WebSocketService","constructor","socket","messageHandlers","errorHandlers","currentChannelId","joinedChannels","Set","messageQueue","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","isReconnecting","connectionPromise","joinPromise","lastMessageId","processingQueue","heartbeatInterval","lastHeartbeatResponse","Date","now","handleClose","event","wasConnected","readyState","WebSocket","OPEN","clear","code","attemptReconnect","handleWebSocketMessage","message","JSON","parse","data","console","log","type","channelId","add","id","toString","forEach","handler","error","connect","isConnected","isConnectedToChannel","disconnect","token","Error","Promise","resolve","reject","timeout","setTimeout","onopen","clearTimeout","startHeartbeat","onerror","onmessage","onclose","joinChannel","handleError","clearInterval","setInterval","warn","reconnect","_this$socket","send","stringify","catch","joinMessage","channel_id","joinTimeout","handleJoinResponse","removeEventListener","addEventListener","has","onMessage","push","filter","h","onError","close","processMessageQueue","length","sendMessage","content","shift","backoffTime","Math","min","pow","getChatSocketState","_this$socket2","CLOSED","offMessage","offError","wsService"],"sources":["Z:/GAUNTLET/projects/SERMO/sermo-app/frontend/src/services/websocket/index.ts"],"sourcesContent":["import { WebSocketMessage, WebSocketChannelJoinMessage, WebSocketChannelMessage, StoreMessage } from '../../types';\nimport { getAuthToken } from '../api/auth';\nimport { store } from '../../store';\nimport { addMessage, setReplies } from '../../store/messages/messagesSlice';\n\n// Add WebSocket message types\ninterface WebSocketJoinMessage {\n  type: 'join_channel';\n  channel_id: string;\n}\n\ninterface WebSocketJoinResponse {\n  type: 'channel_joined' | 'channel_join_error';\n  channelId: string;\n  error?: string;\n}\n\nclass WebSocketService {\n  private socket: WebSocket | null = null;\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\n  private errorHandlers: ((error: Error) => void)[] = [];\n  private currentChannelId: string | null = null;\n  private joinedChannels: Set<string> = new Set();\n  private messageQueue: { channelId: string; content: string }[] = [];\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private isReconnecting = false;\n  private connectionPromise: Promise<void> | null = null;\n  private joinPromise: Promise<void> | null = null;\n  private lastMessageId: string | null = null;\n  private processingQueue = false;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private lastHeartbeatResponse: number = Date.now();\n\n  public async connect(channelId: string): Promise<void> {\n    if (this.isConnected() && this.isConnectedToChannel(channelId)) {\n      return;\n    }\n\n    this.disconnect();\n    this.currentChannelId = channelId;\n    this.isReconnecting = false;\n    this.reconnectAttempts = 0;\n    \n    try {\n      const token = getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      console.log('Connecting to WebSocket...');\n      this.socket = new WebSocket(`ws://localhost:8000/ws/chat?token=${token}`);\n\n      await new Promise<void>((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('WebSocket connection timeout'));\n        }, 5000);\n\n        if (this.socket) {\n          this.socket.onopen = () => {\n            console.log('WebSocket connection opened');\n            clearTimeout(timeout);\n            this.startHeartbeat();\n            resolve();\n          };\n\n          this.socket.onerror = (error) => {\n            console.error('WebSocket connection error:', error);\n            clearTimeout(timeout);\n            reject(error);\n          };\n        }\n      });\n\n      if (this.socket) {\n        this.socket.onmessage = this.handleWebSocketMessage;\n        this.socket.onclose = this.handleClose;\n        console.log('Joining channel:', channelId);\n        await this.joinChannel(channelId);\n        console.log('Successfully joined channel:', channelId);\n      }\n      \n    } catch (error) {\n      console.error('WebSocket connection failed:', error);\n      this.handleError(error instanceof Error ? error : new Error('WebSocket connection failed'));\n      throw error;\n    }\n  }\n\n  private startHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n\n    this.heartbeatInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      // Check if we haven't received a heartbeat response in 30 seconds\n      if (Date.now() - this.lastHeartbeatResponse > 30000) {\n        console.warn('No heartbeat response received, reconnecting...');\n        this.reconnect();\n        return;\n      }\n\n      try {\n        this.socket?.send(JSON.stringify({ type: 'ping' }));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n        this.reconnect();\n      }\n    }, 15000); // Send heartbeat every 15 seconds\n  }\n\n  private reconnect(): void {\n    if (this.currentChannelId) {\n      this.disconnect();\n      this.connect(this.currentChannelId).catch(console.error);\n    }\n  }\n\n  private handleClose = (event: CloseEvent) => {\n    if (this.socket === null) return;\n    \n    const wasConnected = this.socket.readyState === WebSocket.OPEN;\n    this.socket = null;\n    this.joinedChannels.clear();\n\n    if (event.code !== 1000 && wasConnected) {\n      if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.attemptReconnect();\n      }\n    }\n  };\n\n  public async joinChannel(channelId: string): Promise<void> {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Cannot join channel: WebSocket is not connected');\n    }\n\n    if (this.isConnectedToChannel(channelId)) {\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      const joinMessage = { type: 'join_channel', channel_id: channelId };\n      const joinTimeout = setTimeout(() => reject(new Error('Channel join timeout')), 5000);\n      \n      const handleJoinResponse = (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'channel_joined' && data.channel_id === channelId && this.socket) {\n            this.socket.removeEventListener('message', handleJoinResponse);\n            clearTimeout(joinTimeout);\n            this.joinedChannels.add(channelId);\n            resolve();\n          }\n        } catch (error) {}\n      };\n\n      if (this.socket) {\n        this.socket.addEventListener('message', handleJoinResponse);\n        this.socket.send(JSON.stringify(joinMessage));\n      } else {\n        reject(new Error('WebSocket not available'));\n      }\n    });\n  }\n\n  private handleError(error: Error): void {\n    console.error('WebSocket error:', error);\n    this.errorHandlers.forEach(handler => handler(error));\n  }\n\n  public isConnected(): boolean {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n\n  private isConnectedToChannel(channelId: string): boolean {\n    return this.isConnected() && this.joinedChannels.has(channelId) && this.currentChannelId === channelId;\n  }\n\n  public onMessage(handler: (message: WebSocketMessage) => void): () => void {\n    this.messageHandlers.push(handler);\n    return () => {\n      this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n    };\n  }\n\n  public onError(handler: (error: Error) => void): () => void {\n    this.errorHandlers.push(handler);\n    return () => {\n      this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n    };\n  }\n\n  public disconnect(): void {\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close(1000);\n    }\n    this.socket = null;\n    this.joinedChannels.clear();\n    this.messageHandlers = [];\n    this.errorHandlers = [];\n    this.reconnectAttempts = 0;\n    this.connectionPromise = null;\n    this.joinPromise = null;\n  }\n\n  private async processMessageQueue(): Promise<void> {\n    if (this.processingQueue || this.messageQueue.length === 0) return;\n\n    this.processingQueue = true;\n    console.log(`Processing message queue (${this.messageQueue.length} messages)`);\n\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue[0];\n      \n      try {\n        if (this.isConnectedToChannel(message.channelId)) {\n          await this.sendMessage(message.channelId, message.content);\n          this.messageQueue.shift(); // Remove the successfully sent message\n        } else {\n          // If we're not connected to the channel, try to connect\n          try {\n            await this.connect(message.channelId);\n          } catch (error) {\n            console.error('Failed to connect while processing queue:', error);\n            break; // Stop processing if we can't connect\n          }\n        }\n      } catch (error) {\n        console.error('Failed to send queued message:', error);\n        // If sending fails, leave the message in the queue and try again later\n        break;\n      }\n    }\n\n    this.processingQueue = false;\n  }\n\n  public async sendMessage(channelId: string, content: string): Promise<void> {\n    console.log('Attempting to send message:', { channelId, content });\n\n    if (!this.isConnectedToChannel(channelId)) {\n      console.log('Not connected to channel, attempting to connect...');\n      try {\n        await this.connect(channelId);\n      } catch (error) {\n        console.error('Failed to connect:', error);\n        throw error;\n      }\n    }\n\n    const message = {\n      type: 'message',\n      channel_id: channelId,\n      content: content\n    };\n\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      throw new Error('WebSocket is not connected');\n    }\n\n    try {\n      console.log('Sending WebSocket message:', message);\n      this.socket.send(JSON.stringify(message));\n      console.log('Message sent successfully');\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  private async attemptReconnect(): Promise<void> {\n    if (this.isReconnecting || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Skipping reconnect: already reconnecting or max attempts reached');\n      return;\n    }\n\n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n\n    console.log(`Attempting to reconnect (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n\n    if (this.currentChannelId) {\n      const backoffTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);\n      \n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n\n      this.reconnectTimeout = setTimeout(async () => {\n        try {\n          await this.connect(this.currentChannelId!);\n          this.isReconnecting = false;\n          // Process any queued messages after successful reconnection\n          await this.processMessageQueue();\n        } catch (error) {\n          console.error('Reconnection failed:', error);\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.isReconnecting = false; // Reset flag to allow next attempt\n            this.attemptReconnect();\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.isReconnecting = false;\n            this.handleError(new Error('Failed to reconnect after maximum attempts'));\n          }\n        }\n      }, backoffTime);\n    } else {\n      this.isReconnecting = false;\n    }\n  }\n\n  public getChatSocketState(): number {\n    return this.socket?.readyState || WebSocket.CLOSED;\n  }\n\n  // Update message handler to track last message ID\n  private handleWebSocketMessage = (event: MessageEvent) => {\n    try {\n      const message = JSON.parse(event.data) as WebSocketMessage;\n      console.log('Received WebSocket message:', message);\n      \n      // Update heartbeat timestamp for any message\n      this.lastHeartbeatResponse = Date.now();\n\n      if (message.type === 'pong') {\n        console.log('Received pong message');\n        return; // Ignore heartbeat responses\n      }\n\n      // Handle channel join responses separately\n      if (message.type === 'channel_joined') {\n        console.log('Channel joined:', message.channelId);\n        this.joinedChannels.add(message.channelId);\n        return;\n      }\n\n      // For message events, update lastMessageId\n      if (message.type === 'message' || message.type === 'message_sent' || message.type === 'new_reply' || message.type === 'message_updated') {\n        if ('message' in message && typeof message.message === 'object' && message.message) {\n          this.lastMessageId = message.message.id.toString();\n          console.log('Updated last message ID:', this.lastMessageId);\n        }\n      }\n\n      // Notify all handlers\n      this.messageHandlers.forEach(handler => {\n        try {\n          handler(message);\n        } catch (error) {\n          console.error('Error in message handler:', error);\n        }\n      });\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n    }\n  };\n\n  public offMessage(handler: (message: WebSocketMessage) => void): void {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n\n  public offError(handler: (error: Error) => void): void {\n    this.errorHandlers = this.errorHandlers.filter(h => h !== handler);\n  }\n}\n\nconst wsService = new WebSocketService();\nexport default wsService; "],"mappings":"AACA,SAASA,YAAY,QAAQ,aAAa;;AAI1C;;AAYA,MAAMC,gBAAgB,CAAC;EAAAC,YAAA;IAAA,KACbC,MAAM,GAAqB,IAAI;IAAA,KAC/BC,eAAe,GAA4C,EAAE;IAAA,KAC7DC,aAAa,GAA+B,EAAE;IAAA,KAC9CC,gBAAgB,GAAkB,IAAI;IAAA,KACtCC,cAAc,GAAgB,IAAIC,GAAG,CAAC,CAAC;IAAA,KACvCC,YAAY,GAA6C,EAAE;IAAA,KAC3DC,iBAAiB,GAAG,CAAC;IAAA,KACrBC,oBAAoB,GAAG,CAAC;IAAA,KACxBC,gBAAgB,GAA0B,IAAI;IAAA,KAC9CC,cAAc,GAAG,KAAK;IAAA,KACtBC,iBAAiB,GAAyB,IAAI;IAAA,KAC9CC,WAAW,GAAyB,IAAI;IAAA,KACxCC,aAAa,GAAkB,IAAI;IAAA,KACnCC,eAAe,GAAG,KAAK;IAAA,KACvBC,iBAAiB,GAA0B,IAAI;IAAA,KAC/CC,qBAAqB,GAAWC,IAAI,CAACC,GAAG,CAAC,CAAC;IAAA,KA0F1CC,WAAW,GAAIC,KAAiB,IAAK;MAC3C,IAAI,IAAI,CAACpB,MAAM,KAAK,IAAI,EAAE;MAE1B,MAAMqB,YAAY,GAAG,IAAI,CAACrB,MAAM,CAACsB,UAAU,KAAKC,SAAS,CAACC,IAAI;MAC9D,IAAI,CAACxB,MAAM,GAAG,IAAI;MAClB,IAAI,CAACI,cAAc,CAACqB,KAAK,CAAC,CAAC;MAE3B,IAAIL,KAAK,CAACM,IAAI,KAAK,IAAI,IAAIL,YAAY,EAAE;QACvC,IAAI,CAAC,IAAI,CAACX,cAAc,IAAI,IAAI,CAACH,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;UAC9E,IAAI,CAACmB,gBAAgB,CAAC,CAAC;QACzB;MACF;IACF,CAAC;IAgMD;IAAA,KACQC,sBAAsB,GAAIR,KAAmB,IAAK;MACxD,IAAI;QACF,MAAMS,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACX,KAAK,CAACY,IAAI,CAAqB;QAC1DC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEL,OAAO,CAAC;;QAEnD;QACA,IAAI,CAACb,qBAAqB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;QAEvC,IAAIW,OAAO,CAACM,IAAI,KAAK,MAAM,EAAE;UAC3BF,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;UACpC,OAAO,CAAC;QACV;;QAEA;QACA,IAAIL,OAAO,CAACM,IAAI,KAAK,gBAAgB,EAAE;UACrCF,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,OAAO,CAACO,SAAS,CAAC;UACjD,IAAI,CAAChC,cAAc,CAACiC,GAAG,CAACR,OAAO,CAACO,SAAS,CAAC;UAC1C;QACF;;QAEA;QACA,IAAIP,OAAO,CAACM,IAAI,KAAK,SAAS,IAAIN,OAAO,CAACM,IAAI,KAAK,cAAc,IAAIN,OAAO,CAACM,IAAI,KAAK,WAAW,IAAIN,OAAO,CAACM,IAAI,KAAK,iBAAiB,EAAE;UACvI,IAAI,SAAS,IAAIN,OAAO,IAAI,OAAOA,OAAO,CAACA,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACA,OAAO,EAAE;YAClF,IAAI,CAAChB,aAAa,GAAGgB,OAAO,CAACA,OAAO,CAACS,EAAE,CAACC,QAAQ,CAAC,CAAC;YAClDN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAACrB,aAAa,CAAC;UAC7D;QACF;;QAEA;QACA,IAAI,CAACZ,eAAe,CAACuC,OAAO,CAACC,OAAO,IAAI;UACtC,IAAI;YACFA,OAAO,CAACZ,OAAO,CAAC;UAClB,CAAC,CAAC,OAAOa,KAAK,EAAE;YACdT,OAAO,CAACS,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACnD;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;EAAA;EA5UD,MAAaC,OAAOA,CAACP,SAAiB,EAAiB;IACrD,IAAI,IAAI,CAACQ,WAAW,CAAC,CAAC,IAAI,IAAI,CAACC,oBAAoB,CAACT,SAAS,CAAC,EAAE;MAC9D;IACF;IAEA,IAAI,CAACU,UAAU,CAAC,CAAC;IACjB,IAAI,CAAC3C,gBAAgB,GAAGiC,SAAS;IACjC,IAAI,CAAC1B,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACH,iBAAiB,GAAG,CAAC;IAE1B,IAAI;MACF,MAAMwC,KAAK,GAAGlD,YAAY,CAAC,CAAC;MAC5B,IAAI,CAACkD,KAAK,EAAE;QACV,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEAf,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,IAAI,CAAClC,MAAM,GAAG,IAAIuB,SAAS,CAAC,qCAAqCwB,KAAK,EAAE,CAAC;MAEzE,MAAM,IAAIE,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAK;QAC3C,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;UAC/BF,MAAM,CAAC,IAAIH,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACnD,CAAC,EAAE,IAAI,CAAC;QAER,IAAI,IAAI,CAAChD,MAAM,EAAE;UACf,IAAI,CAACA,MAAM,CAACsD,MAAM,GAAG,MAAM;YACzBrB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;YAC1CqB,YAAY,CAACH,OAAO,CAAC;YACrB,IAAI,CAACI,cAAc,CAAC,CAAC;YACrBN,OAAO,CAAC,CAAC;UACX,CAAC;UAED,IAAI,CAAClD,MAAM,CAACyD,OAAO,GAAIf,KAAK,IAAK;YAC/BT,OAAO,CAACS,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;YACnDa,YAAY,CAACH,OAAO,CAAC;YACrBD,MAAM,CAACT,KAAK,CAAC;UACf,CAAC;QACH;MACF,CAAC,CAAC;MAEF,IAAI,IAAI,CAAC1C,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAAC0D,SAAS,GAAG,IAAI,CAAC9B,sBAAsB;QACnD,IAAI,CAAC5B,MAAM,CAAC2D,OAAO,GAAG,IAAI,CAACxC,WAAW;QACtCc,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,SAAS,CAAC;QAC1C,MAAM,IAAI,CAACwB,WAAW,CAACxB,SAAS,CAAC;QACjCH,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,SAAS,CAAC;MACxD;IAEF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,IAAI,CAACmB,WAAW,CAACnB,KAAK,YAAYM,KAAK,GAAGN,KAAK,GAAG,IAAIM,KAAK,CAAC,6BAA6B,CAAC,CAAC;MAC3F,MAAMN,KAAK;IACb;EACF;EAEQc,cAAcA,CAAA,EAAS;IAC7B,IAAI,IAAI,CAACzC,iBAAiB,EAAE;MAC1B+C,aAAa,CAAC,IAAI,CAAC/C,iBAAiB,CAAC;IACvC;IAEA,IAAI,CAACA,iBAAiB,GAAGgD,WAAW,CAAC,MAAM;MACzC,IAAI,CAAC,IAAI,CAACnB,WAAW,CAAC,CAAC,EAAE;QACvB;MACF;;MAEA;MACA,IAAI3B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACF,qBAAqB,GAAG,KAAK,EAAE;QACnDiB,OAAO,CAAC+B,IAAI,CAAC,iDAAiD,CAAC;QAC/D,IAAI,CAACC,SAAS,CAAC,CAAC;QAChB;MACF;MAEA,IAAI;QAAA,IAAAC,YAAA;QACF,CAAAA,YAAA,OAAI,CAAClE,MAAM,cAAAkE,YAAA,uBAAXA,YAAA,CAAaC,IAAI,CAACrC,IAAI,CAACsC,SAAS,CAAC;UAAEjC,IAAI,EAAE;QAAO,CAAC,CAAC,CAAC;MACrD,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACuB,SAAS,CAAC,CAAC;MAClB;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;EACb;EAEQA,SAASA,CAAA,EAAS;IACxB,IAAI,IAAI,CAAC9D,gBAAgB,EAAE;MACzB,IAAI,CAAC2C,UAAU,CAAC,CAAC;MACjB,IAAI,CAACH,OAAO,CAAC,IAAI,CAACxC,gBAAgB,CAAC,CAACkE,KAAK,CAACpC,OAAO,CAACS,KAAK,CAAC;IAC1D;EACF;EAgBA,MAAakB,WAAWA,CAACxB,SAAiB,EAAiB;IACzD,IAAI,CAAC,IAAI,CAACpC,MAAM,IAAI,IAAI,CAACA,MAAM,CAACsB,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC7D,MAAM,IAAIwB,KAAK,CAAC,iDAAiD,CAAC;IACpE;IAEA,IAAI,IAAI,CAACH,oBAAoB,CAACT,SAAS,CAAC,EAAE;MACxC;IACF;IAEA,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMmB,WAAW,GAAG;QAAEnC,IAAI,EAAE,cAAc;QAAEoC,UAAU,EAAEnC;MAAU,CAAC;MACnE,MAAMoC,WAAW,GAAGnB,UAAU,CAAC,MAAMF,MAAM,CAAC,IAAIH,KAAK,CAAC,sBAAsB,CAAC,CAAC,EAAE,IAAI,CAAC;MAErF,MAAMyB,kBAAkB,GAAIrD,KAAmB,IAAK;QAClD,IAAI;UACF,MAAMY,IAAI,GAAGF,IAAI,CAACC,KAAK,CAACX,KAAK,CAACY,IAAI,CAAC;UACnC,IAAIA,IAAI,CAACG,IAAI,KAAK,gBAAgB,IAAIH,IAAI,CAACuC,UAAU,KAAKnC,SAAS,IAAI,IAAI,CAACpC,MAAM,EAAE;YAClF,IAAI,CAACA,MAAM,CAAC0E,mBAAmB,CAAC,SAAS,EAAED,kBAAkB,CAAC;YAC9DlB,YAAY,CAACiB,WAAW,CAAC;YACzB,IAAI,CAACpE,cAAc,CAACiC,GAAG,CAACD,SAAS,CAAC;YAClCc,OAAO,CAAC,CAAC;UACX;QACF,CAAC,CAAC,OAAOR,KAAK,EAAE,CAAC;MACnB,CAAC;MAED,IAAI,IAAI,CAAC1C,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAAC2E,gBAAgB,CAAC,SAAS,EAAEF,kBAAkB,CAAC;QAC3D,IAAI,CAACzE,MAAM,CAACmE,IAAI,CAACrC,IAAI,CAACsC,SAAS,CAACE,WAAW,CAAC,CAAC;MAC/C,CAAC,MAAM;QACLnB,MAAM,CAAC,IAAIH,KAAK,CAAC,yBAAyB,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC;EACJ;EAEQa,WAAWA,CAACnB,KAAY,EAAQ;IACtCT,OAAO,CAACS,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,IAAI,CAACxC,aAAa,CAACsC,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACC,KAAK,CAAC,CAAC;EACvD;EAEOE,WAAWA,CAAA,EAAY;IAC5B,OAAO,IAAI,CAAC5C,MAAM,KAAK,IAAI,IAAI,IAAI,CAACA,MAAM,CAACsB,UAAU,KAAKC,SAAS,CAACC,IAAI;EAC1E;EAEQqB,oBAAoBA,CAACT,SAAiB,EAAW;IACvD,OAAO,IAAI,CAACQ,WAAW,CAAC,CAAC,IAAI,IAAI,CAACxC,cAAc,CAACwE,GAAG,CAACxC,SAAS,CAAC,IAAI,IAAI,CAACjC,gBAAgB,KAAKiC,SAAS;EACxG;EAEOyC,SAASA,CAACpC,OAA4C,EAAc;IACzE,IAAI,CAACxC,eAAe,CAAC6E,IAAI,CAACrC,OAAO,CAAC;IAClC,OAAO,MAAM;MACX,IAAI,CAACxC,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC8E,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKvC,OAAO,CAAC;IACxE,CAAC;EACH;EAEOwC,OAAOA,CAACxC,OAA+B,EAAc;IAC1D,IAAI,CAACvC,aAAa,CAAC4E,IAAI,CAACrC,OAAO,CAAC;IAChC,OAAO,MAAM;MACX,IAAI,CAACvC,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC6E,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKvC,OAAO,CAAC;IACpE,CAAC;EACH;EAEOK,UAAUA,CAAA,EAAS;IACxB,IAAI,CAACpC,cAAc,GAAG,KAAK;IAC3B,IAAI,IAAI,CAACD,gBAAgB,EAAE;MACzB8C,YAAY,CAAC,IAAI,CAAC9C,gBAAgB,CAAC;MACnC,IAAI,CAACA,gBAAgB,GAAG,IAAI;IAC9B;IACA,IAAI,IAAI,CAACT,MAAM,IAAI,IAAI,CAACA,MAAM,CAACsB,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC5D,IAAI,CAACxB,MAAM,CAACkF,KAAK,CAAC,IAAI,CAAC;IACzB;IACA,IAAI,CAAClF,MAAM,GAAG,IAAI;IAClB,IAAI,CAACI,cAAc,CAACqB,KAAK,CAAC,CAAC;IAC3B,IAAI,CAACxB,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACK,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACI,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEA,MAAcuE,mBAAmBA,CAAA,EAAkB;IACjD,IAAI,IAAI,CAACrE,eAAe,IAAI,IAAI,CAACR,YAAY,CAAC8E,MAAM,KAAK,CAAC,EAAE;IAE5D,IAAI,CAACtE,eAAe,GAAG,IAAI;IAC3BmB,OAAO,CAACC,GAAG,CAAC,6BAA6B,IAAI,CAAC5B,YAAY,CAAC8E,MAAM,YAAY,CAAC;IAE9E,OAAO,IAAI,CAAC9E,YAAY,CAAC8E,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMvD,OAAO,GAAG,IAAI,CAACvB,YAAY,CAAC,CAAC,CAAC;MAEpC,IAAI;QACF,IAAI,IAAI,CAACuC,oBAAoB,CAAChB,OAAO,CAACO,SAAS,CAAC,EAAE;UAChD,MAAM,IAAI,CAACiD,WAAW,CAACxD,OAAO,CAACO,SAAS,EAAEP,OAAO,CAACyD,OAAO,CAAC;UAC1D,IAAI,CAAChF,YAAY,CAACiF,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,MAAM;UACL;UACA,IAAI;YACF,MAAM,IAAI,CAAC5C,OAAO,CAACd,OAAO,CAACO,SAAS,CAAC;UACvC,CAAC,CAAC,OAAOM,KAAK,EAAE;YACdT,OAAO,CAACS,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;YACjE,MAAM,CAAC;UACT;QACF;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD;QACA;MACF;IACF;IAEA,IAAI,CAAC5B,eAAe,GAAG,KAAK;EAC9B;EAEA,MAAauE,WAAWA,CAACjD,SAAiB,EAAEkD,OAAe,EAAiB;IAC1ErD,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE;MAAEE,SAAS;MAAEkD;IAAQ,CAAC,CAAC;IAElE,IAAI,CAAC,IAAI,CAACzC,oBAAoB,CAACT,SAAS,CAAC,EAAE;MACzCH,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjE,IAAI;QACF,MAAM,IAAI,CAACS,OAAO,CAACP,SAAS,CAAC;MAC/B,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,MAAMA,KAAK;MACb;IACF;IAEA,MAAMb,OAAO,GAAG;MACdM,IAAI,EAAE,SAAS;MACfoC,UAAU,EAAEnC,SAAS;MACrBkD,OAAO,EAAEA;IACX,CAAC;IAED,IAAI,CAAC,IAAI,CAACtF,MAAM,IAAI,IAAI,CAACA,MAAM,CAACsB,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC7DS,OAAO,CAACS,KAAK,CAAC,4BAA4B,CAAC;MAC3C,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,IAAI;MACFf,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEL,OAAO,CAAC;MAClD,IAAI,CAAC7B,MAAM,CAACmE,IAAI,CAACrC,IAAI,CAACsC,SAAS,CAACvC,OAAO,CAAC,CAAC;MACzCI,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;EAEA,MAAcf,gBAAgBA,CAAA,EAAkB;IAC9C,IAAI,IAAI,CAACjB,cAAc,IAAI,IAAI,CAACH,iBAAiB,IAAI,IAAI,CAACC,oBAAoB,EAAE;MAC9EyB,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;MAC/E;IACF;IAEA,IAAI,CAACxB,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACH,iBAAiB,EAAE;IAExB0B,OAAO,CAACC,GAAG,CAAC,oCAAoC,IAAI,CAAC3B,iBAAiB,IAAI,IAAI,CAACC,oBAAoB,MAAM,CAAC;IAE1G,IAAI,IAAI,CAACL,gBAAgB,EAAE;MACzB,MAAMqF,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,GAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,IAAI,CAACpF,iBAAiB,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;MAEnF,IAAI,IAAI,CAACE,gBAAgB,EAAE;QACzB8C,YAAY,CAAC,IAAI,CAAC9C,gBAAgB,CAAC;MACrC;MAEA,IAAI,CAACA,gBAAgB,GAAG4C,UAAU,CAAC,YAAY;QAC7C,IAAI;UACF,MAAM,IAAI,CAACV,OAAO,CAAC,IAAI,CAACxC,gBAAiB,CAAC;UAC1C,IAAI,CAACO,cAAc,GAAG,KAAK;UAC3B;UACA,MAAM,IAAI,CAACyE,mBAAmB,CAAC,CAAC;QAClC,CAAC,CAAC,OAAOzC,KAAK,EAAE;UACdT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;UAC5C,IAAI,IAAI,CAACnC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;YACtD,IAAI,CAACE,cAAc,GAAG,KAAK,CAAC,CAAC;YAC7B,IAAI,CAACiB,gBAAgB,CAAC,CAAC;UACzB,CAAC,MAAM;YACLM,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;YAChD,IAAI,CAACxB,cAAc,GAAG,KAAK;YAC3B,IAAI,CAACmD,WAAW,CAAC,IAAIb,KAAK,CAAC,4CAA4C,CAAC,CAAC;UAC3E;QACF;MACF,CAAC,EAAEwC,WAAW,CAAC;IACjB,CAAC,MAAM;MACL,IAAI,CAAC9E,cAAc,GAAG,KAAK;IAC7B;EACF;EAEOkF,kBAAkBA,CAAA,EAAW;IAAA,IAAAC,aAAA;IAClC,OAAO,EAAAA,aAAA,OAAI,CAAC7F,MAAM,cAAA6F,aAAA,uBAAXA,aAAA,CAAavE,UAAU,KAAIC,SAAS,CAACuE,MAAM;EACpD;EA4COC,UAAUA,CAACtD,OAA4C,EAAQ;IACpE,IAAI,CAACxC,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC8E,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKvC,OAAO,CAAC;EACxE;EAEOuD,QAAQA,CAACvD,OAA+B,EAAQ;IACrD,IAAI,CAACvC,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC6E,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKvC,OAAO,CAAC;EACpE;AACF;AAEA,MAAMwD,SAAS,GAAG,IAAInG,gBAAgB,CAAC,CAAC;AACxC,eAAemG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}