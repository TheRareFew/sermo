make todo list X

meta:
    - move all md files to docs/old X
    - move all files in docs/old to folder outside project X
    - project cleanup X
    - generate new documentation X
        - backend X
        - frontend X
        - ai X
        - auth/websockets X
        - current voice setup X
        - full project overview
    - move on with fixing voice
        - personally document current issues with voice
        - prompt: Examine all of our code regarding voice. Determine what is needed to fix the voice issues. Imagine you're a senior developer who is writing documentation for a new developer who is joining the project. Do not directly reference that the recepient is a junior developer. 
        Write a plan of action in markdown form. Enclose it in backticks. For the code snippets in the markdown file, don't use backticks. Replace the backticks for code within the markdown with [CODE START] and [CODE END]. Use checkboxes to keep track of progress.
    - move on with ai features

backend:
    - make sure requirements.txt is up to date X (not gonna worry about borking the project rn)
        - Prompt: Examine the requirements.txt file in the backend directory. Ensure it lists all necessary dependencies for the project. If any dependencies are missing, add them. If any dependencies are no longer needed, remove them. Generate a new requirements.txt file.

    - make sure backend documentation is up to date X
  
        - Prompt: Examine all of our code in the bakend directory. Start with database schema, then api endpoints, then websockets, then any other relevant information. Be detailed. Include the backend directory structure.Imagine you're a senior developer who is writing documentation for a new developer who is joining the project.
        - Generate a markdown file that contains an overview of the project's backend. Enclose it in backticks. For the code snippets in the markdown file, don't use backticks. Replace the backticks for code within the markdown with [CODE START] and [CODE END]. Be sure to reference files and their paths. Use checkboxes to keep track of progress.

frontend:
    - remove unnessary files from frontend
        -prompt: Comb through the frontend of our app. Identify anything that doesn't actually get used by our app. Remove things we are not using and do not intend to use.
    - make sure all files are in the correct directory
        - prompt: Ensure all files are located in the correct directory structure. If any files are misplaced, move them to the appropriate location.
    - remove unused dependencies
        - prompt: Examine the frontend's package.json file. Identify any dependencies that are no longer needed or are not being used by the project. Remove these unused dependencies from the file.
    - make sure frontend npm configuration is correct and includes all necessary dependencies
        - prompt: Verify that the frontend's package.json file is correctly configured. Ensure all necessary dependencies are listed and that the configuration is up to date.
    - make sure frontend documentation is up to date
        - prompt: Examine all of our code in the frontend directory. Pay close attention to when calls are made to the backend. Be sure to document all of these calls. Include as much detail as possible about the frontend. Imagine you're a senior developer who is writing documentation for a new developer who is joining the project. Do not directly reference that the recepient is a junior developer. Include the frontend directory structure.
        
        Generate a markdown file that contains an overview of the project's frontend. Enclose it in backticks. For the code snippets in the markdown file, don't use backticks. Replace the backticks for code within the markdown with [CODE START] and [CODE END]. Be sure to reference files and their paths. 

    
ai:
    - make sure ai documentation is up to date X
        - prompt: Examine all of our code in the backend directory regarding AI. Be sure to document all of the ai features and related functions. Imagine you're a senior developer who is writing documentation for a new developer who is joining the project. Do not directly reference that the recepient is a junior developer. 
        Generate a markdown file that contains an overview of the project's ai features. Enclose it in backticks. For the code snippets in the markdown file, don't use backticks. Replace the backticks for code within the markdown with [CODE START] and [CODE END]. Be sure to reference files and their paths. 

auth/websockets:
    - make sure auth/websockets documentation is up to date X
        - prompt: Examine all of our code regarding authentication and websockets. Be sure to document all of the auth/websockets features and related functions. Imagine you're a senior developer who is writing documentation for a new developer who is joining the project. Do not directly reference that the recepient is a junior developer.
        Generate a markdown file that contains an overview of the project's auth/websockets features. Enclose it in backticks. For the code snippets in the markdown file, don't use backticks. Replace the backticks for code within the markdown with [CODE START] and [CODE END]. Be sure to reference files and their paths. Do not break out of the code block when printing the file directory structure. 

voice:
    - make sure voice documentation is up to date X
        - prompt: Examine all of our code regarding voice. Be sure to document all of the voice features and related functions. Imagine you're a senior developer who is writing documentation for a new developer who is joining the project. Do not directly reference that the recepient is a junior developer. 
        Generate a markdown file that contains an overview of the project's voice features. Enclose it in backticks. For the code snippets in the markdown file, don't use backticks. Replace the backticks for code within the markdown with [CODE START] and [CODE END]. Be sure to reference files and their paths. Do not break out of the code block when printing the file directory structure. 

project overview:
    - prompt: Examine all of our code and overview documentation. Be sure to document all of the project's features and related functions. Remember that this is Sermo, a vintage-styled chat app with ai feature integration. Imagine you're a senior developer who is writing documentation for a new developer who is joining the project. Do not directly reference that the recepient is a junior developer. Include the project directory structure.
    - Generate a markdown file that contains an overview of the project. Enclose it in backticks. For the code snippets in the markdown file, don't use backticks. Replace the backticks for code within the markdown with [CODE START] and [CODE END]. Be sure to reference files and their paths. Do not break out of the code block when printing the file directory structure. 

